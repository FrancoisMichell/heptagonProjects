node room (presence : bool) returns (occupied: bool)
	let
		automaton
			state Empty do
				occupied = false;
				unless presence then Occupied

			state Occupied do
				occupied = true;
				unless presence then Empty
		end
	tel

node management_policy (eco_input, confort_input : bool) returns (eco_on, confort_on : bool; power_limit : int)
	let
		automaton
			state Minimal_safety do
				power_limit=3000;
				eco_on = false;
				confort_on = false;
				unless eco_input then Eco
					|	confort_input then Confort

			state Eco do
				power_limit=5000;
				eco_on = true;
				confort_on = false;
				unless eco_input then Minimal_safety
					|	confort_input then Confort

			state Confort do
				power_limit=7000;
				eco_on = false;
				confort_on = true;
				unless eco_input then Eco
					| confort_input then Minimal_safety
		end
	tel

node light_source (light_switch, c_light1, c_light2 : bool) returns (source_on : bool)
	let
		automaton
			state Off do
				source_on = false
				unless (light_switch & not c_light1) or c_light2 then On

			state On do
				source_on = true
				unless (light_switch & not c_light2) or c_light1 then On
		end
	tel

node door (push, c_door : bool) returns (door_open : bool)
	let
		automaton
			state Closed do
				door_open = false;
				unless push & c_door then Open

			state Open do
				door_open = true;
				unless push or not c_door then Closed
		end
	tel

node rad (up1, up2, down1, down2, c1, c2 : bool) returns (on_state, power : int)
	let
		automaton
			state Off do
				on_state = 0;
				power = 0;
				unless up1 or not c1 then Frost_Protection

			state Frost_Protection do
				on_state = 1;
				power = 300;
				unless up1 & c1 then Eco
					| up2 & c2 then High
					| down1 or not c1 then Off

			state Eco do
				on_state = 2 ;
				power = 1500 ;
				unless up2 & c2 then High
					| down1 or not c1 then Frost_Protection

			state High do
				on_state = 3 ;
				power = 2000 ;
				unless down2 or not c2 then Frost_Protection
					| down1 or not c1 then Eco
		end
	tel

node washing_machine (finish, start, c_wash : bool) returns (wash_state, wash_power : int)
	let
		automaton
			state Off do
				wash_state = 0;
				wash_power = 0;
				unless start then Water_fill

			state Water_fill do
				wash_state = 1;
				wash_power = 15;
				unless finish & c_wash then Washing
					| finish & not c_wash then Standby

			state Washing do
				wash_state = 2;
				wash_power = 250;
				unless finish then Rinse

			state Rinse do
				wash_state = 3;
				wash_power = 200;
				unless finish then Spin

			state Spin do
				wash_state = 4;
				wash_power = 800;
				unless finish then Off

			state Standby do
				wash_state = 5;
				wash_power = 0;
				unless c_wash then Washing
		end
	tel

node oven (finish, start, c_oven, cold, temp_ok : bool) returns (oven_state, oven_power : int)
	let
		automaton
			state Off do
				oven_state = 0;
				oven_power = 0;
				unless start & c_oven then Heat
					| start & not c_oven then Standby

			state Heat do
				oven_state = 1;
				oven_power = 1500;
				unless finish then Off
					| temp_ok then Maintain

			state Maintain do
				oven_state = 2;
				oven_power = 300;
				unless finish then Off
					| cold & c_oven then Reheat

			state Reheat do
				oven_state = 3;
				oven_power = 1000;
				unless temp_ok then Maintain
					| finish then Off

			state Standby do
				oven_state = 4;
				oven_power = 0;
				unless c_oven then Heat
		end
	tel

node controller (door_c1, window_c1, presence, lamp_switch, tv_switch, push_door, push_window, rad_up1, rad_up2, rad_down1, rad_down2, is_eco, is_confort : bool) returns (occupied, lamp_on, tv_on, door_open, window_open, eco_on, confort_on: bool; rad_state, rad_power, power_limit: int)

	contract
		var rule1, rule2, rule3, rule4, rule5 : bool;
		let 
			rule1 = not occupied or lamp_on or tv_on;
			rule2 = occupied or (not door_open & not window_open);
			rule3 = not (door_open or window_open) or (rad_state <= 1);
			rule4 = occupied or (not (lamp_on or tv_on) & (rad_state <= 1));
			rule5 = rad_power <= 3000;
		tel

		enforce rule1 & rule3 & rule4
		with (lamp_c1, lamp_c2, tv_c1, tv_c2, rad_c1, rad_c2 : bool)

	let
		occupied = inlined room (presence);
		lamp_on = inlined light_source(lamp_switch, lamp_c1, lamp_c2);
		tv_on = inlined light_source(tv_switch, tv_c1, tv_c2);
		door_open = inlined door(push_door, door_c1);
		window_open = inlined door(push_window, window_c1);
		(rad_state, rad_power) = inlined rad(rad_up1, rad_up2, rad_down1, rad_down2, rad_c1, rad_c2);
		(eco_on, confort_on, power_limit) = inlined management_policy(is_eco, is_confort)
	tel
(* rule1: not room_oc or (tv or lamp) *)
(* rule2: room_oc or (not d_open & not w_open *)
(* rule3: not (d_open or w_open) or (rad_state <= 1) *)
(* rule4: room_oc or (not (lamp or tv) and (state_rad = 0 or state_rad = 1)  *)
