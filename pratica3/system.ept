node room (presence : bool) returns (room_oc: bool)
	let
		automaton
			state Empty do
				room_oc = false;
				unless presence then Occupied

			state Occupied do
				room_oc = true;
				unless presence then Empty
		end
	tel

node management_policy (eco_input, confort_input : bool) returns (eco, confort : bool; pl : int)
	let
		automaton
			state Minimal_safety do
				pl=3000;
				eco = false;
				confort = false;
				unless eco_input then Eco
					|	confort_input then Confort

			state Eco do
				pl=5000;
				eco = true;
				confort = false;
				unless eco_input then Minimal_safety
					|	confort_input then Confort

			state Confort do
				pl=7000;
				eco = false;
				confort = true;
				unless eco_input then Eco
					| confort_input then Minimal_safety
		end
	tel

node tv (tv_switch, c_tv1, c_tv2 : bool) returns (tv_on : bool)
	let
		automaton
			state Off do
				tv_on = false
				unless (tv_switch or c_tv1) & c_tv2 then On

			state On do
				tv_on = true
				unless (tv_switch or not c_tv1) & not c_tv2 then Off

		end
	tel

node lamp (lamp_switch, c_lamp1, c_lamp2 : bool) returns (lamp_on : bool)
	let
		automaton

			state Off do
				lamp_on = false
				unless (lamp_switch or c_lamp1) & c_lamp2 then On

			state On do
				lamp_on = true
				unless (lamp_switch or c_lamp1) & c_lamp2 then Off

		end
	tel

node door (push, c_door1, c_door2 : bool) returns (door_open : bool)
	let
		automaton
			state Closed do
				door_open = false;
				unless (push or c_door1) & c_door2 then Open

			state Open do
				door_open = true;
				unless (push & c_door1) & c_door2 then Closed
		end
	tel

node rad (up1, up2, down1, down2, c1, c2 : bool) returns (on_state, power : int)
	let
		automaton
			state Off do
				on_state = 0;
				power = 0;
				unless up1 or not c1 then Frost_Protection

			state Frost_Protection do
				on_state = 1;
				power = 300;
				unless up1 & c1 then Eco
					| up2 & c2 then High
					| down1 or not c1 then Off

			state Eco do
				on_state = 2 ;
				power = 1500 ;
				unless up2 & c2 then High
					| down1 or not c1 then Frost_Protection

			state High do
				on_state = 3 ;
				power = 2000 ;
				unless down2 or not c2 then Frost_Protection
					| down1 or not c1 then Eco
		end
	tel

node washing_machine (finish, start, c_wash : bool) returns (wash_state, wash_power : int)
	let
		automaton
			state Off do
				wash_state = 0;
				wash_power = 0;
				unless start then Water_fill

			state Water_fill do
				wash_state = 1;
				wash_power = 15;
				unless finish & c_wash then Washing
					| finish & not c_wash then Standby

			state Washing do
				wash_state = 2;
				wash_power = 250;
				unless finish then Rinse

			state Rinse do
				wash_state = 3;
				wash_power = 200;
				unless finish then Spin

			state Spin do
				wash_state = 4;
				wash_power = 800;
				unless finish then Off

			state Standby do
				wash_state = 5;
				wash_power = 0;
				unless c_wash then Washing
		end
	tel

node oven (finish, start, c_oven, cold, temp_ok : bool) returns (oven_state, oven_power : int)
	let
		automaton
			state Off do
				oven_state = 0;
				oven_power = 0;
				unless start & c_oven then Heat
					| start & not c_oven then Standby

			state Heat do
				oven_state = 1;
				oven_power = 1500;
				unless finish then Off
					| temp_ok then Maintain

			state Maintain do
				oven_state = 2;
				oven_power = 300;
				unless finish then Off
					| cold & c_oven then Reheat

			state Reheat do
				oven_state = 3;
				oven_power = 1000;
				unless temp_ok then Maintain
					| finish then Off

			state Standby do
				oven_state = 4;
				oven_power = 0;
				unless c_oven then Heat
		end
	tel

node controller ( (* up1_1, up2_1, down1_1, down2_1, eco_input1, confort_input1, *) presence1, (*push1,*) lamp_switch1, tv_switch1: bool) returns 
	((* eco1, confort1, *) room_oc1, (*door_open1,*) lamp_on1, tv_on1 : bool (* ); on_state1, power1, pl1 : int *))

	contract
		var (* rule1, rule2,*) rule1: bool;
		let
			(* rule1 = not (power1 > 3500);*)
			(* rule2 = not (not room_oc1 & door_open1); *)
			rule1 = not presence1 or not lamp_on1 or not tv_on1;
		tel

		enforce rule1	
		with(c1_1, c2_1, c_lamp1_1, c_lamp2_1, c_tv1_1, c_tv1_2 : bool)
	let
		(* (eco1, confort1, pl1) = inlined management_policy (eco_input1, confort_input1); *)
		(* (on_state1, power1) = inlined rad (up1_1, up2_1, down1_1, down2_1, c1_1, c2_1); *)
		room_oc1 = inlined room (presence1);
		(*door_open1 = inlined door (push1, c_door1_1, c_door2_1); *)
		lamp_on1 = inlined lamp(lamp_switch1, c_lamp1_1, c_lamp2_1);
		tv_on1 = inlined tv(tv_switch1, c_tv1_1, c_tv1_2);
	tel
(* rule1: not room_oc or (tv or lamp) *)
(* rule2: room_oc or (not d_open & not w_open *)
(* rule3: not (d_open or w_open) or (rad_state <= 1) *)
(* rule4: room_oc or (not (lamp or tv) and (state_rad = 0 or state_rad = 1)  *)
