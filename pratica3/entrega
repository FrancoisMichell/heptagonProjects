node room ( presence : bool ) returns ( occupied : bool )
	let
    automaton
	    
	    state Empty do
	      occupied = false;
	    	unless presence then Ocupied

	    state Ocupied do
	      occupied = true;
	    	unless not presence then Empty
    
    end
	tel

node management_policy( eco_input, comfort_input : bool ) returns ( eco_on , comfort_on : bool; power_limit : int )
	let
    automaton
	    state Minimal_safety do
	      power_limit = 3000;
	      eco_on = false;
	      comfort_on = false;
		    unless eco_input then Eco
		      | comfort_input then Comfort

	    state Eco do
	      power_limit = 5000;
	      eco_on = true;
	      comfort_on = false;
		    unless not eco_input then Minimal_safety
		      | comfort_input then Comfort

	    state Comfort do
	      power_limit = 7000;
	      eco_on = false;
	      comfort_on = true;
		    unless eco_input then Eco
		      | not comfort_input then Minimal_safety
    end
	tel

node light_source ( source_switch, c_source1, c_source2 : bool ) returns ( source_on : bool )
	let
    automaton
	  
	    state Desligado do
	      source_on = false;
	    	unless (source_switch & not c_source2) or c_source1 then Ligado
	  
	    state Ligado do
	      source_on = true;
		    unless (source_switch & not c_source1) or c_source2 then Desligado
    
    end
	tel

node door( push, c_door : bool ) returns ( door_open : bool )
	let
    automaton
    state Closed do
      door_open = false;
    unless push & c_door then Open
    state Open do
      door_open = true;
    unless push or not c_door then Closed
    end
	tel

node rad(up1,down1,up2,down2,c_rad1,c_rad2:bool) returns (rad_power, rad_state:int)
	let
    automaton
	    state Off do
	      rad_power = 0;
	      rad_state = 0;
		    unless up1 or not c_rad1 then Frostprotection

	    state Frostprotection do
	      rad_power = 300;
	      rad_state = 1;
		    unless up1 & c_rad1 then Eco
		      | up2 & c_rad2 then High
		      | down1 or not c_rad1 then Off
	    
	    state Eco do
	      rad_power = 1500;
	      rad_state = 2;
		    unless down1 or not c_rad1 then Frostprotection
		      | up2 & c_rad2 then High
	    
	    state High do
	      rad_power = 2000;
	      rad_state = 3;
		    unless down1 or not c_rad1 then Eco
		       | down2 or not c_rad2 then Frostprotection
    end
	tel

node washing_machine(finish, start, c_wash:bool) returns (wash_power, wash_state:int)
	let
    automaton
	    state Off do
	      wash_power = 0;
	      wash_state = 0;
	    	unless start then Water_fill

	    state Water_fill do
	      wash_power = 15;
	      wash_state = 1;
		    unless finish & not c_wash then Standby
		      | finish & c_wash then Washing
	    
	    state Washing do
	      wash_power = 250;
	      wash_state = 2;
	    	unless finish then Rinse
	    
	    state Rinse do
	      wash_power = 200;
	      wash_state = 3;
	    	unless finish then Spin
	    
	    state Spin do
	      wash_power = 800;
	      wash_state = 4;
	    	unless finish then Off
	    
	    state Standby do
	      wash_power = 0;
	      wash_state = 5;
	    	unless c_wash then Washing
    end
	tel

node oven(finish, start, c_oven, temp_ok, cold:bool) returns ( oven_power, oven_state:int)
	let
    automaton
	    state Off do
	      oven_power = 0;
	      oven_state = 0;
	    	unless start & c_oven then Heat 
	      	| start & not c_oven then Standby

	    state Heat do
	      oven_power = 1500;
	      oven_state = 1;
		    unless temp_ok then Maintain
		      | finish  then Off

	    state Maintain do
	      oven_power = 300;
	      oven_state = 2;
		    unless cold & c_oven then Reheat
		      | finish then Off

	    state Reheat do
	      oven_power = 1000;
	      oven_state = 3;
		    unless temp_ok then Maintain
		       | finish then Off
	    
	    state Standby do
	      oven_power = 0;
	      oven_state = 4;
	    	unless c_oven then Heat
    end
	tel

node controller( push_porta, push_janela, rad_up1, rad_down1, rad_up2, rad_down2, presence, light_switch, tv_switch : bool ) returns ( door_open, window_open, lamp_on, tv_on, occupied : bool; rad_power, rad_state : int )
  contract
	var rule1, rule2, rule3, rule4, rule5 : bool;

	let
		rule1 = ( not occupied or tv_on or lamp_on );
		rule2 = occupied or ( not door_open & not window_open );
		rule3 = not ( door_open or window_open ) or ( rad_state <= 1 );
		rule4 = occupied or (not(lamp_on or tv_on) & (rad_state <= 1));
		rule5 = rad_power < 2000
	tel
    enforce rule1 & rule2 & rule3 & rule4 & rule5
    with ( c_door, c_window, rad_c1, rad_c2, c_light1, c_light2, c_tv1, c_tv2 : bool )
	let
    (rad_power, rad_state) = inlined rad(rad_up1,rad_down1,rad_up2,rad_down2,rad_c1,rad_c2);
    door_open = inlined door(push_porta, c_door);
    window_open = inlined door(push_janela, c_window);
    lamp_on = inlined light_source(light_switch,c_light1,c_light2); 
    tv_on = inlined light_source(tv_switch,c_tv1,c_tv2);
    occupied = inlined room(presence);
	tel

