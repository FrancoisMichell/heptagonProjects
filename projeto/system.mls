type st_28 = St_28_Noite|St_28_Dia
type st_27 = St_27_Open|St_27_Closed
type st_26 = St_26_Open|St_26_Locked
type st_25 = St_25_Present|St_25_Not_Present
type st_24 = St_24_Present|St_24_Not_Present
type st_23 = St_23_On|St_23_Off
type st_22 = St_22_Open|St_22_Closed
type st_21 = St_21_Off|St_21_Min|St_21_Max
type st_20 = St_20_Funcionando|St_20_Falha
type st_19 = St_19_On|St_19_Off
type st_18 = St_18_Funcionando|St_18_Falha
type st_17 = St_17_Up|St_17_Down
type st_16 = St_16_Funcionando|St_16_Falha
type st_15 = St_15_Up|St_15_Down
type st_14 = St_14_Funcionando|St_14_Falha
type st_13 = St_13_On|St_13_Off
type st_12 = St_12_Funcionando|St_12_Falha
type st_11 = St_11_Off|St_11_Min|St_11_Max
type st_10 = St_10_Funcionando|St_10_Falha
type st_9 = St_9_Funcionando|St_9_Falha
type st_8 = St_8_Noite|St_8_Dia
type st_7 = St_7_Off|St_7_Min|St_7_Max
type st_6 = St_6_Open|St_6_Closed
type st_5 = St_5_On|St_5_Off
type st_4 = St_4_Present|St_4_Not_Present
type st_3 = St_3_Open|St_3_Locked
type st_2 = St_2_Open|St_2_Closed
type st_1 = St_1_Up|St_1_Down
type st = St_On|St_Off
node lamp(c1 : bool; c2 : bool; sw : bool) returns (lamp_on : bool)
var nr_St_On : bool; ns_St_On_1 : bool; lamp_on_St_On : bool;
    nr_St_Off : bool; ns_St_Off_1 : bool; lamp_on_St_Off : bool;
    ck_1_1 : bool; v_5 : bool; v_4 : bool; v_3 : bool; v_2 : bool;
    v_1 : bool; v : bool; r_St_On : bool; s_St_On_1 : bool; r_St_Off : bool;
    s_St_Off_1 : bool; ck_1_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  lamp_on_St_Off = false;
  nr_St_Off = false;
  ns_St_Off_1 = true;
  lamp_on_St_On = true;
  nr_St_On = false;
  ns_St_On_1 = false;
  lamp_on = merge ck_1_1 (true -> lamp_on_St_Off)(false -> lamp_on_St_On);
  ns_1 = merge ck_1_1 (true -> ns_St_Off_1)(false -> ns_St_On_1);
  nr = merge ck_1_1 (true -> nr_St_Off)(false -> nr_St_On);
  ck_1_2 = true fby ns_1;
  r_St_Off = if v_5 then true else (pnr when true(ck_1_2));
  s_St_Off_1 = if v_5 then false else true;
  v_5 = (v_3 or v_4);
  v_4 = not((c2 when true(ck_1_2)));
  v_3 = ((c1 when true(ck_1_2)) & (sw when true(ck_1_2)));
  r_St_On = if v_2 then true else (pnr when false(ck_1_2));
  s_St_On_1 = if v_2 then true else false;
  v_2 = (v or v_1);
  v_1 = not((c2 when false(ck_1_2)));
  v = ((c1 when false(ck_1_2)) & (sw when false(ck_1_2)));
  s_1 = merge ck_1_2 (true -> s_St_Off_1)(false -> s_St_On_1);
  r = merge ck_1_2 (true -> r_St_Off)(false -> r_St_On)
tel

node blind(c1 : bool; c2 : bool; sw : bool) returns (blind_open : bool)
var nr_St_1_Up : bool; ns_St_1_Up_1 : bool; blind_open_St_1_Up : bool;
    nr_St_1_Down : bool; ns_St_1_Down_1 : bool; blind_open_St_1_Down : bool;
    ck_2_1 : bool; v_10 : bool; v_9 : bool; v_8 : bool; v_7 : bool;
    v_6 : bool; v : bool; r_St_1_Up : bool; s_St_1_Up_1 : bool;
    r_St_1_Down : bool; s_St_1_Down_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  blind_open_St_1_Down = false;
  nr_St_1_Down = false;
  ns_St_1_Down_1 = true;
  blind_open_St_1_Up = true;
  nr_St_1_Up = false;
  ns_St_1_Up_1 = false;
  blind_open =
    merge ck_2_1 (true -> blind_open_St_1_Down)(false -> blind_open_St_1_Up);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Down_1)(false -> ns_St_1_Up_1);
  nr = merge ck_2_1 (true -> nr_St_1_Down)(false -> nr_St_1_Up);
  ck_1 = true fby ns_1;
  r_St_1_Down = if v_10 then true else (pnr when true(ck_1));
  s_St_1_Down_1 = if v_10 then false else true;
  v_10 = (v_8 or v_9);
  v_9 = not((c2 when true(ck_1)));
  v_8 = ((c1 when true(ck_1)) & (sw when true(ck_1)));
  r_St_1_Up = if v_7 then true else (pnr when false(ck_1));
  s_St_1_Up_1 = if v_7 then true else false;
  v_7 = (v or v_6);
  v_6 = not((c2 when false(ck_1)));
  v = ((c1 when false(ck_1)) & (sw when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Down_1)(false -> s_St_1_Up_1);
  r = merge ck_1 (true -> r_St_1_Down)(false -> r_St_1_Up)
tel

node door(c_door : bool) returns (door_open : bool)
var nr_St_2_Open : bool; ns_St_2_Open_1 : bool; door_open_St_2_Open : bool;
    nr_St_2_Closed : bool; ns_St_2_Closed_1 : bool;
    door_open_St_2_Closed : bool; ck_3_1 : bool; v_11 : bool; v : bool;
    r_St_2_Open : bool; s_St_2_Open_1 : bool; r_St_2_Closed : bool;
    s_St_2_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  door_open_St_2_Closed = false;
  nr_St_2_Closed = false;
  ns_St_2_Closed_1 = true;
  door_open_St_2_Open = true;
  nr_St_2_Open = false;
  ns_St_2_Open_1 = false;
  door_open =
    merge ck_3_1
      (true -> door_open_St_2_Closed)(false -> door_open_St_2_Open);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Closed_1)(false -> ns_St_2_Open_1);
  nr = merge ck_3_1 (true -> nr_St_2_Closed)(false -> nr_St_2_Open);
  ck_1 = true fby ns_1;
  r_St_2_Closed = if v_11 then true else (pnr when true(ck_1));
  s_St_2_Closed_1 = if v_11 then false else true;
  v_11 = not((c_door when true(ck_1)));
  r_St_2_Open = if v then true else (pnr when false(ck_1));
  s_St_2_Open_1 = if v then true else false;
  v = not((c_door when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_2_Closed_1)(false -> s_St_2_Open_1);
  r = merge ck_1 (true -> r_St_2_Closed)(false -> r_St_2_Open)
tel

node closet(c : bool) returns (closet_open : bool)
var nr_St_3_Open : bool; ns_St_3_Open_1 : bool; closet_open_St_3_Open : bool;
    nr_St_3_Locked : bool; ns_St_3_Locked_1 : bool;
    closet_open_St_3_Locked : bool; ck_4_1 : bool; v : bool;
    r_St_3_Open : bool; s_St_3_Open_1 : bool; r_St_3_Locked : bool;
    s_St_3_Locked_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  closet_open_St_3_Locked = false;
  nr_St_3_Locked = false;
  ns_St_3_Locked_1 = true;
  closet_open_St_3_Open = true;
  nr_St_3_Open = false;
  ns_St_3_Open_1 = false;
  closet_open =
    merge ck_4_1
      (true -> closet_open_St_3_Locked)(false -> closet_open_St_3_Open);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Locked_1)(false -> ns_St_3_Open_1);
  nr = merge ck_4_1 (true -> nr_St_3_Locked)(false -> nr_St_3_Open);
  ck_1 = true fby ns_1;
  r_St_3_Locked = if v then true else (pnr when true(ck_1));
  s_St_3_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_3_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_3_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_3_Locked_1)(false -> s_St_3_Open_1);
  r = merge ck_1 (true -> r_St_3_Locked)(false -> r_St_3_Open)
tel

node person(arrived : bool) returns (presence : bool)
var nr_St_4_Present : bool; ns_St_4_Present_1 : bool;
    presence_St_4_Present : bool; nr_St_4_Not_Present : bool;
    ns_St_4_Not_Present_1 : bool; presence_St_4_Not_Present : bool;
    ck_5_1 : bool; r_St_4_Present : bool; s_St_4_Present_1 : bool;
    r_St_4_Not_Present : bool; s_St_4_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  presence_St_4_Not_Present = false;
  nr_St_4_Not_Present = false;
  ns_St_4_Not_Present_1 = true;
  presence_St_4_Present = true;
  nr_St_4_Present = false;
  ns_St_4_Present_1 = false;
  presence =
    merge ck_5_1
      (true -> presence_St_4_Not_Present)(false -> presence_St_4_Present);
  ns_1 =
    merge ck_5_1 (true -> ns_St_4_Not_Present_1)(false -> ns_St_4_Present_1);
  nr = merge ck_5_1 (true -> nr_St_4_Not_Present)(false -> nr_St_4_Present);
  ck_1 = true fby ns_1;
  r_St_4_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_4_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_4_Present =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_4_Present_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_4_Not_Present_1)(false -> s_St_4_Present_1);
  r = merge ck_1 (true -> r_St_4_Not_Present)(false -> r_St_4_Present)
tel

node computer(c : bool) returns (computer_on : bool)
var nr_St_5_On : bool; ns_St_5_On_1 : bool; computer_on_St_5_On : bool;
    nr_St_5_Off : bool; ns_St_5_Off_1 : bool; computer_on_St_5_Off : bool;
    ck_6_1 : bool; v_12 : bool; v : bool; r_St_5_On : bool;
    s_St_5_On_1 : bool; r_St_5_Off : bool; s_St_5_Off_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  computer_on_St_5_Off = false;
  nr_St_5_Off = false;
  ns_St_5_Off_1 = true;
  computer_on_St_5_On = true;
  nr_St_5_On = false;
  ns_St_5_On_1 = false;
  computer_on =
    merge ck_6_1 (true -> computer_on_St_5_Off)(false -> computer_on_St_5_On);
  ns_1 = merge ck_6_1 (true -> ns_St_5_Off_1)(false -> ns_St_5_On_1);
  nr = merge ck_6_1 (true -> nr_St_5_Off)(false -> nr_St_5_On);
  ck_1 = true fby ns_1;
  r_St_5_Off = if v_12 then true else (pnr when true(ck_1));
  s_St_5_Off_1 = if v_12 then false else true;
  v_12 = not((c when true(ck_1)));
  r_St_5_On = if v then true else (pnr when false(ck_1));
  s_St_5_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_5_Off_1)(false -> s_St_5_On_1);
  r = merge ck_1 (true -> r_St_5_Off)(false -> r_St_5_On)
tel

node window(c : bool) returns (window_open : bool)
var nr_St_6_Open : bool; ns_St_6_Open_1 : bool; window_open_St_6_Open : bool;
    nr_St_6_Closed : bool; ns_St_6_Closed_1 : bool;
    window_open_St_6_Closed : bool; ck_7_1 : bool; v : bool;
    r_St_6_Open : bool; s_St_6_Open_1 : bool; r_St_6_Closed : bool;
    s_St_6_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  window_open_St_6_Closed = false;
  nr_St_6_Closed = false;
  ns_St_6_Closed_1 = true;
  window_open_St_6_Open = true;
  nr_St_6_Open = false;
  ns_St_6_Open_1 = false;
  window_open =
    merge ck_7_1
      (true -> window_open_St_6_Closed)(false -> window_open_St_6_Open);
  ns_1 = merge ck_7_1 (true -> ns_St_6_Closed_1)(false -> ns_St_6_Open_1);
  nr = merge ck_7_1 (true -> nr_St_6_Closed)(false -> nr_St_6_Open);
  ck_1 = true fby ns_1;
  r_St_6_Closed = if v then true else (pnr when true(ck_1));
  s_St_6_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_6_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_6_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_6_Closed_1)(false -> s_St_6_Open_1);
  r = merge ck_1 (true -> r_St_6_Closed)(false -> r_St_6_Open)
tel

node air_conditioner(c1 : bool; c2 : bool) returns (air_state : int)
var v_187 : bool; v_186 : bool; v_185 : bool; v_184 : bool; v_183 : bool;
    v_182 : bool; v_181 : int; v_180 : int; ns_St_7_Max_2_0 : bool;
    ns_St_7_Max_2_1 : bool; ns_St_7_Min_2_0 : bool; ns_St_7_Min_2_1 : bool;
    ns_St_7_Off_2_0 : bool; ns_St_7_Off_2_1 : bool; ck_8_2_0 : bool;
    ck_8_2_1 : bool; nr_St_7_Max : bool; ns_St_7_Max_2 : bool;
    ns_St_7_Max_1 : bool; air_state_St_7_Max : int; nr_St_7_Min : bool;
    ns_St_7_Min_2 : bool; ns_St_7_Min_1 : bool; air_state_St_7_Min : int;
    nr_St_7_Off : bool; ns_St_7_Off_2 : bool; ns_St_7_Off_1 : bool;
    air_state_St_7_Off : int; ck_8_2 : bool; ck_8_1 : bool; v_22_2_0 : bool;
    v_22_2_1 : bool; v_23 : bool; v_22_2 : bool; v_22_1 : bool; v_21 : bool;
    v_20 : bool; v_18_2_0 : bool; v_18_2_1 : bool; v_19 : bool;
    v_18_2 : bool; v_18_1 : bool; v_17 : bool; v_16 : bool; v_14_2_0 : bool;
    v_14_2_1 : bool; v_15 : bool; v_14_2 : bool; v_14_1 : bool; v_13 : bool;
    v : bool; v_195 : bool; v_194 : bool; v_193 : bool; v_192 : bool;
    v_191 : bool; v_190 : bool; v_189 : bool; v_188 : bool;
    s_St_7_Max_2_0 : bool; s_St_7_Max_2_1 : bool; s_St_7_Min_2_0 : bool;
    s_St_7_Min_2_1 : bool; s_St_7_Off_2_0 : bool; s_St_7_Off_2_1 : bool;
    ck_2_0 : bool; ck_2_1 : bool; r_St_7_Max : bool; s_St_7_Max_2 : bool;
    s_St_7_Max_1 : bool; r_St_7_Min : bool; s_St_7_Min_2 : bool;
    s_St_7_Min_1 : bool; r_St_7_Off : bool; s_St_7_Off_2 : bool;
    s_St_7_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  ck_8_2 = s_2;
  air_state_St_7_Off = 0;
  nr_St_7_Off = false;
  ns_St_7_Off_1 = false;
  ns_St_7_Off_2 = false;
  air_state_St_7_Min = 1;
  nr_St_7_Min = false;
  ns_St_7_Min_1 = true;
  ns_St_7_Min_2 = false;
  air_state_St_7_Max = 2;
  nr_St_7_Max = false;
  ns_St_7_Max_1 = true;
  ns_St_7_Max_2 = true;
  v_180 =
    merge ck_8_2_1 (true -> air_state_St_7_Max)(false -> air_state_St_7_Min);
  v_181 =
    merge ck_8_2_0
      (true -> ((0 when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> air_state_St_7_Off);
  air_state = merge ck_8_1 (true -> v_180)(false -> v_181);
  v_182 = merge ck_8_2_1 (true -> ns_St_7_Max_1)(false -> ns_St_7_Min_1);
  v_183 = merge ck_8_2_1 (true -> ns_St_7_Max_2)(false -> ns_St_7_Min_2);
  v_184 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_7_Off_1);
  v_185 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_7_Off_2);
  ns_1 = merge ck_8_1 (true -> v_182)(false -> v_184);
  ns_2 = merge ck_8_1 (true -> v_183)(false -> v_185);
  v_186 = merge ck_8_2_1 (true -> nr_St_7_Max)(false -> nr_St_7_Min);
  v_187 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> nr_St_7_Off);
  nr = merge ck_8_1 (true -> v_186)(false -> v_187);
  ck_8_2_1 = (ck_8_2 when true(ck_8_1));
  ck_8_2_0 = (ck_8_2 when false(ck_8_1));
  ns_St_7_Off_2_1 = (ns_St_7_Off_2 when true(ns_St_7_Off_1));
  ns_St_7_Off_2_0 = (ns_St_7_Off_2 when false(ns_St_7_Off_1));
  ns_St_7_Min_2_1 = (ns_St_7_Min_2 when true(ns_St_7_Min_1));
  ns_St_7_Min_2_0 = (ns_St_7_Min_2 when false(ns_St_7_Min_1));
  ns_St_7_Max_2_1 = (ns_St_7_Max_2 when true(ns_St_7_Max_1));
  ns_St_7_Max_2_0 = (ns_St_7_Max_2 when false(ns_St_7_Max_1));
  v_188 = false fby ns_1;
  v_189 = false fby ns_2;
  ck_1 = v_188;
  ck_2 = v_189;
  r_St_7_Off = if v_20 then true else v_23;
  s_St_7_Off_1 = if v_20 then true else v_22_1;
  s_St_7_Off_2 = if v_20 then false else v_22_2;
  v_23 = if v_21 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_22_1 = if v_21 then true else false;
  v_22_2 = if v_21 then true else false;
  v_21 = not(((c2 when false(ck_1)) when false(ck_2_0)));
  v_20 = not(((c1 when false(ck_1)) when false(ck_2_0)));
  v_22_2_1 = (v_22_2 when true(v_22_1));
  v_22_2_0 = (v_22_2 when false(v_22_1));
  r_St_7_Min = if v_16 then true else v_19;
  s_St_7_Min_1 = if v_16 then false else v_18_1;
  s_St_7_Min_2 = if v_16 then false else v_18_2;
  v_19 = if v_17 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_18_1 = if v_17 then true else true;
  v_18_2 = if v_17 then true else false;
  v_17 = not(((c2 when true(ck_1)) when false(ck_2_1)));
  v_16 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_18_2_1 = (v_18_2 when true(v_18_1));
  v_18_2_0 = (v_18_2 when false(v_18_1));
  r_St_7_Max = if v then true else v_15;
  s_St_7_Max_1 = if v then true else v_14_1;
  s_St_7_Max_2 = if v then false else v_14_2;
  v_15 = if v_13 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_14_1 = if v_13 then false else true;
  v_14_2 = if v_13 then false else true;
  v_13 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_14_2_1 = (v_14_2 when true(v_14_1));
  v_14_2_0 = (v_14_2 when false(v_14_1));
  v_190 = merge ck_2_1 (true -> s_St_7_Max_1)(false -> s_St_7_Min_1);
  v_191 = merge ck_2_1 (true -> s_St_7_Max_2)(false -> s_St_7_Min_2);
  v_192 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_7_Off_1);
  v_193 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_7_Off_2);
  s_1 = merge ck_1 (true -> v_190)(false -> v_192);
  s_2 = merge ck_1 (true -> v_191)(false -> v_193);
  v_194 = merge ck_2_1 (true -> r_St_7_Max)(false -> r_St_7_Min);
  v_195 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_7_Off);
  r = merge ck_1 (true -> v_194)(false -> v_195);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_7_Off_2_1 = (s_St_7_Off_2 when true(s_St_7_Off_1));
  s_St_7_Off_2_0 = (s_St_7_Off_2 when false(s_St_7_Off_1));
  s_St_7_Min_2_1 = (s_St_7_Min_2 when true(s_St_7_Min_1));
  s_St_7_Min_2_0 = (s_St_7_Min_2 when false(s_St_7_Min_1));
  s_St_7_Max_2_1 = (s_St_7_Max_2 when true(s_St_7_Max_1));
  s_St_7_Max_2_0 = (s_St_7_Max_2 when false(s_St_7_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node day_shift(change : bool) returns (night : bool)
var nr_St_8_Noite : bool; ns_St_8_Noite_1 : bool; night_St_8_Noite : bool;
    nr_St_8_Dia : bool; ns_St_8_Dia_1 : bool; night_St_8_Dia : bool;
    ck_9_1 : bool; r_St_8_Noite : bool; s_St_8_Noite_1 : bool;
    r_St_8_Dia : bool; s_St_8_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_9_1 = s_1;
  night_St_8_Dia = false;
  nr_St_8_Dia = false;
  ns_St_8_Dia_1 = true;
  night_St_8_Noite = true;
  nr_St_8_Noite = false;
  ns_St_8_Noite_1 = false;
  night = merge ck_9_1 (true -> night_St_8_Dia)(false -> night_St_8_Noite);
  ns_1 = merge ck_9_1 (true -> ns_St_8_Dia_1)(false -> ns_St_8_Noite_1);
  nr = merge ck_9_1 (true -> nr_St_8_Dia)(false -> nr_St_8_Noite);
  ck_1 = true fby ns_1;
  r_St_8_Dia =
    if (change when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_8_Dia_1 = if (change when true(ck_1)) then false else true;
  r_St_8_Noite =
    if (change when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_8_Noite_1 = if (change when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_8_Dia_1)(false -> s_St_8_Noite_1);
  r = merge ck_1 (true -> r_St_8_Dia)(false -> r_St_8_Noite)
tel

node fail(failed_recovered : bool) returns (failed : bool)
var nr_St_9_Falha : bool; ns_St_9_Falha_1 : bool; failed_St_9_Falha : bool;
    nr_St_9_Funcionando : bool; ns_St_9_Funcionando_1 : bool;
    failed_St_9_Funcionando : bool; ck_10_1 : bool; r_St_9_Falha : bool;
    s_St_9_Falha_1 : bool; r_St_9_Funcionando : bool;
    s_St_9_Funcionando_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool;
    r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_10_1 = s_1;
  failed_St_9_Funcionando = false;
  nr_St_9_Funcionando = false;
  ns_St_9_Funcionando_1 = false;
  failed_St_9_Falha = true;
  nr_St_9_Falha = false;
  ns_St_9_Falha_1 = true;
  failed =
    merge ck_10_1
      (true -> failed_St_9_Falha)(false -> failed_St_9_Funcionando);
  ns_1 =
    merge ck_10_1 (true -> ns_St_9_Falha_1)(false -> ns_St_9_Funcionando_1);
  nr = merge ck_10_1 (true -> nr_St_9_Falha)(false -> nr_St_9_Funcionando);
  ck_1 = false fby ns_1;
  r_St_9_Funcionando =
    if (failed_recovered when false(ck_1))
    then true
    else (pnr when false(ck_1));
  s_St_9_Funcionando_1 =
    if (failed_recovered when false(ck_1)) then true else false;
  r_St_9_Falha =
    if (failed_recovered when true(ck_1))
    then true
    else (pnr when true(ck_1));
  s_St_9_Falha_1 = if (failed_recovered when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_9_Falha_1)(false -> s_St_9_Funcionando_1);
  r = merge ck_1 (true -> r_St_9_Falha)(false -> r_St_9_Funcionando)
tel

node air_fail(c1 : bool; c2 : bool; failed_recovered : bool)
returns (air_state : int; failed : bool)
var nr_St_10_Falha : bool; ns_St_10_Falha_1 : bool;
    failed_1_St_10_Falha : bool; nr_St_10_Funcionando : bool;
    ns_St_10_Funcionando_1 : bool; failed_1_St_10_Funcionando : bool;
    ck_13_1 : bool; r_St_10_Falha : bool; s_St_10_Falha_1 : bool;
    r_St_10_Funcionando : bool; s_St_10_Funcionando_1 : bool; ck_12_1 : bool;
    v_203 : bool; v_202 : bool; v_201 : bool; v_200 : bool; v_199 : bool;
    v_198 : bool; v_197 : int; v_196 : int; ns_1_St_11_Max_2_0 : bool;
    ns_1_St_11_Max_2_1 : bool; ns_1_St_11_Min_2_0 : bool;
    ns_1_St_11_Min_2_1 : bool; ns_1_St_11_Off_2_0 : bool;
    ns_1_St_11_Off_2_1 : bool; ck_11_2_0 : bool; ck_11_2_1 : bool;
    nr_1_St_11_Max : bool; ns_1_St_11_Max_2 : bool; ns_1_St_11_Max_1 : bool;
    air_state_1_St_11_Max : int; nr_1_St_11_Min : bool;
    ns_1_St_11_Min_2 : bool; ns_1_St_11_Min_1 : bool;
    air_state_1_St_11_Min : int; nr_1_St_11_Off : bool;
    ns_1_St_11_Off_2 : bool; ns_1_St_11_Off_1 : bool;
    air_state_1_St_11_Off : int; ck_11_2 : bool; ck_11_1 : bool;
    v_33_2_0 : bool; v_33_2_1 : bool; v_34 : bool; v_33_2 : bool;
    v_33_1 : bool; v_32 : bool; v_31 : bool; v_29_2_0 : bool;
    v_29_2_1 : bool; v_30 : bool; v_29_2 : bool; v_29_1 : bool; v_28 : bool;
    v_27 : bool; v_25_2_0 : bool; v_25_2_1 : bool; v_26 : bool;
    v_25_2 : bool; v_25_1 : bool; v_24 : bool; v : bool; v_211 : bool;
    v_210 : bool; v_209 : bool; v_208 : bool; v_207 : bool; v_206 : bool;
    v_205 : bool; v_204 : bool; s_1_St_11_Max_2_0 : bool;
    s_1_St_11_Max_2_1 : bool; s_1_St_11_Min_2_0 : bool;
    s_1_St_11_Min_2_1 : bool; s_1_St_11_Off_2_0 : bool;
    s_1_St_11_Off_2_1 : bool; ck_2_0 : bool; ck_2_1 : bool;
    r_1_St_11_Max : bool; s_1_St_11_Max_2 : bool; s_1_St_11_Max_1 : bool;
    r_1_St_11_Min : bool; s_1_St_11_Min_2 : bool; s_1_St_11_Min_1 : bool;
    r_1_St_11_Off : bool; s_1_St_11_Off_2 : bool; s_1_St_11_Off_1 : bool;
    ck_2 : bool; ck_1 : bool; s_1_2_0 : bool; s_1_2_1 : bool;
    ns_1_2_0 : bool; ns_1_2_1 : bool; s_1_2 : bool; s_1_1 : bool;
    ns_1_2 : bool; ns_1_1 : bool; r_1 : bool; nr_1 : bool; pnr_1 : bool;
    s_1_3 : bool; ns_1_3 : bool; r : bool; nr : bool; pnr : bool;
    failed_recovered_1 : bool; failed_1 : bool; c1_1 : bool; c2_1 : bool;
    air_state_1 : int;
let
  failed_recovered_1 = failed_recovered;
  pnr = false fby nr;
  ck_13_1 = s_1_3;
  failed_1_St_10_Funcionando = false;
  nr_St_10_Funcionando = false;
  ns_St_10_Funcionando_1 = false;
  failed_1_St_10_Falha = true;
  nr_St_10_Falha = false;
  ns_St_10_Falha_1 = true;
  failed_1 =
    merge ck_13_1
      (true -> failed_1_St_10_Falha)(false -> failed_1_St_10_Funcionando);
  ns_1_3 =
    merge ck_13_1 (true -> ns_St_10_Falha_1)(false -> ns_St_10_Funcionando_1);
  nr = merge ck_13_1 (true -> nr_St_10_Falha)(false -> nr_St_10_Funcionando);
  ck_12_1 = false fby ns_1_3;
  r_St_10_Funcionando =
    if (failed_recovered_1 when false(ck_12_1))
    then true
    else (pnr when false(ck_12_1));
  s_St_10_Funcionando_1 =
    if (failed_recovered_1 when false(ck_12_1)) then true else false;
  r_St_10_Falha =
    if (failed_recovered_1 when true(ck_12_1))
    then true
    else (pnr when true(ck_12_1));
  s_St_10_Falha_1 =
    if (failed_recovered_1 when true(ck_12_1)) then false else true;
  s_1_3 =
    merge ck_12_1 (true -> s_St_10_Falha_1)(false -> s_St_10_Funcionando_1);
  r = merge ck_12_1 (true -> r_St_10_Falha)(false -> r_St_10_Funcionando);
  c1_1 = c1;
  c2_1 = c2;
  pnr_1 = false fby nr_1;
  ck_11_1 = s_1_1;
  ck_11_2 = s_1_2;
  air_state_1_St_11_Off = 0;
  nr_1_St_11_Off = false;
  ns_1_St_11_Off_1 = false;
  ns_1_St_11_Off_2 = false;
  air_state_1_St_11_Min = 1;
  nr_1_St_11_Min = false;
  ns_1_St_11_Min_1 = true;
  ns_1_St_11_Min_2 = false;
  air_state_1_St_11_Max = 2;
  nr_1_St_11_Max = false;
  ns_1_St_11_Max_1 = true;
  ns_1_St_11_Max_2 = true;
  v_196 =
    merge ck_11_2_1
      (true -> air_state_1_St_11_Max)(false -> air_state_1_St_11_Min);
  v_197 =
    merge ck_11_2_0
      (true -> ((0 when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> air_state_1_St_11_Off);
  air_state_1 = merge ck_11_1 (true -> v_196)(false -> v_197);
  v_198 =
    merge ck_11_2_1 (true -> ns_1_St_11_Max_1)(false -> ns_1_St_11_Min_1);
  v_199 =
    merge ck_11_2_1 (true -> ns_1_St_11_Max_2)(false -> ns_1_St_11_Min_2);
  v_200 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> ns_1_St_11_Off_1);
  v_201 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> ns_1_St_11_Off_2);
  ns_1_1 = merge ck_11_1 (true -> v_198)(false -> v_200);
  ns_1_2 = merge ck_11_1 (true -> v_199)(false -> v_201);
  v_202 = merge ck_11_2_1 (true -> nr_1_St_11_Max)(false -> nr_1_St_11_Min);
  v_203 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> nr_1_St_11_Off);
  nr_1 = merge ck_11_1 (true -> v_202)(false -> v_203);
  ck_11_2_1 = (ck_11_2 when true(ck_11_1));
  ck_11_2_0 = (ck_11_2 when false(ck_11_1));
  ns_1_St_11_Off_2_1 = (ns_1_St_11_Off_2 when true(ns_1_St_11_Off_1));
  ns_1_St_11_Off_2_0 = (ns_1_St_11_Off_2 when false(ns_1_St_11_Off_1));
  ns_1_St_11_Min_2_1 = (ns_1_St_11_Min_2 when true(ns_1_St_11_Min_1));
  ns_1_St_11_Min_2_0 = (ns_1_St_11_Min_2 when false(ns_1_St_11_Min_1));
  ns_1_St_11_Max_2_1 = (ns_1_St_11_Max_2 when true(ns_1_St_11_Max_1));
  ns_1_St_11_Max_2_0 = (ns_1_St_11_Max_2 when false(ns_1_St_11_Max_1));
  v_204 = false fby ns_1_1;
  v_205 = false fby ns_1_2;
  ck_1 = v_204;
  ck_2 = v_205;
  r_1_St_11_Off = if v_31 then true else v_34;
  s_1_St_11_Off_1 = if v_31 then true else v_33_1;
  s_1_St_11_Off_2 = if v_31 then false else v_33_2;
  v_34 = if v_32 then true else ((pnr_1 when false(ck_1)) when false(ck_2_0));
  v_33_1 = if v_32 then true else false;
  v_33_2 = if v_32 then true else false;
  v_32 = not(((c2_1 when false(ck_1)) when false(ck_2_0)));
  v_31 = not(((c1_1 when false(ck_1)) when false(ck_2_0)));
  v_33_2_1 = (v_33_2 when true(v_33_1));
  v_33_2_0 = (v_33_2 when false(v_33_1));
  r_1_St_11_Min = if v_27 then true else v_30;
  s_1_St_11_Min_1 = if v_27 then false else v_29_1;
  s_1_St_11_Min_2 = if v_27 then false else v_29_2;
  v_30 = if v_28 then true else ((pnr_1 when true(ck_1)) when false(ck_2_1));
  v_29_1 = if v_28 then true else true;
  v_29_2 = if v_28 then true else false;
  v_28 = not(((c2_1 when true(ck_1)) when false(ck_2_1)));
  v_27 = not(((c1_1 when true(ck_1)) when false(ck_2_1)));
  v_29_2_1 = (v_29_2 when true(v_29_1));
  v_29_2_0 = (v_29_2 when false(v_29_1));
  r_1_St_11_Max = if v then true else v_26;
  s_1_St_11_Max_1 = if v then true else v_25_1;
  s_1_St_11_Max_2 = if v then false else v_25_2;
  v_26 = if v_24 then true else ((pnr_1 when true(ck_1)) when true(ck_2_1));
  v_25_1 = if v_24 then false else true;
  v_25_2 = if v_24 then false else true;
  v_24 = not(((c2_1 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1_1 when true(ck_1)) when true(ck_2_1)));
  v_25_2_1 = (v_25_2 when true(v_25_1));
  v_25_2_0 = (v_25_2 when false(v_25_1));
  v_206 = merge ck_2_1 (true -> s_1_St_11_Max_1)(false -> s_1_St_11_Min_1);
  v_207 = merge ck_2_1 (true -> s_1_St_11_Max_2)(false -> s_1_St_11_Min_2);
  v_208 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_1_St_11_Off_1);
  v_209 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_1_St_11_Off_2);
  s_1_1 = merge ck_1 (true -> v_206)(false -> v_208);
  s_1_2 = merge ck_1 (true -> v_207)(false -> v_209);
  v_210 = merge ck_2_1 (true -> r_1_St_11_Max)(false -> r_1_St_11_Min);
  v_211 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_1_St_11_Off);
  r_1 = merge ck_1 (true -> v_210)(false -> v_211);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_1_St_11_Off_2_1 = (s_1_St_11_Off_2 when true(s_1_St_11_Off_1));
  s_1_St_11_Off_2_0 = (s_1_St_11_Off_2 when false(s_1_St_11_Off_1));
  s_1_St_11_Min_2_1 = (s_1_St_11_Min_2 when true(s_1_St_11_Min_1));
  s_1_St_11_Min_2_0 = (s_1_St_11_Min_2 when false(s_1_St_11_Min_1));
  s_1_St_11_Max_2_1 = (s_1_St_11_Max_2 when true(s_1_St_11_Max_1));
  s_1_St_11_Max_2_0 = (s_1_St_11_Max_2 when false(s_1_St_11_Max_1));
  air_state = air_state_1;
  failed = failed_1;
  ns_1_2_1 = (ns_1_2 when true(ns_1_1));
  ns_1_2_0 = (ns_1_2 when false(ns_1_1));
  s_1_2_1 = (s_1_2 when true(s_1_1));
  s_1_2_0 = (s_1_2 when false(s_1_1))
tel

node lamp_fail(sw : bool; c1 : bool; c2 : bool; failed_recovered : bool)
returns (lamp : bool; failed : bool)
var nr_St_12_Falha : bool; ns_St_12_Falha_1 : bool;
    failed_2_St_12_Falha : bool; nr_St_12_Funcionando : bool;
    ns_St_12_Funcionando_1 : bool; failed_2_St_12_Funcionando : bool;
    ck_16_1 : bool; r_St_12_Falha : bool; s_St_12_Falha_1 : bool;
    r_St_12_Funcionando : bool; s_St_12_Funcionando_1 : bool; ck_15_1 : bool;
    nr_2_St_13_On : bool; ns_2_St_13_On_1 : bool; lamp_on_St_13_On : bool;
    nr_2_St_13_Off : bool; ns_2_St_13_Off_1 : bool; lamp_on_St_13_Off : bool;
    ck_14_1 : bool; v_39 : bool; v_38 : bool; v_37 : bool; v_36 : bool;
    v_35 : bool; v : bool; r_2_St_13_On : bool; s_2_St_13_On_1 : bool;
    r_2_St_13_Off : bool; s_2_St_13_Off_1 : bool; ck_1 : bool; s_2_1 : bool;
    ns_2_1 : bool; r_2 : bool; nr_2 : bool; pnr_2 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool; failed_recovered_2 : bool;
    failed_2 : bool; c1_2 : bool; c2_2 : bool; sw_1 : bool; lamp_on : bool;
let
  failed_recovered_2 = failed_recovered;
  pnr = false fby nr;
  ck_16_1 = s_1;
  failed_2_St_12_Funcionando = false;
  nr_St_12_Funcionando = false;
  ns_St_12_Funcionando_1 = false;
  failed_2_St_12_Falha = true;
  nr_St_12_Falha = false;
  ns_St_12_Falha_1 = true;
  failed_2 =
    merge ck_16_1
      (true -> failed_2_St_12_Falha)(false -> failed_2_St_12_Funcionando);
  ns_1 =
    merge ck_16_1 (true -> ns_St_12_Falha_1)(false -> ns_St_12_Funcionando_1);
  nr = merge ck_16_1 (true -> nr_St_12_Falha)(false -> nr_St_12_Funcionando);
  ck_15_1 = false fby ns_1;
  r_St_12_Funcionando =
    if (failed_recovered_2 when false(ck_15_1))
    then true
    else (pnr when false(ck_15_1));
  s_St_12_Funcionando_1 =
    if (failed_recovered_2 when false(ck_15_1)) then true else false;
  r_St_12_Falha =
    if (failed_recovered_2 when true(ck_15_1))
    then true
    else (pnr when true(ck_15_1));
  s_St_12_Falha_1 =
    if (failed_recovered_2 when true(ck_15_1)) then false else true;
  s_1 =
    merge ck_15_1 (true -> s_St_12_Falha_1)(false -> s_St_12_Funcionando_1);
  r = merge ck_15_1 (true -> r_St_12_Falha)(false -> r_St_12_Funcionando);
  c1_2 = sw;
  c2_2 = c1;
  sw_1 = c2;
  pnr_2 = false fby nr_2;
  ck_14_1 = s_2_1;
  lamp_on_St_13_Off = false;
  nr_2_St_13_Off = false;
  ns_2_St_13_Off_1 = true;
  lamp_on_St_13_On = true;
  nr_2_St_13_On = false;
  ns_2_St_13_On_1 = false;
  lamp_on =
    merge ck_14_1 (true -> lamp_on_St_13_Off)(false -> lamp_on_St_13_On);
  ns_2_1 = merge ck_14_1 (true -> ns_2_St_13_Off_1)(false -> ns_2_St_13_On_1);
  nr_2 = merge ck_14_1 (true -> nr_2_St_13_Off)(false -> nr_2_St_13_On);
  ck_1 = true fby ns_2_1;
  r_2_St_13_Off = if v_39 then true else (pnr_2 when true(ck_1));
  s_2_St_13_Off_1 = if v_39 then false else true;
  v_39 = (v_37 or v_38);
  v_38 = not((c2_2 when true(ck_1)));
  v_37 = ((c1_2 when true(ck_1)) & (sw_1 when true(ck_1)));
  r_2_St_13_On = if v_36 then true else (pnr_2 when false(ck_1));
  s_2_St_13_On_1 = if v_36 then true else false;
  v_36 = (v or v_35);
  v_35 = not((c2_2 when false(ck_1)));
  v = ((c1_2 when false(ck_1)) & (sw_1 when false(ck_1)));
  s_2_1 = merge ck_1 (true -> s_2_St_13_Off_1)(false -> s_2_St_13_On_1);
  r_2 = merge ck_1 (true -> r_2_St_13_Off)(false -> r_2_St_13_On);
  lamp = lamp_on;
  failed = failed_2
tel

node blind_fail(sw : bool; c1 : bool; c2 : bool; failed_recovered : bool)
returns (blind : bool; failed : bool)
var nr_St_14_Falha : bool; ns_St_14_Falha_1 : bool;
    failed_3_St_14_Falha : bool; nr_St_14_Funcionando : bool;
    ns_St_14_Funcionando_1 : bool; failed_3_St_14_Funcionando : bool;
    ck_19_1 : bool; r_St_14_Falha : bool; s_St_14_Falha_1 : bool;
    r_St_14_Funcionando : bool; s_St_14_Funcionando_1 : bool; ck_18_1 : bool;
    nr_3_St_15_Up : bool; ns_3_St_15_Up_1 : bool; blind_open_St_15_Up : bool;
    nr_3_St_15_Down : bool; ns_3_St_15_Down_1 : bool;
    blind_open_St_15_Down : bool; ck_17_1 : bool; v_44 : bool; v_43 : bool;
    v_42 : bool; v_41 : bool; v_40 : bool; v : bool; r_3_St_15_Up : bool;
    s_3_St_15_Up_1 : bool; r_3_St_15_Down : bool; s_3_St_15_Down_1 : bool;
    ck_1 : bool; s_3_1 : bool; ns_3_1 : bool; r_3 : bool; nr_3 : bool;
    pnr_3 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
    failed_recovered_3 : bool; failed_3 : bool; c1_3 : bool; c2_3 : bool;
    sw_2 : bool; blind_open : bool;
let
  failed_recovered_3 = failed_recovered;
  pnr = false fby nr;
  ck_19_1 = s_1;
  failed_3_St_14_Funcionando = false;
  nr_St_14_Funcionando = false;
  ns_St_14_Funcionando_1 = false;
  failed_3_St_14_Falha = true;
  nr_St_14_Falha = false;
  ns_St_14_Falha_1 = true;
  failed_3 =
    merge ck_19_1
      (true -> failed_3_St_14_Falha)(false -> failed_3_St_14_Funcionando);
  ns_1 =
    merge ck_19_1 (true -> ns_St_14_Falha_1)(false -> ns_St_14_Funcionando_1);
  nr = merge ck_19_1 (true -> nr_St_14_Falha)(false -> nr_St_14_Funcionando);
  ck_18_1 = false fby ns_1;
  r_St_14_Funcionando =
    if (failed_recovered_3 when false(ck_18_1))
    then true
    else (pnr when false(ck_18_1));
  s_St_14_Funcionando_1 =
    if (failed_recovered_3 when false(ck_18_1)) then true else false;
  r_St_14_Falha =
    if (failed_recovered_3 when true(ck_18_1))
    then true
    else (pnr when true(ck_18_1));
  s_St_14_Falha_1 =
    if (failed_recovered_3 when true(ck_18_1)) then false else true;
  s_1 =
    merge ck_18_1 (true -> s_St_14_Falha_1)(false -> s_St_14_Funcionando_1);
  r = merge ck_18_1 (true -> r_St_14_Falha)(false -> r_St_14_Funcionando);
  c1_3 = sw;
  c2_3 = c1;
  sw_2 = c2;
  pnr_3 = false fby nr_3;
  ck_17_1 = s_3_1;
  blind_open_St_15_Down = false;
  nr_3_St_15_Down = false;
  ns_3_St_15_Down_1 = true;
  blind_open_St_15_Up = true;
  nr_3_St_15_Up = false;
  ns_3_St_15_Up_1 = false;
  blind_open =
    merge ck_17_1
      (true -> blind_open_St_15_Down)(false -> blind_open_St_15_Up);
  ns_3_1 =
    merge ck_17_1 (true -> ns_3_St_15_Down_1)(false -> ns_3_St_15_Up_1);
  nr_3 = merge ck_17_1 (true -> nr_3_St_15_Down)(false -> nr_3_St_15_Up);
  ck_1 = true fby ns_3_1;
  r_3_St_15_Down = if v_44 then true else (pnr_3 when true(ck_1));
  s_3_St_15_Down_1 = if v_44 then false else true;
  v_44 = (v_42 or v_43);
  v_43 = not((c2_3 when true(ck_1)));
  v_42 = ((c1_3 when true(ck_1)) & (sw_2 when true(ck_1)));
  r_3_St_15_Up = if v_41 then true else (pnr_3 when false(ck_1));
  s_3_St_15_Up_1 = if v_41 then true else false;
  v_41 = (v or v_40);
  v_40 = not((c2_3 when false(ck_1)));
  v = ((c1_3 when false(ck_1)) & (sw_2 when false(ck_1)));
  s_3_1 = merge ck_1 (true -> s_3_St_15_Down_1)(false -> s_3_St_15_Up_1);
  r_3 = merge ck_1 (true -> r_3_St_15_Down)(false -> r_3_St_15_Up);
  blind = blind_open;
  failed = failed_3
tel

node controller(change_shift : bool; worker : bool; cleaner : bool;
                 air_failed_recovered : bool; light_switch : bool;
                 light_failed_recovered : bool; blind_switch : bool;
                 blind_failed_recovered : bool)
returns (night : bool; door_open : bool; worker_presence : bool;
          cleaner_presence : bool; pc_on : bool; window_open : bool;
          closet_open : bool; air_failed : bool; light_on : bool;
          light_failed : bool; blind_up : bool; blind_failed : bool;
          air_state : int)
contract
  var rule7 : bool; rule6 : bool; rule5 : bool; rule4 : bool; rule2_5 : bool;
      rule2 : bool; rule1_5 : bool; rule1 : bool; v : bool; v_45 : bool;
      v_46 : bool; v_47 : bool; v_48 : bool; v_49 : bool; v_50 : bool;
      v_51 : bool; v_52 : bool; v_53 : bool; v_54 : bool; v_55 : bool;
      v_56 : bool; v_57 : bool; v_58 : bool; v_59 : bool; v_60 : bool;
      v_61 : bool; v_62 : bool; v_63 : bool; v_64 : bool; v_65 : bool;
      v_66 : bool; v_67 : bool; v_68 : bool; v_69 : bool; v_70 : bool;
      v_71 : bool; v_72 : bool; v_73 : bool; v_74 : bool; v_75 : bool;
      v_76 : bool; v_77 : bool; v_78 : bool; v_79 : bool; v_80 : bool;
      v_81 : bool; v_82 : bool; v_83 : bool; v_84 : bool; v_85 : bool;
      v_86 : bool; v_87 : bool; v_88 : bool; v_89 : bool; v_90 : bool;
      v_91 : bool; v_92 : bool; v_93 : bool; v_94 : bool; v_95 : bool;
      v_96 : bool; v_97 : bool; v_98 : bool; v_99 : bool; v_100 : bool;
      v_101 : bool; v_102 : bool; v_103 : bool; v_104 : bool; v_105 : bool;
      v_106 : bool; v_107 : bool; v_108 : bool; v_109 : bool; v_110 : bool;
      v_111 : bool; v_112 : bool; v_113 : bool; v_114 : bool; v_115 : bool;
      v_116 : bool; v_117 : bool; v_118 : bool; v_119 : bool; v_120 : bool;
      v_121 : bool; v_122 : bool; v_123 : bool; v_124 : bool; v_125 : bool;
      v_126 : bool; v_127 : bool; v_128 : bool; v_129 : bool; v_130 : bool;
      v_131 : bool; v_132 : bool; v_133 : bool; v_134 : bool; v_135 : bool;
      v_136 : bool; v_137 : bool; v_138 : bool; v_139 : bool; v_140 : bool;
      v_141 : bool; v_142 : bool; v_143 : bool; v_144 : bool; v_145 : bool;
      v_146 : bool; v_147 : bool; v_148 : bool; v_149 : bool;
  let
    v = not(air_failed);
    v_45 = (cleaner_presence & v);
    v_46 = not(v_45);
    v_47 = not(pc_on);
    v_48 = (v_47 & closet_open);
    v_49 = (air_state = 1);
    v_50 = (v_48 & v_49);
    rule7 = (v_46 or v_50);
    v_51 = (worker_presence or cleaner_presence);
    v_52 = (v_51 & night);
    v_53 = not(light_failed);
    v_54 = (v_52 & v_53);
    v_55 = (v_54 & air_failed);
    v_56 = not(v_55);
    v_57 = (light_on & blind_up);
    v_58 = (v_57 & window_open);
    v_59 = (v_58 & door_open);
    v_60 = (air_state = 0);
    v_61 = (v_59 & v_60);
    rule1_5 = (v_56 or v_61);
    v_62 = (worker_presence or cleaner_presence);
    v_63 = (v_62 & night);
    v_64 = not(light_failed);
    v_65 = (v_63 & v_64);
    v_66 = not(air_failed);
    v_67 = (v_65 & v_66);
    v_68 = not(v_67);
    v_69 = not(blind_up);
    v_70 = (light_on & v_69);
    v_71 = (air_state = 1);
    v_72 = (v_70 & v_71);
    rule1 = (v_68 or v_72);
    v_73 = (worker_presence or cleaner_presence);
    v_74 = (v_73 & night);
    v_75 = (v_74 & light_failed);
    v_76 = (v_75 & air_failed);
    v_77 = not(v_76);
    v_78 = not(light_on);
    v_79 = (v_78 & blind_up);
    v_80 = (v_79 & window_open);
    v_81 = (v_80 & door_open);
    v_82 = (air_state = 0);
    v_83 = (v_81 & v_82);
    rule2_5 = (v_77 or v_83);
    v_84 = (worker_presence or cleaner_presence);
    v_85 = (v_84 & night);
    v_86 = (v_85 & light_failed);
    v_87 = not(air_failed);
    v_88 = (v_86 & v_87);
    v_89 = not(v_88);
    v_90 = not(light_on);
    v_91 = (v_90 & blind_up);
    v_92 = (air_state = 1);
    v_93 = (v_91 & v_92);
    rule2 = (v_89 or v_93);
    v_94 = not(night);
    v_95 = (worker_presence & v_94);
    v_96 = (v_95 & pc_on);
    v_97 = (v_96 & light_on);
    v_98 = not(window_open);
    v_99 = (v_97 & v_98);
    v_100 = not(air_failed);
    v_101 = (v_99 & v_100);
    v_102 = not(v_101);
    v_103 = (air_state = 2);
    rule6 = (v_102 or v_103);
    v_104 = not(worker_presence);
    v_105 = not(cleaner_presence);
    v_106 = (v_104 & v_105);
    v_107 = not(night);
    v_108 = (v_106 & v_107);
    v_109 = not(air_failed);
    v_110 = (v_108 & v_109);
    v_111 = not(light_failed);
    v_112 = (v_110 & v_111);
    v_113 = not(blind_failed);
    v_114 = (v_112 & v_113);
    v_115 = not(v_114);
    v_116 = not(pc_on);
    v_117 = not(window_open);
    v_118 = (v_116 & v_117);
    v_119 = (air_state = 0);
    v_120 = (v_118 & v_119);
    v_121 = not(light_on);
    v_122 = (v_120 & v_121);
    v_123 = not(blind_up);
    v_124 = (v_122 & v_123);
    rule5 = (v_115 or v_124);
    v_125 = not(worker_presence);
    v_126 = not(cleaner_presence);
    v_127 = (v_125 & v_126);
    v_128 = (v_127 & night);
    v_129 = not(air_failed);
    v_130 = (v_128 & v_129);
    v_131 = not(light_failed);
    v_132 = (v_130 & v_131);
    v_133 = not(blind_failed);
    v_134 = (v_132 & v_133);
    v_135 = not(v_134);
    v_136 = not(pc_on);
    v_137 = not(window_open);
    v_138 = (v_136 & v_137);
    v_139 = (air_state = 0);
    v_140 = (v_138 & v_139);
    v_141 = not(light_on);
    v_142 = (v_140 & v_141);
    v_143 = not(blind_up);
    v_144 = (v_142 & v_143);
    rule4 = (v_135 or v_144);
    v_145 = (rule1 & rule1_5);
    v_146 = (v_145 & rule2);
    v_147 = (v_146 & rule2_5);
    v_148 = (v_147 & rule6);
    v_149 = (v_148 & rule7)
  tel
  assume true@ enforce v_149]
                 with (c_blind_2 : bool; c_blind_1 : bool; c_light_2 : bool;
                        c_light_1 : bool; c_closet : bool; c_air_2 : bool;
                        c_air_1 : bool; c_window : bool; c_pc : bool;
                        c_door : bool)
                 var nr_St_16_Falha : bool; ns_St_16_Falha_1 : bool;
                     failed_3_St_16_Falha : bool;
                     nr_St_16_Funcionando : bool;
                     ns_St_16_Funcionando_1 : bool;
                     failed_3_St_16_Funcionando : bool; ck_44_1 : bool;
                     r_St_16_Falha : bool; s_St_16_Falha_1 : bool;
                     r_St_16_Funcionando : bool;
                     s_St_16_Funcionando_1 : bool; ck_43_1 : bool;
                     nr_4_St_17_Up : bool; ns_4_St_17_Up_1 : bool;
                     blind_open_St_17_Up : bool; nr_4_St_17_Down : bool;
                     ns_4_St_17_Down_1 : bool; blind_open_St_17_Down : bool;
                     ck_42_1 : bool; v_179 : bool; v_178 : bool;
                     v_177 : bool; v_176 : bool; v_175 : bool; v_174 : bool;
                     r_4_St_17_Up : bool; s_4_St_17_Up_1 : bool;
                     r_4_St_17_Down : bool; s_4_St_17_Down_1 : bool;
                     ck_41_1 : bool; nr_5_St_18_Falha : bool;
                     ns_5_St_18_Falha_1 : bool; failed_2_St_18_Falha : bool;
                     nr_5_St_18_Funcionando : bool;
                     ns_5_St_18_Funcionando_1 : bool;
                     failed_2_St_18_Funcionando : bool; ck_40_1 : bool;
                     r_5_St_18_Falha : bool; s_5_St_18_Falha_1 : bool;
                     r_5_St_18_Funcionando : bool;
                     s_5_St_18_Funcionando_1 : bool; ck_39_1 : bool;
                     nr_6_St_19_On : bool; ns_6_St_19_On_1 : bool;
                     lamp_on_St_19_On : bool; nr_6_St_19_Off : bool;
                     ns_6_St_19_Off_1 : bool; lamp_on_St_19_Off : bool;
                     ck_38_1 : bool; v_173 : bool; v_172 : bool;
                     v_171 : bool; v_170 : bool; v_169 : bool; v_168 : bool;
                     r_6_St_19_On : bool; s_6_St_19_On_1 : bool;
                     r_6_St_19_Off : bool; s_6_St_19_Off_1 : bool;
                     ck_37_1 : bool; nr_7_St_20_Falha : bool;
                     ns_7_St_20_Falha_1 : bool; failed_1_St_20_Falha : bool;
                     nr_7_St_20_Funcionando : bool;
                     ns_7_St_20_Funcionando_1 : bool;
                     failed_1_St_20_Funcionando : bool; ck_36_1 : bool;
                     r_7_St_20_Falha : bool; s_7_St_20_Falha_1 : bool;
                     r_7_St_20_Funcionando : bool;
                     s_7_St_20_Funcionando_1 : bool; ck_35_1 : bool;
                     v_219 : bool; v_218 : bool; v_217 : bool; v_216 : bool;
                     v_215 : bool; v_214 : bool; v_213 : int; v_212 : int;
                     ns_8_St_21_Max_2_0 : bool; ns_8_St_21_Max_2_1 : bool;
                     ns_8_St_21_Min_2_0 : bool; ns_8_St_21_Min_2_1 : bool;
                     ns_8_St_21_Off_2_0 : bool; ns_8_St_21_Off_2_1 : bool;
                     ck_34_2_0 : bool; ck_34_2_1 : bool;
                     nr_8_St_21_Max : bool; ns_8_St_21_Max_2 : bool;
                     ns_8_St_21_Max_1 : bool; air_state_1_St_21_Max : int;
                     nr_8_St_21_Min : bool; ns_8_St_21_Min_2 : bool;
                     ns_8_St_21_Min_1 : bool; air_state_1_St_21_Min : int;
                     nr_8_St_21_Off : bool; ns_8_St_21_Off_2 : bool;
                     ns_8_St_21_Off_1 : bool; air_state_1_St_21_Off : int;
                     ck_34_2 : bool; ck_34_1 : bool; v_166_2_0 : bool;
                     v_166_2_1 : bool; v_167 : bool; v_166_2 : bool;
                     v_166_1 : bool; v_165 : bool; v_164 : bool;
                     v_162_2_0 : bool; v_162_2_1 : bool; v_163 : bool;
                     v_162_2 : bool; v_162_1 : bool; v_161 : bool;
                     v_160 : bool; v_158_2_0 : bool; v_158_2_1 : bool;
                     v_159 : bool; v_158_2 : bool; v_158_1 : bool;
                     v_157 : bool; v_156 : bool; v_227 : bool; v_226 : bool;
                     v_225 : bool; v_224 : bool; v_223 : bool; v_222 : bool;
                     v_221 : bool; v_220 : bool; s_8_St_21_Max_2_0 : bool;
                     s_8_St_21_Max_2_1 : bool; s_8_St_21_Min_2_0 : bool;
                     s_8_St_21_Min_2_1 : bool; s_8_St_21_Off_2_0 : bool;
                     s_8_St_21_Off_2_1 : bool; ck_33_2_0 : bool;
                     ck_33_2_1 : bool; r_8_St_21_Max : bool;
                     s_8_St_21_Max_2 : bool; s_8_St_21_Max_1 : bool;
                     r_8_St_21_Min : bool; s_8_St_21_Min_2 : bool;
                     s_8_St_21_Min_1 : bool; r_8_St_21_Off : bool;
                     s_8_St_21_Off_2 : bool; s_8_St_21_Off_1 : bool;
                     ck_33_2 : bool; ck_33_1 : bool; nr_9_St_22_Open : bool;
                     ns_9_St_22_Open_1 : bool;
                     window_open_1_St_22_Open : bool;
                     nr_9_St_22_Closed : bool; ns_9_St_22_Closed_1 : bool;
                     window_open_1_St_22_Closed : bool; ck_32_1 : bool;
                     v_155 : bool; r_9_St_22_Open : bool;
                     s_9_St_22_Open_1 : bool; r_9_St_22_Closed : bool;
                     s_9_St_22_Closed_1 : bool; ck_31_1 : bool;
                     nr_10_St_23_On : bool; ns_10_St_23_On_1 : bool;
                     computer_on_St_23_On : bool; nr_10_St_23_Off : bool;
                     ns_10_St_23_Off_1 : bool; computer_on_St_23_Off : bool;
                     ck_30_1 : bool; v_154 : bool; v_153 : bool;
                     r_10_St_23_On : bool; s_10_St_23_On_1 : bool;
                     r_10_St_23_Off : bool; s_10_St_23_Off_1 : bool;
                     ck_29_1 : bool; nr_11_St_24_Present : bool;
                     ns_11_St_24_Present_1 : bool;
                     presence_1_St_24_Present : bool;
                     nr_11_St_24_Not_Present : bool;
                     ns_11_St_24_Not_Present_1 : bool;
                     presence_1_St_24_Not_Present : bool; ck_28_1 : bool;
                     r_11_St_24_Present : bool; s_11_St_24_Present_1 : bool;
                     r_11_St_24_Not_Present : bool;
                     s_11_St_24_Not_Present_1 : bool; ck_27_1 : bool;
                     nr_12_St_25_Present : bool;
                     ns_12_St_25_Present_1 : bool;
                     presence_St_25_Present : bool;
                     nr_12_St_25_Not_Present : bool;
                     ns_12_St_25_Not_Present_1 : bool;
                     presence_St_25_Not_Present : bool; ck_26_1 : bool;
                     r_12_St_25_Present : bool; s_12_St_25_Present_1 : bool;
                     r_12_St_25_Not_Present : bool;
                     s_12_St_25_Not_Present_1 : bool; ck_25_1 : bool;
                     nr_13_St_26_Open : bool; ns_13_St_26_Open_1 : bool;
                     closet_open_1_St_26_Open : bool;
                     nr_13_St_26_Locked : bool; ns_13_St_26_Locked_1 : bool;
                     closet_open_1_St_26_Locked : bool; ck_24_1 : bool;
                     v_152 : bool; r_13_St_26_Open : bool;
                     s_13_St_26_Open_1 : bool; r_13_St_26_Locked : bool;
                     s_13_St_26_Locked_1 : bool; ck_23_1 : bool;
                     nr_14_St_27_Open : bool; ns_14_St_27_Open_1 : bool;
                     door_open_1_St_27_Open : bool;
                     nr_14_St_27_Closed : bool; ns_14_St_27_Closed_1 : bool;
                     door_open_1_St_27_Closed : bool; ck_22_1 : bool;
                     v_151 : bool; v_150 : bool; r_14_St_27_Open : bool;
                     s_14_St_27_Open_1 : bool; r_14_St_27_Closed : bool;
                     s_14_St_27_Closed_1 : bool; ck_21_1 : bool;
                     nr_15_St_28_Noite : bool; ns_15_St_28_Noite_1 : bool;
                     night_1_St_28_Noite : bool; nr_15_St_28_Dia : bool;
                     ns_15_St_28_Dia_1 : bool; night_1_St_28_Dia : bool;
                     ck_20_1 : bool; r_15_St_28_Noite : bool;
                     s_15_St_28_Noite_1 : bool; r_15_St_28_Dia : bool;
                     s_15_St_28_Dia_1 : bool; ck_1 : bool; s_8_2_0 : bool;
                     s_8_2_1 : bool; ns_8_2_0 : bool; ns_8_2_1 : bool;
                     s_15_1 : bool; ns_15_1 : bool; r_15 : bool;
                     nr_15 : bool; pnr_15 : bool; s_14_1 : bool;
                     ns_14_1 : bool; r_14 : bool; nr_14 : bool;
                     pnr_14 : bool; s_13_1 : bool; ns_13_1 : bool;
                     r_13 : bool; nr_13 : bool; pnr_13 : bool; s_12_1 : bool;
                     ns_12_1 : bool; r_12 : bool; nr_12 : bool;
                     pnr_12 : bool; s_11_1 : bool; ns_11_1 : bool;
                     r_11 : bool; nr_11 : bool; pnr_11 : bool; s_10_1 : bool;
                     ns_10_1 : bool; r_10 : bool; nr_10 : bool;
                     pnr_10 : bool; s_9_1 : bool; ns_9_1 : bool; r_9 : bool;
                     nr_9 : bool; pnr_9 : bool; s_8_2 : bool; s_8_1 : bool;
                     ns_8_2 : bool; ns_8_1 : bool; r_8 : bool; nr_8 : bool;
                     pnr_8 : bool; s_7_1 : bool; ns_7_1 : bool; r_7 : bool;
                     nr_7 : bool; pnr_7 : bool; s_6_1 : bool; ns_6_1 : bool;
                     r_6 : bool; nr_6 : bool; pnr_6 : bool; s_5_1 : bool;
                     ns_5_1 : bool; r_5 : bool; nr_5 : bool; pnr_5 : bool;
                     s_4_1 : bool; ns_4_1 : bool; r_4 : bool; nr_4 : bool;
                     pnr_4 : bool; s_1 : bool; ns_1 : bool; r : bool;
                     nr : bool; pnr : bool; sw_3 : bool; c1_5 : bool;
                     c2_5 : bool; failed_recovered_5 : bool;
                     failed_recovered_3 : bool; failed_3 : bool; c1_3 : bool;
                     c2_3 : bool; sw_2 : bool; blind_open : bool;
                     blind : bool; failed_5 : bool; sw : bool; c1_4 : bool;
                     c2_4 : bool; failed_recovered_4 : bool;
                     failed_recovered_2 : bool; failed_2 : bool; c1_2 : bool;
                     c2_2 : bool; sw_1 : bool; lamp_on : bool; lamp : bool;
                     failed_4 : bool; c1 : bool; c2 : bool;
                     failed_recovered : bool; failed_recovered_1 : bool;
                     failed_1 : bool; c1_1 : bool; c2_1 : bool;
                     air_state_1 : int; air_state_2 : int; failed : bool;
                     c_2 : bool; window_open_1 : bool; c_1 : bool;
                     computer_on : bool; arrived_1 : bool; presence_1 : bool;
                     arrived : bool; presence : bool; c : bool;
                     closet_open_1 : bool; c_door_1 : bool;
                     door_open_1 : bool; change : bool; night_1 : bool;
  let
    sw_3 = blind_switch;
    c1_5 = c_blind_1;
    c2_5 = c_blind_2;
    failed_recovered_5 = blind_failed_recovered;
    failed_recovered_3 = failed_recovered_5;
    pnr = false fby nr;
    ck_44_1 = s_1;
    failed_3_St_16_Funcionando = false;
    nr_St_16_Funcionando = false;
    ns_St_16_Funcionando_1 = false;
    failed_3_St_16_Falha = true;
    nr_St_16_Falha = false;
    ns_St_16_Falha_1 = true;
    failed_3 =
      merge ck_44_1
        (true -> failed_3_St_16_Falha)(false -> failed_3_St_16_Funcionando);
    ns_1 =
      merge ck_44_1
        (true -> ns_St_16_Falha_1)(false -> ns_St_16_Funcionando_1);
    nr =
      merge ck_44_1 (true -> nr_St_16_Falha)(false -> nr_St_16_Funcionando);
    ck_43_1 = false fby ns_1;
    r_St_16_Funcionando =
      if (failed_recovered_3 when false(ck_43_1))
      then true
      else (pnr when false(ck_43_1));
    s_St_16_Funcionando_1 =
      if (failed_recovered_3 when false(ck_43_1)) then true else false;
    r_St_16_Falha =
      if (failed_recovered_3 when true(ck_43_1))
      then true
      else (pnr when true(ck_43_1));
    s_St_16_Falha_1 =
      if (failed_recovered_3 when true(ck_43_1)) then false else true;
    s_1 =
      merge ck_43_1 (true -> s_St_16_Falha_1)(false -> s_St_16_Funcionando_1);
    r = merge ck_43_1 (true -> r_St_16_Falha)(false -> r_St_16_Funcionando);
    c1_3 = sw_3;
    c2_3 = c1_5;
    sw_2 = c2_5;
    pnr_4 = false fby nr_4;
    ck_42_1 = s_4_1;
    blind_open_St_17_Down = false;
    nr_4_St_17_Down = false;
    ns_4_St_17_Down_1 = true;
    blind_open_St_17_Up = true;
    nr_4_St_17_Up = false;
    ns_4_St_17_Up_1 = false;
    blind_open =
      merge ck_42_1
        (true -> blind_open_St_17_Down)(false -> blind_open_St_17_Up);
    ns_4_1 =
      merge ck_42_1 (true -> ns_4_St_17_Down_1)(false -> ns_4_St_17_Up_1);
    nr_4 = merge ck_42_1 (true -> nr_4_St_17_Down)(false -> nr_4_St_17_Up);
    ck_41_1 = true fby ns_4_1;
    r_4_St_17_Down = if v_179 then true else (pnr_4 when true(ck_41_1));
    s_4_St_17_Down_1 = if v_179 then false else true;
    v_179 = (v_177 or v_178);
    v_178 = not((c2_3 when true(ck_41_1)));
    v_177 = ((c1_3 when true(ck_41_1)) & (sw_2 when true(ck_41_1)));
    r_4_St_17_Up = if v_176 then true else (pnr_4 when false(ck_41_1));
    s_4_St_17_Up_1 = if v_176 then true else false;
    v_176 = (v_174 or v_175);
    v_175 = not((c2_3 when false(ck_41_1)));
    v_174 = ((c1_3 when false(ck_41_1)) & (sw_2 when false(ck_41_1)));
    s_4_1 = merge ck_41_1 (true -> s_4_St_17_Down_1)(false -> s_4_St_17_Up_1);
    r_4 = merge ck_41_1 (true -> r_4_St_17_Down)(false -> r_4_St_17_Up);
    blind = blind_open;
    failed_5 = failed_3;
    sw = light_switch;
    c1_4 = c_light_1;
    c2_4 = c_light_2;
    failed_recovered_4 = light_failed_recovered;
    failed_recovered_2 = failed_recovered_4;
    pnr_5 = false fby nr_5;
    ck_40_1 = s_5_1;
    failed_2_St_18_Funcionando = false;
    nr_5_St_18_Funcionando = false;
    ns_5_St_18_Funcionando_1 = false;
    failed_2_St_18_Falha = true;
    nr_5_St_18_Falha = false;
    ns_5_St_18_Falha_1 = true;
    failed_2 =
      merge ck_40_1
        (true -> failed_2_St_18_Falha)(false -> failed_2_St_18_Funcionando);
    ns_5_1 =
      merge ck_40_1
        (true -> ns_5_St_18_Falha_1)(false -> ns_5_St_18_Funcionando_1);
    nr_5 =
      merge ck_40_1
        (true -> nr_5_St_18_Falha)(false -> nr_5_St_18_Funcionando);
    ck_39_1 = false fby ns_5_1;
    r_5_St_18_Funcionando =
      if (failed_recovered_2 when false(ck_39_1))
      then true
      else (pnr_5 when false(ck_39_1));
    s_5_St_18_Funcionando_1 =
      if (failed_recovered_2 when false(ck_39_1)) then true else false;
    r_5_St_18_Falha =
      if (failed_recovered_2 when true(ck_39_1))
      then true
      else (pnr_5 when true(ck_39_1));
    s_5_St_18_Falha_1 =
      if (failed_recovered_2 when true(ck_39_1)) then false else true;
    s_5_1 =
      merge ck_39_1
        (true -> s_5_St_18_Falha_1)(false -> s_5_St_18_Funcionando_1);
    r_5 =
      merge ck_39_1 (true -> r_5_St_18_Falha)(false -> r_5_St_18_Funcionando);
    c1_2 = sw;
    c2_2 = c1_4;
    sw_1 = c2_4;
    pnr_6 = false fby nr_6;
    ck_38_1 = s_6_1;
    lamp_on_St_19_Off = false;
    nr_6_St_19_Off = false;
    ns_6_St_19_Off_1 = true;
    lamp_on_St_19_On = true;
    nr_6_St_19_On = false;
    ns_6_St_19_On_1 = false;
    lamp_on =
      merge ck_38_1 (true -> lamp_on_St_19_Off)(false -> lamp_on_St_19_On);
    ns_6_1 =
      merge ck_38_1 (true -> ns_6_St_19_Off_1)(false -> ns_6_St_19_On_1);
    nr_6 = merge ck_38_1 (true -> nr_6_St_19_Off)(false -> nr_6_St_19_On);
    ck_37_1 = true fby ns_6_1;
    r_6_St_19_Off = if v_173 then true else (pnr_6 when true(ck_37_1));
    s_6_St_19_Off_1 = if v_173 then false else true;
    v_173 = (v_171 or v_172);
    v_172 = not((c2_2 when true(ck_37_1)));
    v_171 = ((c1_2 when true(ck_37_1)) & (sw_1 when true(ck_37_1)));
    r_6_St_19_On = if v_170 then true else (pnr_6 when false(ck_37_1));
    s_6_St_19_On_1 = if v_170 then true else false;
    v_170 = (v_168 or v_169);
    v_169 = not((c2_2 when false(ck_37_1)));
    v_168 = ((c1_2 when false(ck_37_1)) & (sw_1 when false(ck_37_1)));
    s_6_1 = merge ck_37_1 (true -> s_6_St_19_Off_1)(false -> s_6_St_19_On_1);
    r_6 = merge ck_37_1 (true -> r_6_St_19_Off)(false -> r_6_St_19_On);
    lamp = lamp_on;
    failed_4 = failed_2;
    c1 = c_air_1;
    c2 = c_air_2;
    failed_recovered = air_failed_recovered;
    failed_recovered_1 = failed_recovered;
    pnr_7 = false fby nr_7;
    ck_36_1 = s_7_1;
    failed_1_St_20_Funcionando = false;
    nr_7_St_20_Funcionando = false;
    ns_7_St_20_Funcionando_1 = false;
    failed_1_St_20_Falha = true;
    nr_7_St_20_Falha = false;
    ns_7_St_20_Falha_1 = true;
    failed_1 =
      merge ck_36_1
        (true -> failed_1_St_20_Falha)(false -> failed_1_St_20_Funcionando);
    ns_7_1 =
      merge ck_36_1
        (true -> ns_7_St_20_Falha_1)(false -> ns_7_St_20_Funcionando_1);
    nr_7 =
      merge ck_36_1
        (true -> nr_7_St_20_Falha)(false -> nr_7_St_20_Funcionando);
    ck_35_1 = false fby ns_7_1;
    r_7_St_20_Funcionando =
      if (failed_recovered_1 when false(ck_35_1))
      then true
      else (pnr_7 when false(ck_35_1));
    s_7_St_20_Funcionando_1 =
      if (failed_recovered_1 when false(ck_35_1)) then true else false;
    r_7_St_20_Falha =
      if (failed_recovered_1 when true(ck_35_1))
      then true
      else (pnr_7 when true(ck_35_1));
    s_7_St_20_Falha_1 =
      if (failed_recovered_1 when true(ck_35_1)) then false else true;
    s_7_1 =
      merge ck_35_1
        (true -> s_7_St_20_Falha_1)(false -> s_7_St_20_Funcionando_1);
    r_7 =
      merge ck_35_1 (true -> r_7_St_20_Falha)(false -> r_7_St_20_Funcionando);
    c1_1 = c1;
    c2_1 = c2;
    pnr_8 = false fby nr_8;
    ck_34_1 = s_8_1;
    ck_34_2 = s_8_2;
    air_state_1_St_21_Off = 0;
    nr_8_St_21_Off = false;
    ns_8_St_21_Off_1 = false;
    ns_8_St_21_Off_2 = false;
    air_state_1_St_21_Min = 1;
    nr_8_St_21_Min = false;
    ns_8_St_21_Min_1 = true;
    ns_8_St_21_Min_2 = false;
    air_state_1_St_21_Max = 2;
    nr_8_St_21_Max = false;
    ns_8_St_21_Max_1 = true;
    ns_8_St_21_Max_2 = true;
    v_212 =
      merge ck_34_2_1
        (true -> air_state_1_St_21_Max)(false -> air_state_1_St_21_Min);
    v_213 =
      merge ck_34_2_0
        (true -> ((0 when false(ck_34_1)) when true(ck_34_2_0)))
        (false -> air_state_1_St_21_Off);
    air_state_1 = merge ck_34_1 (true -> v_212)(false -> v_213);
    v_214 =
      merge ck_34_2_1 (true -> ns_8_St_21_Max_1)(false -> ns_8_St_21_Min_1);
    v_215 =
      merge ck_34_2_1 (true -> ns_8_St_21_Max_2)(false -> ns_8_St_21_Min_2);
    v_216 =
      merge ck_34_2_0
        (true -> ((true when false(ck_34_1)) when true(ck_34_2_0)))
        (false -> ns_8_St_21_Off_1);
    v_217 =
      merge ck_34_2_0
        (true -> ((true when false(ck_34_1)) when true(ck_34_2_0)))
        (false -> ns_8_St_21_Off_2);
    ns_8_1 = merge ck_34_1 (true -> v_214)(false -> v_216);
    ns_8_2 = merge ck_34_1 (true -> v_215)(false -> v_217);
    v_218 = merge ck_34_2_1 (true -> nr_8_St_21_Max)(false -> nr_8_St_21_Min);
    v_219 =
      merge ck_34_2_0
        (true -> ((true when false(ck_34_1)) when true(ck_34_2_0)))
        (false -> nr_8_St_21_Off);
    nr_8 = merge ck_34_1 (true -> v_218)(false -> v_219);
    ck_34_2_1 = (ck_34_2 when true(ck_34_1));
    ck_34_2_0 = (ck_34_2 when false(ck_34_1));
    ns_8_St_21_Off_2_1 = (ns_8_St_21_Off_2 when true(ns_8_St_21_Off_1));
    ns_8_St_21_Off_2_0 = (ns_8_St_21_Off_2 when false(ns_8_St_21_Off_1));
    ns_8_St_21_Min_2_1 = (ns_8_St_21_Min_2 when true(ns_8_St_21_Min_1));
    ns_8_St_21_Min_2_0 = (ns_8_St_21_Min_2 when false(ns_8_St_21_Min_1));
    ns_8_St_21_Max_2_1 = (ns_8_St_21_Max_2 when true(ns_8_St_21_Max_1));
    ns_8_St_21_Max_2_0 = (ns_8_St_21_Max_2 when false(ns_8_St_21_Max_1));
    v_220 = false fby ns_8_1;
    v_221 = false fby ns_8_2;
    ck_33_1 = v_220;
    ck_33_2 = v_221;
    r_8_St_21_Off = if v_164 then true else v_167;
    s_8_St_21_Off_1 = if v_164 then true else v_166_1;
    s_8_St_21_Off_2 = if v_164 then false else v_166_2;
    v_167 =
      if v_165
      then true
      else ((pnr_8 when false(ck_33_1)) when false(ck_33_2_0));
    v_166_1 = if v_165 then true else false;
    v_166_2 = if v_165 then true else false;
    v_165 = not(((c2_1 when false(ck_33_1)) when false(ck_33_2_0)));
    v_164 = not(((c1_1 when false(ck_33_1)) when false(ck_33_2_0)));
    v_166_2_1 = (v_166_2 when true(v_166_1));
    v_166_2_0 = (v_166_2 when false(v_166_1));
    r_8_St_21_Min = if v_160 then true else v_163;
    s_8_St_21_Min_1 = if v_160 then false else v_162_1;
    s_8_St_21_Min_2 = if v_160 then false else v_162_2;
    v_163 =
      if v_161
      then true
      else ((pnr_8 when true(ck_33_1)) when false(ck_33_2_1));
    v_162_1 = if v_161 then true else true;
    v_162_2 = if v_161 then true else false;
    v_161 = not(((c2_1 when true(ck_33_1)) when false(ck_33_2_1)));
    v_160 = not(((c1_1 when true(ck_33_1)) when false(ck_33_2_1)));
    v_162_2_1 = (v_162_2 when true(v_162_1));
    v_162_2_0 = (v_162_2 when false(v_162_1));
    r_8_St_21_Max = if v_156 then true else v_159;
    s_8_St_21_Max_1 = if v_156 then true else v_158_1;
    s_8_St_21_Max_2 = if v_156 then false else v_158_2;
    v_159 =
      if v_157
      then true
      else ((pnr_8 when true(ck_33_1)) when true(ck_33_2_1));
    v_158_1 = if v_157 then false else true;
    v_158_2 = if v_157 then false else true;
    v_157 = not(((c2_1 when true(ck_33_1)) when true(ck_33_2_1)));
    v_156 = not(((c1_1 when true(ck_33_1)) when true(ck_33_2_1)));
    v_158_2_1 = (v_158_2 when true(v_158_1));
    v_158_2_0 = (v_158_2 when false(v_158_1));
    v_222 =
      merge ck_33_2_1 (true -> s_8_St_21_Max_1)(false -> s_8_St_21_Min_1);
    v_223 =
      merge ck_33_2_1 (true -> s_8_St_21_Max_2)(false -> s_8_St_21_Min_2);
    v_224 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> s_8_St_21_Off_1);
    v_225 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> s_8_St_21_Off_2);
    s_8_1 = merge ck_33_1 (true -> v_222)(false -> v_224);
    s_8_2 = merge ck_33_1 (true -> v_223)(false -> v_225);
    v_226 = merge ck_33_2_1 (true -> r_8_St_21_Max)(false -> r_8_St_21_Min);
    v_227 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> r_8_St_21_Off);
    r_8 = merge ck_33_1 (true -> v_226)(false -> v_227);
    ck_33_2_1 = (ck_33_2 when true(ck_33_1));
    ck_33_2_0 = (ck_33_2 when false(ck_33_1));
    s_8_St_21_Off_2_1 = (s_8_St_21_Off_2 when true(s_8_St_21_Off_1));
    s_8_St_21_Off_2_0 = (s_8_St_21_Off_2 when false(s_8_St_21_Off_1));
    s_8_St_21_Min_2_1 = (s_8_St_21_Min_2 when true(s_8_St_21_Min_1));
    s_8_St_21_Min_2_0 = (s_8_St_21_Min_2 when false(s_8_St_21_Min_1));
    s_8_St_21_Max_2_1 = (s_8_St_21_Max_2 when true(s_8_St_21_Max_1));
    s_8_St_21_Max_2_0 = (s_8_St_21_Max_2 when false(s_8_St_21_Max_1));
    air_state_2 = air_state_1;
    failed = failed_1;
    c_2 = c_window;
    pnr_9 = false fby nr_9;
    ck_32_1 = s_9_1;
    window_open_1_St_22_Closed = false;
    nr_9_St_22_Closed = false;
    ns_9_St_22_Closed_1 = true;
    window_open_1_St_22_Open = true;
    nr_9_St_22_Open = false;
    ns_9_St_22_Open_1 = false;
    window_open_1 =
      merge ck_32_1
        (true -> window_open_1_St_22_Closed)
        (false -> window_open_1_St_22_Open);
    ns_9_1 =
      merge ck_32_1 (true -> ns_9_St_22_Closed_1)(false -> ns_9_St_22_Open_1);
    nr_9 =
      merge ck_32_1 (true -> nr_9_St_22_Closed)(false -> nr_9_St_22_Open);
    ck_31_1 = true fby ns_9_1;
    r_9_St_22_Closed = if v_155 then true else (pnr_9 when true(ck_31_1));
    s_9_St_22_Closed_1 = if v_155 then false else true;
    v_155 = not((c_2 when true(ck_31_1)));
    r_9_St_22_Open =
      if (c_2 when false(ck_31_1)) then true else (pnr_9 when false(ck_31_1));
    s_9_St_22_Open_1 = if (c_2 when false(ck_31_1)) then true else false;
    s_9_1 =
      merge ck_31_1 (true -> s_9_St_22_Closed_1)(false -> s_9_St_22_Open_1);
    r_9 = merge ck_31_1 (true -> r_9_St_22_Closed)(false -> r_9_St_22_Open);
    c_1 = c_pc;
    pnr_10 = false fby nr_10;
    ck_30_1 = s_10_1;
    computer_on_St_23_Off = false;
    nr_10_St_23_Off = false;
    ns_10_St_23_Off_1 = true;
    computer_on_St_23_On = true;
    nr_10_St_23_On = false;
    ns_10_St_23_On_1 = false;
    computer_on =
      merge ck_30_1
        (true -> computer_on_St_23_Off)(false -> computer_on_St_23_On);
    ns_10_1 =
      merge ck_30_1 (true -> ns_10_St_23_Off_1)(false -> ns_10_St_23_On_1);
    nr_10 = merge ck_30_1 (true -> nr_10_St_23_Off)(false -> nr_10_St_23_On);
    ck_29_1 = true fby ns_10_1;
    r_10_St_23_Off = if v_154 then true else (pnr_10 when true(ck_29_1));
    s_10_St_23_Off_1 = if v_154 then false else true;
    v_154 = not((c_1 when true(ck_29_1)));
    r_10_St_23_On = if v_153 then true else (pnr_10 when false(ck_29_1));
    s_10_St_23_On_1 = if v_153 then true else false;
    v_153 = not((c_1 when false(ck_29_1)));
    s_10_1 =
      merge ck_29_1 (true -> s_10_St_23_Off_1)(false -> s_10_St_23_On_1);
    r_10 = merge ck_29_1 (true -> r_10_St_23_Off)(false -> r_10_St_23_On);
    arrived_1 = cleaner;
    pnr_11 = false fby nr_11;
    ck_28_1 = s_11_1;
    presence_1_St_24_Not_Present = false;
    nr_11_St_24_Not_Present = false;
    ns_11_St_24_Not_Present_1 = true;
    presence_1_St_24_Present = true;
    nr_11_St_24_Present = false;
    ns_11_St_24_Present_1 = false;
    presence_1 =
      merge ck_28_1
        (true -> presence_1_St_24_Not_Present)
        (false -> presence_1_St_24_Present);
    ns_11_1 =
      merge ck_28_1
        (true -> ns_11_St_24_Not_Present_1)(false -> ns_11_St_24_Present_1);
    nr_11 =
      merge ck_28_1
        (true -> nr_11_St_24_Not_Present)(false -> nr_11_St_24_Present);
    ck_27_1 = true fby ns_11_1;
    r_11_St_24_Not_Present =
      if (arrived_1 when true(ck_27_1))
      then true
      else (pnr_11 when true(ck_27_1));
    s_11_St_24_Not_Present_1 =
      if (arrived_1 when true(ck_27_1)) then false else true;
    r_11_St_24_Present =
      if (arrived_1 when false(ck_27_1))
      then true
      else (pnr_11 when false(ck_27_1));
    s_11_St_24_Present_1 =
      if (arrived_1 when false(ck_27_1)) then true else false;
    s_11_1 =
      merge ck_27_1
        (true -> s_11_St_24_Not_Present_1)(false -> s_11_St_24_Present_1);
    r_11 =
      merge ck_27_1
        (true -> r_11_St_24_Not_Present)(false -> r_11_St_24_Present);
    arrived = worker;
    pnr_12 = false fby nr_12;
    ck_26_1 = s_12_1;
    presence_St_25_Not_Present = false;
    nr_12_St_25_Not_Present = false;
    ns_12_St_25_Not_Present_1 = true;
    presence_St_25_Present = true;
    nr_12_St_25_Present = false;
    ns_12_St_25_Present_1 = false;
    presence =
      merge ck_26_1
        (true -> presence_St_25_Not_Present)(false -> presence_St_25_Present);
    ns_12_1 =
      merge ck_26_1
        (true -> ns_12_St_25_Not_Present_1)(false -> ns_12_St_25_Present_1);
    nr_12 =
      merge ck_26_1
        (true -> nr_12_St_25_Not_Present)(false -> nr_12_St_25_Present);
    ck_25_1 = true fby ns_12_1;
    r_12_St_25_Not_Present =
      if (arrived when true(ck_25_1))
      then true
      else (pnr_12 when true(ck_25_1));
    s_12_St_25_Not_Present_1 =
      if (arrived when true(ck_25_1)) then false else true;
    r_12_St_25_Present =
      if (arrived when false(ck_25_1))
      then true
      else (pnr_12 when false(ck_25_1));
    s_12_St_25_Present_1 =
      if (arrived when false(ck_25_1)) then true else false;
    s_12_1 =
      merge ck_25_1
        (true -> s_12_St_25_Not_Present_1)(false -> s_12_St_25_Present_1);
    r_12 =
      merge ck_25_1
        (true -> r_12_St_25_Not_Present)(false -> r_12_St_25_Present);
    c = c_closet;
    pnr_13 = false fby nr_13;
    ck_24_1 = s_13_1;
    closet_open_1_St_26_Locked = false;
    nr_13_St_26_Locked = false;
    ns_13_St_26_Locked_1 = true;
    closet_open_1_St_26_Open = true;
    nr_13_St_26_Open = false;
    ns_13_St_26_Open_1 = false;
    closet_open_1 =
      merge ck_24_1
        (true -> closet_open_1_St_26_Locked)
        (false -> closet_open_1_St_26_Open);
    ns_13_1 =
      merge ck_24_1
        (true -> ns_13_St_26_Locked_1)(false -> ns_13_St_26_Open_1);
    nr_13 =
      merge ck_24_1 (true -> nr_13_St_26_Locked)(false -> nr_13_St_26_Open);
    ck_23_1 = true fby ns_13_1;
    r_13_St_26_Locked = if v_152 then true else (pnr_13 when true(ck_23_1));
    s_13_St_26_Locked_1 = if v_152 then false else true;
    v_152 = not((c when true(ck_23_1)));
    r_13_St_26_Open =
      if (c when false(ck_23_1)) then true else (pnr_13 when false(ck_23_1));
    s_13_St_26_Open_1 = if (c when false(ck_23_1)) then true else false;
    s_13_1 =
      merge ck_23_1 (true -> s_13_St_26_Locked_1)(false -> s_13_St_26_Open_1);
    r_13 =
      merge ck_23_1 (true -> r_13_St_26_Locked)(false -> r_13_St_26_Open);
    c_door_1 = c_door;
    pnr_14 = false fby nr_14;
    ck_22_1 = s_14_1;
    door_open_1_St_27_Closed = false;
    nr_14_St_27_Closed = false;
    ns_14_St_27_Closed_1 = true;
    door_open_1_St_27_Open = true;
    nr_14_St_27_Open = false;
    ns_14_St_27_Open_1 = false;
    door_open_1 =
      merge ck_22_1
        (true -> door_open_1_St_27_Closed)(false -> door_open_1_St_27_Open);
    ns_14_1 =
      merge ck_22_1
        (true -> ns_14_St_27_Closed_1)(false -> ns_14_St_27_Open_1);
    nr_14 =
      merge ck_22_1 (true -> nr_14_St_27_Closed)(false -> nr_14_St_27_Open);
    ck_21_1 = true fby ns_14_1;
    r_14_St_27_Closed = if v_151 then true else (pnr_14 when true(ck_21_1));
    s_14_St_27_Closed_1 = if v_151 then false else true;
    v_151 = not((c_door_1 when true(ck_21_1)));
    r_14_St_27_Open = if v_150 then true else (pnr_14 when false(ck_21_1));
    s_14_St_27_Open_1 = if v_150 then true else false;
    v_150 = not((c_door_1 when false(ck_21_1)));
    s_14_1 =
      merge ck_21_1 (true -> s_14_St_27_Closed_1)(false -> s_14_St_27_Open_1);
    r_14 =
      merge ck_21_1 (true -> r_14_St_27_Closed)(false -> r_14_St_27_Open);
    change = change_shift;
    pnr_15 = false fby nr_15;
    ck_20_1 = s_15_1;
    night_1_St_28_Dia = false;
    nr_15_St_28_Dia = false;
    ns_15_St_28_Dia_1 = true;
    night_1_St_28_Noite = true;
    nr_15_St_28_Noite = false;
    ns_15_St_28_Noite_1 = false;
    night_1 =
      merge ck_20_1 (true -> night_1_St_28_Dia)(false -> night_1_St_28_Noite);
    ns_15_1 =
      merge ck_20_1 (true -> ns_15_St_28_Dia_1)(false -> ns_15_St_28_Noite_1);
    nr_15 =
      merge ck_20_1 (true -> nr_15_St_28_Dia)(false -> nr_15_St_28_Noite);
    ck_1 = true fby ns_15_1;
    r_15_St_28_Dia =
      if (change when true(ck_1)) then true else (pnr_15 when true(ck_1));
    s_15_St_28_Dia_1 = if (change when true(ck_1)) then false else true;
    r_15_St_28_Noite =
      if (change when false(ck_1)) then true else (pnr_15 when false(ck_1));
    s_15_St_28_Noite_1 = if (change when false(ck_1)) then true else false;
    s_15_1 =
      merge ck_1 (true -> s_15_St_28_Dia_1)(false -> s_15_St_28_Noite_1);
    r_15 = merge ck_1 (true -> r_15_St_28_Dia)(false -> r_15_St_28_Noite);
    night = night_1;
    door_open = door_open_1;
    closet_open = closet_open_1;
    worker_presence = presence;
    cleaner_presence = presence_1;
    pc_on = computer_on;
    window_open = window_open_1;
    air_failed = failed;
    air_state = air_state_2;
    light_failed = failed_4;
    light_on = lamp;
    blind_failed = failed_5;
    blind_up = blind;
    ns_8_2_1 = (ns_8_2 when true(ns_8_1));
    ns_8_2_0 = (ns_8_2 when false(ns_8_1));
    s_8_2_1 = (s_8_2 when true(s_8_1));
    s_8_2_0 = (s_8_2 when false(s_8_1))
  tel

