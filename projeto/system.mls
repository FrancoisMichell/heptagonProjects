type st_37 = St_37_Noite|St_37_Dia
type st_36 = St_36_Present|St_36_Not_Present
type st_35 = St_35_Present|St_35_Not_Present
type st_34 = St_34_Open|St_34_Closed
type st_33 = St_33_Funcionando|St_33_Falha
type st_32 = St_32_On|St_32_Off
type st_31 = St_31_Funcionando|St_31_Falha
type st_30 = St_30_Off|St_30_Min|St_30_Max
type st_29 = St_29_Funcionando|St_29_Falha
type st_28 = St_28_Open|St_28_Closed
type st_27 = St_27_Funcionando|St_27_Falha
type st_26 = St_26_Open|St_26_Locked
type st_25 = St_25_Funcionando|St_25_Falha
type st_24 = St_24_On|St_24_Off
type st_23 = St_23_Funcionando|St_23_Falha
type st_22 = St_22_On|St_22_Off
type st_21 = St_21_Funcionando|St_21_Falha
type st_20 = St_20_Off|St_20_Min|St_20_Max
type st_19 = St_19_Funcionando|St_19_Falha
type st_18 = St_18_Open|St_18_Closed
type st_17 = St_17_Funcionando|St_17_Falha
type st_16 = St_16_On|St_16_Off
type st_15 = St_15_Funcionando|St_15_Falha
type st_14 = St_14_Open|St_14_Locked
type st_13 = St_13_Funcionando|St_13_Falha
type st_12 = St_12_Open|St_12_Closed
type st_11 = St_11_Funcionando|St_11_Falha
type st_10 = St_10_On|St_10_Off
type st_9 = St_9_Funcionando|St_9_Falha
type st_8 = St_8_Funcionando|St_8_Falha
type st_7 = St_7_Noite|St_7_Dia
type st_6 = St_6_Off|St_6_Min|St_6_Max
type st_5 = St_5_Open|St_5_Closed
type st_4 = St_4_On|St_4_Off
type st_3 = St_3_Present|St_3_Not_Present
type st_2 = St_2_Open|St_2_Locked
type st_1 = St_1_Open|St_1_Closed
type st = St_On|St_Off
node light_source(sw : bool; c1 : bool; c2 : bool)
returns (light_source_on : int)
var nr_St_On : bool; ns_St_On_1 : bool; light_source_on_St_On : int;
    nr_St_Off : bool; ns_St_Off_1 : bool; light_source_on_St_Off : int;
    ck_1_1 : bool; v_5 : bool; v_4 : bool; v_3 : bool; v_2 : bool;
    v_1 : bool; v : bool; r_St_On : bool; s_St_On_1 : bool; r_St_Off : bool;
    s_St_Off_1 : bool; ck_1_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  light_source_on_St_Off = 0;
  nr_St_Off = false;
  ns_St_Off_1 = true;
  light_source_on_St_On = 1;
  nr_St_On = false;
  ns_St_On_1 = false;
  light_source_on =
    merge ck_1_1
      (true -> light_source_on_St_Off)(false -> light_source_on_St_On);
  ns_1 = merge ck_1_1 (true -> ns_St_Off_1)(false -> ns_St_On_1);
  nr = merge ck_1_1 (true -> nr_St_Off)(false -> nr_St_On);
  ck_1_2 = true fby ns_1;
  r_St_Off = if v_5 then true else (pnr when true(ck_1_2));
  s_St_Off_1 = if v_5 then false else true;
  v_5 = (v_3 or v_4);
  v_4 = not((c2 when true(ck_1_2)));
  v_3 = ((c1 when true(ck_1_2)) & (sw when true(ck_1_2)));
  r_St_On = if v_2 then true else (pnr when false(ck_1_2));
  s_St_On_1 = if v_2 then true else false;
  v_2 = (v or v_1);
  v_1 = not((c2 when false(ck_1_2)));
  v = ((c1 when false(ck_1_2)) & (sw when false(ck_1_2)));
  s_1 = merge ck_1_2 (true -> s_St_Off_1)(false -> s_St_On_1);
  r = merge ck_1_2 (true -> r_St_Off)(false -> r_St_On)
tel

node door(c : bool) returns (door_open : int)
var nr_St_1_Open : bool; ns_St_1_Open_1 : bool; door_open_St_1_Open : int;
    nr_St_1_Closed : bool; ns_St_1_Closed_1 : bool;
    door_open_St_1_Closed : int; ck_2_1 : bool; v_6 : bool; v : bool;
    r_St_1_Open : bool; s_St_1_Open_1 : bool; r_St_1_Closed : bool;
    s_St_1_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  door_open_St_1_Closed = 0;
  nr_St_1_Closed = false;
  ns_St_1_Closed_1 = true;
  door_open_St_1_Open = 1;
  nr_St_1_Open = false;
  ns_St_1_Open_1 = false;
  door_open =
    merge ck_2_1
      (true -> door_open_St_1_Closed)(false -> door_open_St_1_Open);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Closed_1)(false -> ns_St_1_Open_1);
  nr = merge ck_2_1 (true -> nr_St_1_Closed)(false -> nr_St_1_Open);
  ck_1 = true fby ns_1;
  r_St_1_Closed = if v_6 then true else (pnr when true(ck_1));
  s_St_1_Closed_1 = if v_6 then false else true;
  v_6 = not((c when true(ck_1)));
  r_St_1_Open = if v then true else (pnr when false(ck_1));
  s_St_1_Open_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Closed_1)(false -> s_St_1_Open_1);
  r = merge ck_1 (true -> r_St_1_Closed)(false -> r_St_1_Open)
tel

node closet(c : bool) returns (closet_open : int)
var nr_St_2_Open : bool; ns_St_2_Open_1 : bool; closet_open_St_2_Open : int;
    nr_St_2_Locked : bool; ns_St_2_Locked_1 : bool;
    closet_open_St_2_Locked : int; ck_3_1 : bool; v : bool;
    r_St_2_Open : bool; s_St_2_Open_1 : bool; r_St_2_Locked : bool;
    s_St_2_Locked_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  closet_open_St_2_Locked = 0;
  nr_St_2_Locked = false;
  ns_St_2_Locked_1 = true;
  closet_open_St_2_Open = 1;
  nr_St_2_Open = false;
  ns_St_2_Open_1 = false;
  closet_open =
    merge ck_3_1
      (true -> closet_open_St_2_Locked)(false -> closet_open_St_2_Open);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Locked_1)(false -> ns_St_2_Open_1);
  nr = merge ck_3_1 (true -> nr_St_2_Locked)(false -> nr_St_2_Open);
  ck_1 = true fby ns_1;
  r_St_2_Locked = if v then true else (pnr when true(ck_1));
  s_St_2_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_2_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_2_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_2_Locked_1)(false -> s_St_2_Open_1);
  r = merge ck_1 (true -> r_St_2_Locked)(false -> r_St_2_Open)
tel

node person(arrived : bool) returns (presence : bool)
var nr_St_3_Present : bool; ns_St_3_Present_1 : bool;
    presence_St_3_Present : bool; nr_St_3_Not_Present : bool;
    ns_St_3_Not_Present_1 : bool; presence_St_3_Not_Present : bool;
    ck_4_1 : bool; r_St_3_Present : bool; s_St_3_Present_1 : bool;
    r_St_3_Not_Present : bool; s_St_3_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  presence_St_3_Not_Present = false;
  nr_St_3_Not_Present = false;
  ns_St_3_Not_Present_1 = true;
  presence_St_3_Present = true;
  nr_St_3_Present = false;
  ns_St_3_Present_1 = false;
  presence =
    merge ck_4_1
      (true -> presence_St_3_Not_Present)(false -> presence_St_3_Present);
  ns_1 =
    merge ck_4_1 (true -> ns_St_3_Not_Present_1)(false -> ns_St_3_Present_1);
  nr = merge ck_4_1 (true -> nr_St_3_Not_Present)(false -> nr_St_3_Present);
  ck_1 = true fby ns_1;
  r_St_3_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_3_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_3_Present =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_3_Present_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_3_Not_Present_1)(false -> s_St_3_Present_1);
  r = merge ck_1 (true -> r_St_3_Not_Present)(false -> r_St_3_Present)
tel

node computer(c : bool) returns (computer_on : int)
var nr_St_4_On : bool; ns_St_4_On_1 : bool; computer_on_St_4_On : int;
    nr_St_4_Off : bool; ns_St_4_Off_1 : bool; computer_on_St_4_Off : int;
    ck_5_1 : bool; v_7 : bool; v : bool; r_St_4_On : bool;
    s_St_4_On_1 : bool; r_St_4_Off : bool; s_St_4_Off_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  computer_on_St_4_Off = 0;
  nr_St_4_Off = false;
  ns_St_4_Off_1 = true;
  computer_on_St_4_On = 1;
  nr_St_4_On = false;
  ns_St_4_On_1 = false;
  computer_on =
    merge ck_5_1 (true -> computer_on_St_4_Off)(false -> computer_on_St_4_On);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Off_1)(false -> ns_St_4_On_1);
  nr = merge ck_5_1 (true -> nr_St_4_Off)(false -> nr_St_4_On);
  ck_1 = true fby ns_1;
  r_St_4_Off = if v_7 then true else (pnr when true(ck_1));
  s_St_4_Off_1 = if v_7 then false else true;
  v_7 = not((c when true(ck_1)));
  r_St_4_On = if v then true else (pnr when false(ck_1));
  s_St_4_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_4_Off_1)(false -> s_St_4_On_1);
  r = merge ck_1 (true -> r_St_4_Off)(false -> r_St_4_On)
tel

node window(c : bool) returns (window_open : int)
var nr_St_5_Open : bool; ns_St_5_Open_1 : bool; window_open_St_5_Open : int;
    nr_St_5_Closed : bool; ns_St_5_Closed_1 : bool;
    window_open_St_5_Closed : int; ck_6_1 : bool; v : bool;
    r_St_5_Open : bool; s_St_5_Open_1 : bool; r_St_5_Closed : bool;
    s_St_5_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  window_open_St_5_Closed = 0;
  nr_St_5_Closed = false;
  ns_St_5_Closed_1 = true;
  window_open_St_5_Open = 1;
  nr_St_5_Open = false;
  ns_St_5_Open_1 = false;
  window_open =
    merge ck_6_1
      (true -> window_open_St_5_Closed)(false -> window_open_St_5_Open);
  ns_1 = merge ck_6_1 (true -> ns_St_5_Closed_1)(false -> ns_St_5_Open_1);
  nr = merge ck_6_1 (true -> nr_St_5_Closed)(false -> nr_St_5_Open);
  ck_1 = true fby ns_1;
  r_St_5_Closed = if v then true else (pnr when true(ck_1));
  s_St_5_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_5_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_5_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_5_Closed_1)(false -> s_St_5_Open_1);
  r = merge ck_1 (true -> r_St_5_Closed)(false -> r_St_5_Open)
tel

node air_conditioner(c1 : bool; c2 : bool) returns (air_state : int)
var v_243 : bool; v_242 : bool; v_241 : bool; v_240 : bool; v_239 : bool;
    v_238 : bool; v_237 : int; v_236 : int; ns_St_6_Max_2_0 : bool;
    ns_St_6_Max_2_1 : bool; ns_St_6_Min_2_0 : bool; ns_St_6_Min_2_1 : bool;
    ns_St_6_Off_2_0 : bool; ns_St_6_Off_2_1 : bool; ck_7_2_0 : bool;
    ck_7_2_1 : bool; nr_St_6_Max : bool; ns_St_6_Max_2 : bool;
    ns_St_6_Max_1 : bool; air_state_St_6_Max : int; nr_St_6_Min : bool;
    ns_St_6_Min_2 : bool; ns_St_6_Min_1 : bool; air_state_St_6_Min : int;
    nr_St_6_Off : bool; ns_St_6_Off_2 : bool; ns_St_6_Off_1 : bool;
    air_state_St_6_Off : int; ck_7_2 : bool; ck_7_1 : bool; v_17_2_0 : bool;
    v_17_2_1 : bool; v_18 : bool; v_17_2 : bool; v_17_1 : bool; v_16 : bool;
    v_15 : bool; v_13_2_0 : bool; v_13_2_1 : bool; v_14 : bool;
    v_13_2 : bool; v_13_1 : bool; v_12 : bool; v_11 : bool; v_9_2_0 : bool;
    v_9_2_1 : bool; v_10 : bool; v_9_2 : bool; v_9_1 : bool; v_8 : bool;
    v : bool; v_251 : bool; v_250 : bool; v_249 : bool; v_248 : bool;
    v_247 : bool; v_246 : bool; v_245 : bool; v_244 : bool;
    s_St_6_Max_2_0 : bool; s_St_6_Max_2_1 : bool; s_St_6_Min_2_0 : bool;
    s_St_6_Min_2_1 : bool; s_St_6_Off_2_0 : bool; s_St_6_Off_2_1 : bool;
    ck_2_0 : bool; ck_2_1 : bool; r_St_6_Max : bool; s_St_6_Max_2 : bool;
    s_St_6_Max_1 : bool; r_St_6_Min : bool; s_St_6_Min_2 : bool;
    s_St_6_Min_1 : bool; r_St_6_Off : bool; s_St_6_Off_2 : bool;
    s_St_6_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  ck_7_2 = s_2;
  air_state_St_6_Off = 0;
  nr_St_6_Off = false;
  ns_St_6_Off_1 = false;
  ns_St_6_Off_2 = false;
  air_state_St_6_Min = 1;
  nr_St_6_Min = false;
  ns_St_6_Min_1 = true;
  ns_St_6_Min_2 = false;
  air_state_St_6_Max = 2;
  nr_St_6_Max = false;
  ns_St_6_Max_1 = true;
  ns_St_6_Max_2 = true;
  v_236 =
    merge ck_7_2_1 (true -> air_state_St_6_Max)(false -> air_state_St_6_Min);
  v_237 =
    merge ck_7_2_0
      (true -> ((0 when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> air_state_St_6_Off);
  air_state = merge ck_7_1 (true -> v_236)(false -> v_237);
  v_238 = merge ck_7_2_1 (true -> ns_St_6_Max_1)(false -> ns_St_6_Min_1);
  v_239 = merge ck_7_2_1 (true -> ns_St_6_Max_2)(false -> ns_St_6_Min_2);
  v_240 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> ns_St_6_Off_1);
  v_241 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> ns_St_6_Off_2);
  ns_1 = merge ck_7_1 (true -> v_238)(false -> v_240);
  ns_2 = merge ck_7_1 (true -> v_239)(false -> v_241);
  v_242 = merge ck_7_2_1 (true -> nr_St_6_Max)(false -> nr_St_6_Min);
  v_243 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> nr_St_6_Off);
  nr = merge ck_7_1 (true -> v_242)(false -> v_243);
  ck_7_2_1 = (ck_7_2 when true(ck_7_1));
  ck_7_2_0 = (ck_7_2 when false(ck_7_1));
  ns_St_6_Off_2_1 = (ns_St_6_Off_2 when true(ns_St_6_Off_1));
  ns_St_6_Off_2_0 = (ns_St_6_Off_2 when false(ns_St_6_Off_1));
  ns_St_6_Min_2_1 = (ns_St_6_Min_2 when true(ns_St_6_Min_1));
  ns_St_6_Min_2_0 = (ns_St_6_Min_2 when false(ns_St_6_Min_1));
  ns_St_6_Max_2_1 = (ns_St_6_Max_2 when true(ns_St_6_Max_1));
  ns_St_6_Max_2_0 = (ns_St_6_Max_2 when false(ns_St_6_Max_1));
  v_244 = false fby ns_1;
  v_245 = false fby ns_2;
  ck_1 = v_244;
  ck_2 = v_245;
  r_St_6_Off = if v_15 then true else v_18;
  s_St_6_Off_1 = if v_15 then true else v_17_1;
  s_St_6_Off_2 = if v_15 then false else v_17_2;
  v_18 = if v_16 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_17_1 = if v_16 then true else false;
  v_17_2 = if v_16 then true else false;
  v_16 = not(((c2 when false(ck_1)) when false(ck_2_0)));
  v_15 = not(((c1 when false(ck_1)) when false(ck_2_0)));
  v_17_2_1 = (v_17_2 when true(v_17_1));
  v_17_2_0 = (v_17_2 when false(v_17_1));
  r_St_6_Min = if v_11 then true else v_14;
  s_St_6_Min_1 = if v_11 then false else v_13_1;
  s_St_6_Min_2 = if v_11 then false else v_13_2;
  v_14 = if v_12 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_13_1 = if v_12 then true else true;
  v_13_2 = if v_12 then true else false;
  v_12 = not(((c2 when true(ck_1)) when false(ck_2_1)));
  v_11 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_13_2_1 = (v_13_2 when true(v_13_1));
  v_13_2_0 = (v_13_2 when false(v_13_1));
  r_St_6_Max = if v then true else v_10;
  s_St_6_Max_1 = if v then true else v_9_1;
  s_St_6_Max_2 = if v then false else v_9_2;
  v_10 = if v_8 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_9_1 = if v_8 then false else true;
  v_9_2 = if v_8 then false else true;
  v_8 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_9_2_1 = (v_9_2 when true(v_9_1));
  v_9_2_0 = (v_9_2 when false(v_9_1));
  v_246 = merge ck_2_1 (true -> s_St_6_Max_1)(false -> s_St_6_Min_1);
  v_247 = merge ck_2_1 (true -> s_St_6_Max_2)(false -> s_St_6_Min_2);
  v_248 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_6_Off_1);
  v_249 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_6_Off_2);
  s_1 = merge ck_1 (true -> v_246)(false -> v_248);
  s_2 = merge ck_1 (true -> v_247)(false -> v_249);
  v_250 = merge ck_2_1 (true -> r_St_6_Max)(false -> r_St_6_Min);
  v_251 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_6_Off);
  r = merge ck_1 (true -> v_250)(false -> v_251);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_6_Off_2_1 = (s_St_6_Off_2 when true(s_St_6_Off_1));
  s_St_6_Off_2_0 = (s_St_6_Off_2 when false(s_St_6_Off_1));
  s_St_6_Min_2_1 = (s_St_6_Min_2 when true(s_St_6_Min_1));
  s_St_6_Min_2_0 = (s_St_6_Min_2 when false(s_St_6_Min_1));
  s_St_6_Max_2_1 = (s_St_6_Max_2 when true(s_St_6_Max_1));
  s_St_6_Max_2_0 = (s_St_6_Max_2 when false(s_St_6_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node day_shift(change : bool) returns (night : bool)
var nr_St_7_Noite : bool; ns_St_7_Noite_1 : bool; night_St_7_Noite : bool;
    nr_St_7_Dia : bool; ns_St_7_Dia_1 : bool; night_St_7_Dia : bool;
    ck_8_1 : bool; r_St_7_Noite : bool; s_St_7_Noite_1 : bool;
    r_St_7_Dia : bool; s_St_7_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  night_St_7_Dia = false;
  nr_St_7_Dia = false;
  ns_St_7_Dia_1 = true;
  night_St_7_Noite = true;
  nr_St_7_Noite = false;
  ns_St_7_Noite_1 = false;
  night = merge ck_8_1 (true -> night_St_7_Dia)(false -> night_St_7_Noite);
  ns_1 = merge ck_8_1 (true -> ns_St_7_Dia_1)(false -> ns_St_7_Noite_1);
  nr = merge ck_8_1 (true -> nr_St_7_Dia)(false -> nr_St_7_Noite);
  ck_1 = true fby ns_1;
  r_St_7_Dia =
    if (change when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_7_Dia_1 = if (change when true(ck_1)) then false else true;
  r_St_7_Noite =
    if (change when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_7_Noite_1 = if (change when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_7_Dia_1)(false -> s_St_7_Noite_1);
  r = merge ck_1 (true -> r_St_7_Dia)(false -> r_St_7_Noite)
tel

node fail(failed_recovered : bool) returns (failed : bool)
var nr_St_8_Falha : bool; ns_St_8_Falha_1 : bool; failed_St_8_Falha : bool;
    nr_St_8_Funcionando : bool; ns_St_8_Funcionando_1 : bool;
    failed_St_8_Funcionando : bool; ck_9_1 : bool; r_St_8_Falha : bool;
    s_St_8_Falha_1 : bool; r_St_8_Funcionando : bool;
    s_St_8_Funcionando_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool;
    r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_9_1 = s_1;
  failed_St_8_Funcionando = false;
  nr_St_8_Funcionando = false;
  ns_St_8_Funcionando_1 = false;
  failed_St_8_Falha = true;
  nr_St_8_Falha = false;
  ns_St_8_Falha_1 = true;
  failed =
    merge ck_9_1
      (true -> failed_St_8_Falha)(false -> failed_St_8_Funcionando);
  ns_1 =
    merge ck_9_1 (true -> ns_St_8_Falha_1)(false -> ns_St_8_Funcionando_1);
  nr = merge ck_9_1 (true -> nr_St_8_Falha)(false -> nr_St_8_Funcionando);
  ck_1 = false fby ns_1;
  r_St_8_Funcionando =
    if (failed_recovered when false(ck_1))
    then true
    else (pnr when false(ck_1));
  s_St_8_Funcionando_1 =
    if (failed_recovered when false(ck_1)) then true else false;
  r_St_8_Falha =
    if (failed_recovered when true(ck_1))
    then true
    else (pnr when true(ck_1));
  s_St_8_Falha_1 = if (failed_recovered when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_8_Falha_1)(false -> s_St_8_Funcionando_1);
  r = merge ck_1 (true -> r_St_8_Falha)(false -> r_St_8_Funcionando)
tel

node light_source_fail(sw : bool; c1 : bool; c2 : bool;
                        failed_recovered : bool)
returns (out : int)
var nr_St_9_Falha : bool; ns_St_9_Falha_1 : bool; failed_1_St_9_Falha : bool;
    nr_St_9_Funcionando : bool; ns_St_9_Funcionando_1 : bool;
    failed_1_St_9_Funcionando : bool; ck_13_1 : bool; r_St_9_Falha : bool;
    s_St_9_Falha_1 : bool; r_St_9_Funcionando : bool;
    s_St_9_Funcionando_1 : bool; ck_12_1 : bool; nr_1_St_10_On : bool;
    ns_1_St_10_On_1 : bool; light_source_on_St_10_On : int;
    nr_1_St_10_Off : bool; ns_1_St_10_Off_1 : bool;
    light_source_on_St_10_Off : int; ck_11_1 : bool; v_23 : bool;
    v_22 : bool; v_21 : bool; v_20 : bool; v_19 : bool; v : bool;
    r_1_St_10_On : bool; s_1_St_10_On_1 : bool; r_1_St_10_Off : bool;
    s_1_St_10_Off_1 : bool; ck_10_1 : bool; out_false : int; out_true : int;
    ck : bool; s_1_1 : bool; ns_1_1 : bool; r_1 : bool; nr_1 : bool;
    pnr_1 : bool; s_1_2 : bool; ns_1_2 : bool; r : bool; nr : bool;
    pnr : bool; failed_recovered_1 : bool; failed_1 : bool; sw_1 : bool;
    c1_1 : bool; c2_1 : bool; light_source_on : int; light_source : int;
    failed : bool;
let
  failed_recovered_1 = failed_recovered;
  pnr = false fby nr;
  ck_13_1 = s_1_2;
  failed_1_St_9_Funcionando = false;
  nr_St_9_Funcionando = false;
  ns_St_9_Funcionando_1 = false;
  failed_1_St_9_Falha = true;
  nr_St_9_Falha = false;
  ns_St_9_Falha_1 = true;
  failed_1 =
    merge ck_13_1
      (true -> failed_1_St_9_Falha)(false -> failed_1_St_9_Funcionando);
  ns_1_2 =
    merge ck_13_1 (true -> ns_St_9_Falha_1)(false -> ns_St_9_Funcionando_1);
  nr = merge ck_13_1 (true -> nr_St_9_Falha)(false -> nr_St_9_Funcionando);
  ck_12_1 = false fby ns_1_2;
  r_St_9_Funcionando =
    if (failed_recovered_1 when false(ck_12_1))
    then true
    else (pnr when false(ck_12_1));
  s_St_9_Funcionando_1 =
    if (failed_recovered_1 when false(ck_12_1)) then true else false;
  r_St_9_Falha =
    if (failed_recovered_1 when true(ck_12_1))
    then true
    else (pnr when true(ck_12_1));
  s_St_9_Falha_1 =
    if (failed_recovered_1 when true(ck_12_1)) then false else true;
  s_1_2 =
    merge ck_12_1 (true -> s_St_9_Falha_1)(false -> s_St_9_Funcionando_1);
  r = merge ck_12_1 (true -> r_St_9_Falha)(false -> r_St_9_Funcionando);
  sw_1 = sw;
  c1_1 = c1;
  c2_1 = c2;
  pnr_1 = false fby nr_1;
  ck_11_1 = s_1_1;
  light_source_on_St_10_Off = 0;
  nr_1_St_10_Off = false;
  ns_1_St_10_Off_1 = true;
  light_source_on_St_10_On = 1;
  nr_1_St_10_On = false;
  ns_1_St_10_On_1 = false;
  light_source_on =
    merge ck_11_1
      (true -> light_source_on_St_10_Off)(false -> light_source_on_St_10_On);
  ns_1_1 = merge ck_11_1 (true -> ns_1_St_10_Off_1)(false -> ns_1_St_10_On_1);
  nr_1 = merge ck_11_1 (true -> nr_1_St_10_Off)(false -> nr_1_St_10_On);
  ck_10_1 = true fby ns_1_1;
  r_1_St_10_Off = if v_23 then true else (pnr_1 when true(ck_10_1));
  s_1_St_10_Off_1 = if v_23 then false else true;
  v_23 = (v_21 or v_22);
  v_22 = not((c2_1 when true(ck_10_1)));
  v_21 = ((c1_1 when true(ck_10_1)) & (sw_1 when true(ck_10_1)));
  r_1_St_10_On = if v_20 then true else (pnr_1 when false(ck_10_1));
  s_1_St_10_On_1 = if v_20 then true else false;
  v_20 = (v or v_19);
  v_19 = not((c2_1 when false(ck_10_1)));
  v = ((c1_1 when false(ck_10_1)) & (sw_1 when false(ck_10_1)));
  s_1_1 = merge ck_10_1 (true -> s_1_St_10_Off_1)(false -> s_1_St_10_On_1);
  r_1 = merge ck_10_1 (true -> r_1_St_10_Off)(false -> r_1_St_10_On);
  light_source = light_source_on;
  failed = failed_1;
  ck = failed;
  out_true = ((light_source when true(ck)) + 2);
  out_false = (light_source when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node door_fail(c1 : bool; failed_recovered : bool) returns (out : int)
var nr_St_11_Falha : bool; ns_St_11_Falha_1 : bool;
    failed_2_St_11_Falha : bool; nr_St_11_Funcionando : bool;
    ns_St_11_Funcionando_1 : bool; failed_2_St_11_Funcionando : bool;
    ck_17_1 : bool; r_St_11_Falha : bool; s_St_11_Falha_1 : bool;
    r_St_11_Funcionando : bool; s_St_11_Funcionando_1 : bool; ck_16_1 : bool;
    nr_2_St_12_Open : bool; ns_2_St_12_Open_1 : bool;
    door_open_St_12_Open : int; nr_2_St_12_Closed : bool;
    ns_2_St_12_Closed_1 : bool; door_open_St_12_Closed : int; ck_15_1 : bool;
    v_24 : bool; v : bool; r_2_St_12_Open : bool; s_2_St_12_Open_1 : bool;
    r_2_St_12_Closed : bool; s_2_St_12_Closed_1 : bool; ck_14_1 : bool;
    out_false : int; out_true : int; ck : bool; s_2_1 : bool; ns_2_1 : bool;
    r_2 : bool; nr_2 : bool; pnr_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool; failed_recovered_2 : bool; failed_2 : bool;
    c : bool; door_open : int; door : int; failed : bool;
let
  failed_recovered_2 = failed_recovered;
  pnr = false fby nr;
  ck_17_1 = s_1;
  failed_2_St_11_Funcionando = false;
  nr_St_11_Funcionando = false;
  ns_St_11_Funcionando_1 = false;
  failed_2_St_11_Falha = true;
  nr_St_11_Falha = false;
  ns_St_11_Falha_1 = true;
  failed_2 =
    merge ck_17_1
      (true -> failed_2_St_11_Falha)(false -> failed_2_St_11_Funcionando);
  ns_1 =
    merge ck_17_1 (true -> ns_St_11_Falha_1)(false -> ns_St_11_Funcionando_1);
  nr = merge ck_17_1 (true -> nr_St_11_Falha)(false -> nr_St_11_Funcionando);
  ck_16_1 = false fby ns_1;
  r_St_11_Funcionando =
    if (failed_recovered_2 when false(ck_16_1))
    then true
    else (pnr when false(ck_16_1));
  s_St_11_Funcionando_1 =
    if (failed_recovered_2 when false(ck_16_1)) then true else false;
  r_St_11_Falha =
    if (failed_recovered_2 when true(ck_16_1))
    then true
    else (pnr when true(ck_16_1));
  s_St_11_Falha_1 =
    if (failed_recovered_2 when true(ck_16_1)) then false else true;
  s_1 =
    merge ck_16_1 (true -> s_St_11_Falha_1)(false -> s_St_11_Funcionando_1);
  r = merge ck_16_1 (true -> r_St_11_Falha)(false -> r_St_11_Funcionando);
  c = c1;
  pnr_2 = false fby nr_2;
  ck_15_1 = s_2_1;
  door_open_St_12_Closed = 0;
  nr_2_St_12_Closed = false;
  ns_2_St_12_Closed_1 = true;
  door_open_St_12_Open = 1;
  nr_2_St_12_Open = false;
  ns_2_St_12_Open_1 = false;
  door_open =
    merge ck_15_1
      (true -> door_open_St_12_Closed)(false -> door_open_St_12_Open);
  ns_2_1 =
    merge ck_15_1 (true -> ns_2_St_12_Closed_1)(false -> ns_2_St_12_Open_1);
  nr_2 = merge ck_15_1 (true -> nr_2_St_12_Closed)(false -> nr_2_St_12_Open);
  ck_14_1 = true fby ns_2_1;
  r_2_St_12_Closed = if v_24 then true else (pnr_2 when true(ck_14_1));
  s_2_St_12_Closed_1 = if v_24 then false else true;
  v_24 = not((c when true(ck_14_1)));
  r_2_St_12_Open = if v then true else (pnr_2 when false(ck_14_1));
  s_2_St_12_Open_1 = if v then true else false;
  v = not((c when false(ck_14_1)));
  s_2_1 =
    merge ck_14_1 (true -> s_2_St_12_Closed_1)(false -> s_2_St_12_Open_1);
  r_2 = merge ck_14_1 (true -> r_2_St_12_Closed)(false -> r_2_St_12_Open);
  door = door_open;
  failed = failed_2;
  ck = failed;
  out_true = ((door when true(ck)) + 2);
  out_false = (door when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node closet_fail(c1 : bool; failed_recovered : bool) returns (out : int)
var nr_St_13_Falha : bool; ns_St_13_Falha_1 : bool;
    failed_3_St_13_Falha : bool; nr_St_13_Funcionando : bool;
    ns_St_13_Funcionando_1 : bool; failed_3_St_13_Funcionando : bool;
    ck_21_1 : bool; r_St_13_Falha : bool; s_St_13_Falha_1 : bool;
    r_St_13_Funcionando : bool; s_St_13_Funcionando_1 : bool; ck_20_1 : bool;
    nr_3_St_14_Open : bool; ns_3_St_14_Open_1 : bool;
    closet_open_St_14_Open : int; nr_3_St_14_Locked : bool;
    ns_3_St_14_Locked_1 : bool; closet_open_St_14_Locked : int;
    ck_19_1 : bool; v : bool; r_3_St_14_Open : bool; s_3_St_14_Open_1 : bool;
    r_3_St_14_Locked : bool; s_3_St_14_Locked_1 : bool; ck_18_1 : bool;
    out_false : int; out_true : int; ck : bool; s_3_1 : bool; ns_3_1 : bool;
    r_3 : bool; nr_3 : bool; pnr_3 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool; failed_recovered_3 : bool; failed_3 : bool;
    c : bool; closet_open : int; closet : int; failed : bool;
let
  failed_recovered_3 = failed_recovered;
  pnr = false fby nr;
  ck_21_1 = s_1;
  failed_3_St_13_Funcionando = false;
  nr_St_13_Funcionando = false;
  ns_St_13_Funcionando_1 = false;
  failed_3_St_13_Falha = true;
  nr_St_13_Falha = false;
  ns_St_13_Falha_1 = true;
  failed_3 =
    merge ck_21_1
      (true -> failed_3_St_13_Falha)(false -> failed_3_St_13_Funcionando);
  ns_1 =
    merge ck_21_1 (true -> ns_St_13_Falha_1)(false -> ns_St_13_Funcionando_1);
  nr = merge ck_21_1 (true -> nr_St_13_Falha)(false -> nr_St_13_Funcionando);
  ck_20_1 = false fby ns_1;
  r_St_13_Funcionando =
    if (failed_recovered_3 when false(ck_20_1))
    then true
    else (pnr when false(ck_20_1));
  s_St_13_Funcionando_1 =
    if (failed_recovered_3 when false(ck_20_1)) then true else false;
  r_St_13_Falha =
    if (failed_recovered_3 when true(ck_20_1))
    then true
    else (pnr when true(ck_20_1));
  s_St_13_Falha_1 =
    if (failed_recovered_3 when true(ck_20_1)) then false else true;
  s_1 =
    merge ck_20_1 (true -> s_St_13_Falha_1)(false -> s_St_13_Funcionando_1);
  r = merge ck_20_1 (true -> r_St_13_Falha)(false -> r_St_13_Funcionando);
  c = c1;
  pnr_3 = false fby nr_3;
  ck_19_1 = s_3_1;
  closet_open_St_14_Locked = 0;
  nr_3_St_14_Locked = false;
  ns_3_St_14_Locked_1 = true;
  closet_open_St_14_Open = 1;
  nr_3_St_14_Open = false;
  ns_3_St_14_Open_1 = false;
  closet_open =
    merge ck_19_1
      (true -> closet_open_St_14_Locked)(false -> closet_open_St_14_Open);
  ns_3_1 =
    merge ck_19_1 (true -> ns_3_St_14_Locked_1)(false -> ns_3_St_14_Open_1);
  nr_3 = merge ck_19_1 (true -> nr_3_St_14_Locked)(false -> nr_3_St_14_Open);
  ck_18_1 = true fby ns_3_1;
  r_3_St_14_Locked = if v then true else (pnr_3 when true(ck_18_1));
  s_3_St_14_Locked_1 = if v then false else true;
  v = not((c when true(ck_18_1)));
  r_3_St_14_Open =
    if (c when false(ck_18_1)) then true else (pnr_3 when false(ck_18_1));
  s_3_St_14_Open_1 = if (c when false(ck_18_1)) then true else false;
  s_3_1 =
    merge ck_18_1 (true -> s_3_St_14_Locked_1)(false -> s_3_St_14_Open_1);
  r_3 = merge ck_18_1 (true -> r_3_St_14_Locked)(false -> r_3_St_14_Open);
  closet = closet_open;
  failed = failed_3;
  ck = failed;
  out_true = ((closet when true(ck)) + 2);
  out_false = (closet when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node computer_fail(c1 : bool; failed_recovered : bool) returns (out : int)
var nr_St_15_Falha : bool; ns_St_15_Falha_1 : bool;
    failed_4_St_15_Falha : bool; nr_St_15_Funcionando : bool;
    ns_St_15_Funcionando_1 : bool; failed_4_St_15_Funcionando : bool;
    ck_25_1 : bool; r_St_15_Falha : bool; s_St_15_Falha_1 : bool;
    r_St_15_Funcionando : bool; s_St_15_Funcionando_1 : bool; ck_24_1 : bool;
    nr_4_St_16_On : bool; ns_4_St_16_On_1 : bool; computer_on_St_16_On : int;
    nr_4_St_16_Off : bool; ns_4_St_16_Off_1 : bool;
    computer_on_St_16_Off : int; ck_23_1 : bool; v_25 : bool; v : bool;
    r_4_St_16_On : bool; s_4_St_16_On_1 : bool; r_4_St_16_Off : bool;
    s_4_St_16_Off_1 : bool; ck_22_1 : bool; out_false : int; out_true : int;
    ck : bool; s_4_1 : bool; ns_4_1 : bool; r_4 : bool; nr_4 : bool;
    pnr_4 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
    failed_recovered_4 : bool; failed_4 : bool; c : bool; computer_on : int;
    computer : int; failed : bool;
let
  failed_recovered_4 = failed_recovered;
  pnr = false fby nr;
  ck_25_1 = s_1;
  failed_4_St_15_Funcionando = false;
  nr_St_15_Funcionando = false;
  ns_St_15_Funcionando_1 = false;
  failed_4_St_15_Falha = true;
  nr_St_15_Falha = false;
  ns_St_15_Falha_1 = true;
  failed_4 =
    merge ck_25_1
      (true -> failed_4_St_15_Falha)(false -> failed_4_St_15_Funcionando);
  ns_1 =
    merge ck_25_1 (true -> ns_St_15_Falha_1)(false -> ns_St_15_Funcionando_1);
  nr = merge ck_25_1 (true -> nr_St_15_Falha)(false -> nr_St_15_Funcionando);
  ck_24_1 = false fby ns_1;
  r_St_15_Funcionando =
    if (failed_recovered_4 when false(ck_24_1))
    then true
    else (pnr when false(ck_24_1));
  s_St_15_Funcionando_1 =
    if (failed_recovered_4 when false(ck_24_1)) then true else false;
  r_St_15_Falha =
    if (failed_recovered_4 when true(ck_24_1))
    then true
    else (pnr when true(ck_24_1));
  s_St_15_Falha_1 =
    if (failed_recovered_4 when true(ck_24_1)) then false else true;
  s_1 =
    merge ck_24_1 (true -> s_St_15_Falha_1)(false -> s_St_15_Funcionando_1);
  r = merge ck_24_1 (true -> r_St_15_Falha)(false -> r_St_15_Funcionando);
  c = c1;
  pnr_4 = false fby nr_4;
  ck_23_1 = s_4_1;
  computer_on_St_16_Off = 0;
  nr_4_St_16_Off = false;
  ns_4_St_16_Off_1 = true;
  computer_on_St_16_On = 1;
  nr_4_St_16_On = false;
  ns_4_St_16_On_1 = false;
  computer_on =
    merge ck_23_1
      (true -> computer_on_St_16_Off)(false -> computer_on_St_16_On);
  ns_4_1 = merge ck_23_1 (true -> ns_4_St_16_Off_1)(false -> ns_4_St_16_On_1);
  nr_4 = merge ck_23_1 (true -> nr_4_St_16_Off)(false -> nr_4_St_16_On);
  ck_22_1 = true fby ns_4_1;
  r_4_St_16_Off = if v_25 then true else (pnr_4 when true(ck_22_1));
  s_4_St_16_Off_1 = if v_25 then false else true;
  v_25 = not((c when true(ck_22_1)));
  r_4_St_16_On = if v then true else (pnr_4 when false(ck_22_1));
  s_4_St_16_On_1 = if v then true else false;
  v = not((c when false(ck_22_1)));
  s_4_1 = merge ck_22_1 (true -> s_4_St_16_Off_1)(false -> s_4_St_16_On_1);
  r_4 = merge ck_22_1 (true -> r_4_St_16_Off)(false -> r_4_St_16_On);
  computer = computer_on;
  failed = failed_4;
  ck = failed;
  out_true = ((computer when true(ck)) + 2);
  out_false = (computer when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node window_fail(c1 : bool; failed_recovered : bool) returns (out : int)
var nr_St_17_Falha : bool; ns_St_17_Falha_1 : bool;
    failed_5_St_17_Falha : bool; nr_St_17_Funcionando : bool;
    ns_St_17_Funcionando_1 : bool; failed_5_St_17_Funcionando : bool;
    ck_29_1 : bool; r_St_17_Falha : bool; s_St_17_Falha_1 : bool;
    r_St_17_Funcionando : bool; s_St_17_Funcionando_1 : bool; ck_28_1 : bool;
    nr_5_St_18_Open : bool; ns_5_St_18_Open_1 : bool;
    window_open_St_18_Open : int; nr_5_St_18_Closed : bool;
    ns_5_St_18_Closed_1 : bool; window_open_St_18_Closed : int;
    ck_27_1 : bool; v : bool; r_5_St_18_Open : bool; s_5_St_18_Open_1 : bool;
    r_5_St_18_Closed : bool; s_5_St_18_Closed_1 : bool; ck_26_1 : bool;
    out_false : int; out_true : int; ck : bool; s_5_1 : bool; ns_5_1 : bool;
    r_5 : bool; nr_5 : bool; pnr_5 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool; failed_recovered_5 : bool; failed_5 : bool;
    c : bool; window_open : int; window : int; failed : bool;
let
  failed_recovered_5 = failed_recovered;
  pnr = false fby nr;
  ck_29_1 = s_1;
  failed_5_St_17_Funcionando = false;
  nr_St_17_Funcionando = false;
  ns_St_17_Funcionando_1 = false;
  failed_5_St_17_Falha = true;
  nr_St_17_Falha = false;
  ns_St_17_Falha_1 = true;
  failed_5 =
    merge ck_29_1
      (true -> failed_5_St_17_Falha)(false -> failed_5_St_17_Funcionando);
  ns_1 =
    merge ck_29_1 (true -> ns_St_17_Falha_1)(false -> ns_St_17_Funcionando_1);
  nr = merge ck_29_1 (true -> nr_St_17_Falha)(false -> nr_St_17_Funcionando);
  ck_28_1 = false fby ns_1;
  r_St_17_Funcionando =
    if (failed_recovered_5 when false(ck_28_1))
    then true
    else (pnr when false(ck_28_1));
  s_St_17_Funcionando_1 =
    if (failed_recovered_5 when false(ck_28_1)) then true else false;
  r_St_17_Falha =
    if (failed_recovered_5 when true(ck_28_1))
    then true
    else (pnr when true(ck_28_1));
  s_St_17_Falha_1 =
    if (failed_recovered_5 when true(ck_28_1)) then false else true;
  s_1 =
    merge ck_28_1 (true -> s_St_17_Falha_1)(false -> s_St_17_Funcionando_1);
  r = merge ck_28_1 (true -> r_St_17_Falha)(false -> r_St_17_Funcionando);
  c = c1;
  pnr_5 = false fby nr_5;
  ck_27_1 = s_5_1;
  window_open_St_18_Closed = 0;
  nr_5_St_18_Closed = false;
  ns_5_St_18_Closed_1 = true;
  window_open_St_18_Open = 1;
  nr_5_St_18_Open = false;
  ns_5_St_18_Open_1 = false;
  window_open =
    merge ck_27_1
      (true -> window_open_St_18_Closed)(false -> window_open_St_18_Open);
  ns_5_1 =
    merge ck_27_1 (true -> ns_5_St_18_Closed_1)(false -> ns_5_St_18_Open_1);
  nr_5 = merge ck_27_1 (true -> nr_5_St_18_Closed)(false -> nr_5_St_18_Open);
  ck_26_1 = true fby ns_5_1;
  r_5_St_18_Closed = if v then true else (pnr_5 when true(ck_26_1));
  s_5_St_18_Closed_1 = if v then false else true;
  v = not((c when true(ck_26_1)));
  r_5_St_18_Open =
    if (c when false(ck_26_1)) then true else (pnr_5 when false(ck_26_1));
  s_5_St_18_Open_1 = if (c when false(ck_26_1)) then true else false;
  s_5_1 =
    merge ck_26_1 (true -> s_5_St_18_Closed_1)(false -> s_5_St_18_Open_1);
  r_5 = merge ck_26_1 (true -> r_5_St_18_Closed)(false -> r_5_St_18_Open);
  window = window_open;
  failed = failed_5;
  ck = failed;
  out_true = ((window when true(ck)) + 2);
  out_false = (window when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node air_fail(c1 : bool; c2 : bool; failed_recovered : bool)
returns (out : int)
var nr_St_19_Falha : bool; ns_St_19_Falha_1 : bool;
    failed_6_St_19_Falha : bool; nr_St_19_Funcionando : bool;
    ns_St_19_Funcionando_1 : bool; failed_6_St_19_Funcionando : bool;
    ck_33_1 : bool; r_St_19_Falha : bool; s_St_19_Falha_1 : bool;
    r_St_19_Funcionando : bool; s_St_19_Funcionando_1 : bool; ck_32_1 : bool;
    v_259 : bool; v_258 : bool; v_257 : bool; v_256 : bool; v_255 : bool;
    v_254 : bool; v_253 : int; v_252 : int; ns_6_St_20_Max_2_0 : bool;
    ns_6_St_20_Max_2_1 : bool; ns_6_St_20_Min_2_0 : bool;
    ns_6_St_20_Min_2_1 : bool; ns_6_St_20_Off_2_0 : bool;
    ns_6_St_20_Off_2_1 : bool; ck_31_2_0 : bool; ck_31_2_1 : bool;
    nr_6_St_20_Max : bool; ns_6_St_20_Max_2 : bool; ns_6_St_20_Max_1 : bool;
    air_state_1_St_20_Max : int; nr_6_St_20_Min : bool;
    ns_6_St_20_Min_2 : bool; ns_6_St_20_Min_1 : bool;
    air_state_1_St_20_Min : int; nr_6_St_20_Off : bool;
    ns_6_St_20_Off_2 : bool; ns_6_St_20_Off_1 : bool;
    air_state_1_St_20_Off : int; ck_31_2 : bool; ck_31_1 : bool;
    v_35_2_0 : bool; v_35_2_1 : bool; v_36 : bool; v_35_2 : bool;
    v_35_1 : bool; v_34 : bool; v_33 : bool; v_31_2_0 : bool;
    v_31_2_1 : bool; v_32 : bool; v_31_2 : bool; v_31_1 : bool; v_30 : bool;
    v_29 : bool; v_27_2_0 : bool; v_27_2_1 : bool; v_28 : bool;
    v_27_2 : bool; v_27_1 : bool; v_26 : bool; v : bool; v_267 : bool;
    v_266 : bool; v_265 : bool; v_264 : bool; v_263 : bool; v_262 : bool;
    v_261 : bool; v_260 : bool; s_6_St_20_Max_2_0 : bool;
    s_6_St_20_Max_2_1 : bool; s_6_St_20_Min_2_0 : bool;
    s_6_St_20_Min_2_1 : bool; s_6_St_20_Off_2_0 : bool;
    s_6_St_20_Off_2_1 : bool; ck_30_2_0 : bool; ck_30_2_1 : bool;
    r_6_St_20_Max : bool; s_6_St_20_Max_2 : bool; s_6_St_20_Max_1 : bool;
    r_6_St_20_Min : bool; s_6_St_20_Min_2 : bool; s_6_St_20_Min_1 : bool;
    r_6_St_20_Off : bool; s_6_St_20_Off_2 : bool; s_6_St_20_Off_1 : bool;
    ck_30_2 : bool; ck_30_1 : bool; out_false : int; out_true : int;
    ck : bool; s_6_2_0 : bool; s_6_2_1 : bool; ns_6_2_0 : bool;
    ns_6_2_1 : bool; s_6_2 : bool; s_6_1 : bool; ns_6_2 : bool;
    ns_6_1 : bool; r_6 : bool; nr_6 : bool; pnr_6 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool; failed_recovered_6 : bool;
    failed_6 : bool; c1_2 : bool; c2_2 : bool; air_state_1 : int;
    air_state : int; failed : bool;
let
  failed_recovered_6 = failed_recovered;
  pnr = false fby nr;
  ck_33_1 = s_1;
  failed_6_St_19_Funcionando = false;
  nr_St_19_Funcionando = false;
  ns_St_19_Funcionando_1 = false;
  failed_6_St_19_Falha = true;
  nr_St_19_Falha = false;
  ns_St_19_Falha_1 = true;
  failed_6 =
    merge ck_33_1
      (true -> failed_6_St_19_Falha)(false -> failed_6_St_19_Funcionando);
  ns_1 =
    merge ck_33_1 (true -> ns_St_19_Falha_1)(false -> ns_St_19_Funcionando_1);
  nr = merge ck_33_1 (true -> nr_St_19_Falha)(false -> nr_St_19_Funcionando);
  ck_32_1 = false fby ns_1;
  r_St_19_Funcionando =
    if (failed_recovered_6 when false(ck_32_1))
    then true
    else (pnr when false(ck_32_1));
  s_St_19_Funcionando_1 =
    if (failed_recovered_6 when false(ck_32_1)) then true else false;
  r_St_19_Falha =
    if (failed_recovered_6 when true(ck_32_1))
    then true
    else (pnr when true(ck_32_1));
  s_St_19_Falha_1 =
    if (failed_recovered_6 when true(ck_32_1)) then false else true;
  s_1 =
    merge ck_32_1 (true -> s_St_19_Falha_1)(false -> s_St_19_Funcionando_1);
  r = merge ck_32_1 (true -> r_St_19_Falha)(false -> r_St_19_Funcionando);
  c1_2 = c1;
  c2_2 = c2;
  pnr_6 = false fby nr_6;
  ck_31_1 = s_6_1;
  ck_31_2 = s_6_2;
  air_state_1_St_20_Off = 0;
  nr_6_St_20_Off = false;
  ns_6_St_20_Off_1 = false;
  ns_6_St_20_Off_2 = false;
  air_state_1_St_20_Min = 1;
  nr_6_St_20_Min = false;
  ns_6_St_20_Min_1 = true;
  ns_6_St_20_Min_2 = false;
  air_state_1_St_20_Max = 2;
  nr_6_St_20_Max = false;
  ns_6_St_20_Max_1 = true;
  ns_6_St_20_Max_2 = true;
  v_252 =
    merge ck_31_2_1
      (true -> air_state_1_St_20_Max)(false -> air_state_1_St_20_Min);
  v_253 =
    merge ck_31_2_0
      (true -> ((0 when false(ck_31_1)) when true(ck_31_2_0)))
      (false -> air_state_1_St_20_Off);
  air_state_1 = merge ck_31_1 (true -> v_252)(false -> v_253);
  v_254 =
    merge ck_31_2_1 (true -> ns_6_St_20_Max_1)(false -> ns_6_St_20_Min_1);
  v_255 =
    merge ck_31_2_1 (true -> ns_6_St_20_Max_2)(false -> ns_6_St_20_Min_2);
  v_256 =
    merge ck_31_2_0
      (true -> ((true when false(ck_31_1)) when true(ck_31_2_0)))
      (false -> ns_6_St_20_Off_1);
  v_257 =
    merge ck_31_2_0
      (true -> ((true when false(ck_31_1)) when true(ck_31_2_0)))
      (false -> ns_6_St_20_Off_2);
  ns_6_1 = merge ck_31_1 (true -> v_254)(false -> v_256);
  ns_6_2 = merge ck_31_1 (true -> v_255)(false -> v_257);
  v_258 = merge ck_31_2_1 (true -> nr_6_St_20_Max)(false -> nr_6_St_20_Min);
  v_259 =
    merge ck_31_2_0
      (true -> ((true when false(ck_31_1)) when true(ck_31_2_0)))
      (false -> nr_6_St_20_Off);
  nr_6 = merge ck_31_1 (true -> v_258)(false -> v_259);
  ck_31_2_1 = (ck_31_2 when true(ck_31_1));
  ck_31_2_0 = (ck_31_2 when false(ck_31_1));
  ns_6_St_20_Off_2_1 = (ns_6_St_20_Off_2 when true(ns_6_St_20_Off_1));
  ns_6_St_20_Off_2_0 = (ns_6_St_20_Off_2 when false(ns_6_St_20_Off_1));
  ns_6_St_20_Min_2_1 = (ns_6_St_20_Min_2 when true(ns_6_St_20_Min_1));
  ns_6_St_20_Min_2_0 = (ns_6_St_20_Min_2 when false(ns_6_St_20_Min_1));
  ns_6_St_20_Max_2_1 = (ns_6_St_20_Max_2 when true(ns_6_St_20_Max_1));
  ns_6_St_20_Max_2_0 = (ns_6_St_20_Max_2 when false(ns_6_St_20_Max_1));
  v_260 = false fby ns_6_1;
  v_261 = false fby ns_6_2;
  ck_30_1 = v_260;
  ck_30_2 = v_261;
  r_6_St_20_Off = if v_33 then true else v_36;
  s_6_St_20_Off_1 = if v_33 then true else v_35_1;
  s_6_St_20_Off_2 = if v_33 then false else v_35_2;
  v_36 =
    if v_34
    then true
    else ((pnr_6 when false(ck_30_1)) when false(ck_30_2_0));
  v_35_1 = if v_34 then true else false;
  v_35_2 = if v_34 then true else false;
  v_34 = not(((c2_2 when false(ck_30_1)) when false(ck_30_2_0)));
  v_33 = not(((c1_2 when false(ck_30_1)) when false(ck_30_2_0)));
  v_35_2_1 = (v_35_2 when true(v_35_1));
  v_35_2_0 = (v_35_2 when false(v_35_1));
  r_6_St_20_Min = if v_29 then true else v_32;
  s_6_St_20_Min_1 = if v_29 then false else v_31_1;
  s_6_St_20_Min_2 = if v_29 then false else v_31_2;
  v_32 =
    if v_30 then true else ((pnr_6 when true(ck_30_1)) when false(ck_30_2_1));
  v_31_1 = if v_30 then true else true;
  v_31_2 = if v_30 then true else false;
  v_30 = not(((c2_2 when true(ck_30_1)) when false(ck_30_2_1)));
  v_29 = not(((c1_2 when true(ck_30_1)) when false(ck_30_2_1)));
  v_31_2_1 = (v_31_2 when true(v_31_1));
  v_31_2_0 = (v_31_2 when false(v_31_1));
  r_6_St_20_Max = if v then true else v_28;
  s_6_St_20_Max_1 = if v then true else v_27_1;
  s_6_St_20_Max_2 = if v then false else v_27_2;
  v_28 =
    if v_26 then true else ((pnr_6 when true(ck_30_1)) when true(ck_30_2_1));
  v_27_1 = if v_26 then false else true;
  v_27_2 = if v_26 then false else true;
  v_26 = not(((c2_2 when true(ck_30_1)) when true(ck_30_2_1)));
  v = not(((c1_2 when true(ck_30_1)) when true(ck_30_2_1)));
  v_27_2_1 = (v_27_2 when true(v_27_1));
  v_27_2_0 = (v_27_2 when false(v_27_1));
  v_262 = merge ck_30_2_1 (true -> s_6_St_20_Max_1)(false -> s_6_St_20_Min_1);
  v_263 = merge ck_30_2_1 (true -> s_6_St_20_Max_2)(false -> s_6_St_20_Min_2);
  v_264 =
    merge ck_30_2_0
      (true -> ((true when false(ck_30_1)) when true(ck_30_2_0)))
      (false -> s_6_St_20_Off_1);
  v_265 =
    merge ck_30_2_0
      (true -> ((true when false(ck_30_1)) when true(ck_30_2_0)))
      (false -> s_6_St_20_Off_2);
  s_6_1 = merge ck_30_1 (true -> v_262)(false -> v_264);
  s_6_2 = merge ck_30_1 (true -> v_263)(false -> v_265);
  v_266 = merge ck_30_2_1 (true -> r_6_St_20_Max)(false -> r_6_St_20_Min);
  v_267 =
    merge ck_30_2_0
      (true -> ((true when false(ck_30_1)) when true(ck_30_2_0)))
      (false -> r_6_St_20_Off);
  r_6 = merge ck_30_1 (true -> v_266)(false -> v_267);
  ck_30_2_1 = (ck_30_2 when true(ck_30_1));
  ck_30_2_0 = (ck_30_2 when false(ck_30_1));
  s_6_St_20_Off_2_1 = (s_6_St_20_Off_2 when true(s_6_St_20_Off_1));
  s_6_St_20_Off_2_0 = (s_6_St_20_Off_2 when false(s_6_St_20_Off_1));
  s_6_St_20_Min_2_1 = (s_6_St_20_Min_2 when true(s_6_St_20_Min_1));
  s_6_St_20_Min_2_0 = (s_6_St_20_Min_2 when false(s_6_St_20_Min_1));
  s_6_St_20_Max_2_1 = (s_6_St_20_Max_2 when true(s_6_St_20_Max_1));
  s_6_St_20_Max_2_0 = (s_6_St_20_Max_2 when false(s_6_St_20_Max_1));
  air_state = air_state_1;
  failed = failed_6;
  ck = failed;
  out_true = ((air_state when true(ck)) + 3);
  out_false = (air_state when false(ck));
  out = merge ck (false -> out_false)(true -> out_true);
  ns_6_2_1 = (ns_6_2 when true(ns_6_1));
  ns_6_2_0 = (ns_6_2 when false(ns_6_1));
  s_6_2_1 = (s_6_2 when true(s_6_1));
  s_6_2_0 = (s_6_2 when false(s_6_1))
tel

node controller(change_shift : bool; worker : bool; cleaner : bool;
                 air_failed_recovered : bool; light_switch : bool;
                 light_failed_recovered : bool; blind_switch : bool;
                 blind_failed_recovered : bool; door_failed_recovered : bool;
                 closet_failed_recovered : bool; pc_failed_recovered : bool;
                 window_failed_recovered : bool)
returns (night : bool; worker_presence : bool; cleaner_presence : bool;
          door_status : int; pc_status : int; window_status : int;
          closet_status : int; air_status : int; light_status : int;
          blind_status : int)
contract
  var rule8_5 : bool; rule8 : bool; rule7_5 : bool; rule7 : bool;
      rule6_4 : bool; rule6_3 : bool; rule6_2 : bool; rule6_1 : bool;
      rule6 : bool; rule5 : bool; rule2 : bool; rule1_3 : bool;
      rule1_2 : bool; rule1_1 : bool; rule1 : bool; rule0 : bool; v : bool;
      v_37 : bool; v_38 : bool; v_39 : bool; v_40 : bool; v_41 : bool;
      v_42 : bool; v_43 : bool; v_44 : bool; v_45 : bool; v_46 : bool;
      v_47 : bool; v_48 : bool; v_49 : bool; v_50 : bool; v_51 : bool;
      v_52 : bool; v_53 : bool; v_54 : bool; v_55 : bool; v_56 : bool;
      v_57 : bool; v_58 : bool; v_59 : bool; v_60 : bool; v_61 : bool;
      v_62 : bool; v_63 : bool; v_64 : bool; v_65 : bool; v_66 : bool;
      v_67 : bool; v_68 : bool; v_69 : bool; v_70 : bool; v_71 : bool;
      v_72 : bool; v_73 : bool; v_74 : bool; v_75 : bool; v_76 : bool;
      v_77 : bool; v_78 : bool; v_79 : bool; v_80 : bool; v_81 : bool;
      v_82 : bool; v_83 : bool; v_84 : bool; v_85 : bool; v_86 : bool;
      v_87 : bool; v_88 : bool; v_89 : bool; v_90 : bool; v_91 : bool;
      v_92 : bool; v_93 : bool; v_94 : bool; v_95 : bool; v_96 : bool;
      v_97 : bool; v_98 : bool; v_99 : bool; v_100 : bool; v_101 : bool;
      v_102 : bool; v_103 : bool; v_104 : bool; v_105 : bool; v_106 : bool;
      v_107 : bool; v_108 : bool; v_109 : bool; v_110 : bool; v_111 : bool;
      v_112 : bool; v_113 : bool; v_114 : bool; v_115 : bool; v_116 : bool;
      v_117 : bool; v_118 : bool; v_119 : bool; v_120 : bool; v_121 : bool;
      v_122 : bool; v_123 : bool; v_124 : bool; v_125 : bool; v_126 : bool;
      v_127 : bool; v_128 : bool; v_129 : bool; v_130 : bool; v_131 : bool;
      v_132 : bool; v_133 : bool; v_134 : bool; v_135 : bool; v_136 : bool;
      v_137 : bool; v_138 : bool; v_139 : bool; v_140 : bool; v_141 : bool;
      v_142 : bool; v_143 : bool; v_144 : bool; v_145 : bool; v_146 : bool;
      v_147 : bool; v_148 : bool; v_149 : bool; v_150 : bool; v_151 : bool;
      v_152 : bool; v_153 : bool; v_154 : bool; v_155 : bool; v_156 : bool;
      v_157 : bool; v_158 : bool; v_159 : bool; v_160 : bool; v_161 : bool;
      v_162 : bool; v_163 : bool; v_164 : bool; v_165 : bool; v_166 : bool;
      v_167 : bool; v_168 : bool; v_169 : bool; v_170 : bool; v_171 : bool;
      v_172 : bool; v_173 : bool; v_174 : bool; v_175 : bool; v_176 : bool;
      v_177 : bool; v_178 : bool; v_179 : bool; v_180 : bool; v_181 : bool;
      v_182 : bool; v_183 : bool; v_184 : bool; v_185 : bool; v_186 : bool;
      v_187 : bool; v_188 : bool; v_189 : bool; v_190 : bool; v_191 : bool;
      v_192 : bool; v_193 : bool; v_194 : bool; v_195 : bool; v_196 : bool;
      v_197 : bool; v_198 : bool; v_199 : bool; v_200 : bool; v_201 : bool;
      v_202 : bool; v_203 : bool; v_204 : bool; v_205 : bool;
  let
    v = not(cleaner_presence);
    v_37 = (closet_status <= 1);
    v_38 = (v & v_37);
    v_39 = not(v_38);
    v_40 = (closet_status = 0);
    rule8_5 = (v_39 or v_40);
    v_41 = (closet_status <= 1);
    v_42 = (cleaner_presence & v_41);
    v_43 = not(v_42);
    v_44 = (closet_status = 1);
    rule8 = (v_43 or v_44);
    v_45 = not(worker_presence);
    v_46 = (pc_status <= 1);
    v_47 = (v_45 & v_46);
    v_48 = not(v_47);
    v_49 = (pc_status = 0);
    rule7_5 = (v_48 or v_49);
    v_50 = (pc_status <= 1);
    v_51 = (worker_presence & v_50);
    v_52 = not(v_51);
    v_53 = (pc_status = 1);
    rule7 = (v_52 or v_53);
    v_54 = (worker_presence or cleaner_presence);
    v_55 = (air_status >= 3);
    v_56 = (v_54 & v_55);
    v_57 = (blind_status <= 1);
    v_58 = (v_56 & v_57);
    v_59 = (window_status <= 1);
    v_60 = (v_58 & v_59);
    v_61 = (door_status >= 2);
    v_62 = (v_60 & v_61);
    v_63 = not(v_62);
    v_64 = (blind_status = 1);
    v_65 = (window_status = 1);
    v_66 = (v_64 & v_65);
    v_67 = (door_status = 1);
    v_68 = not(v_67);
    v_69 = (v_66 & v_68);
    rule6_4 = (v_63 or v_69);
    v_70 = (worker_presence or cleaner_presence);
    v_71 = (air_status >= 3);
    v_72 = (v_70 & v_71);
    v_73 = (window_status >= 2);
    v_74 = (v_72 & v_73);
    v_75 = (door_status <= 1);
    v_76 = (v_74 & v_75);
    v_77 = not(v_76);
    v_78 = (door_status = 1);
    rule6_3 = (v_77 or v_78);
    v_79 = (worker_presence or cleaner_presence);
    v_80 = (air_status >= 3);
    v_81 = (v_79 & v_80);
    v_82 = (blind_status >= 2);
    v_83 = (v_81 & v_82);
    v_84 = (door_status <= 1);
    v_85 = (v_83 & v_84);
    v_86 = not(v_85);
    v_87 = (window_status = 1);
    v_88 = not(v_87);
    v_89 = (door_status = 1);
    v_90 = (v_88 & v_89);
    rule6_2 = (v_86 or v_90);
    v_91 = (worker_presence or cleaner_presence);
    v_92 = (air_status >= 3);
    v_93 = (v_91 & v_92);
    v_94 = (blind_status <= 1);
    v_95 = (v_93 & v_94);
    v_96 = (window_status <= 1);
    v_97 = (v_95 & v_96);
    v_98 = (door_status <= 1);
    v_99 = (v_97 & v_98);
    v_100 = not(v_99);
    v_101 = (blind_status = 1);
    v_102 = (window_status = 1);
    v_103 = (v_101 & v_102);
    v_104 = (door_status = 1);
    v_105 = (v_103 & v_104);
    rule6_1 = (v_100 or v_105);
    v_106 = (worker_presence & cleaner_presence);
    v_107 = not(v_106);
    v_108 = (worker_presence or cleaner_presence);
    v_109 = (v_107 & v_108);
    v_110 = (air_status <= 2);
    v_111 = (v_109 & v_110);
    v_112 = not(v_111);
    v_113 = (air_status = 1);
    v_114 = (door_status = 1);
    v_115 = not(v_114);
    v_116 = (v_113 & v_115);
    v_117 = (window_status = 1);
    v_118 = not(v_117);
    v_119 = (v_116 & v_118);
    rule6 = (v_112 or v_119);
    v_120 = (worker_presence & cleaner_presence);
    v_121 = (air_status <= 2);
    v_122 = (v_120 & v_121);
    v_123 = not(v_122);
    v_124 = (air_status = 2);
    rule5 = (v_123 or v_124);
    v_125 = (worker_presence or cleaner_presence);
    v_126 = (light_status <= 1);
    v_127 = (v_125 & v_126);
    v_128 = (blind_status >= 2);
    v_129 = (v_127 & v_128);
    v_130 = not(v_129);
    v_131 = (light_status = 1);
    rule1_2 = (v_130 or v_131);
    v_132 = (worker_presence or cleaner_presence);
    v_133 = (light_status >= 2);
    v_134 = (v_132 & v_133);
    v_135 = (blind_status <= 1);
    v_136 = (v_134 & v_135);
    v_137 = not(v_136);
    v_138 = (blind_status = 1);
    rule1_1 = (v_137 or v_138);
    v_139 = (worker_presence or cleaner_presence);
    v_140 = not(night);
    v_141 = (v_139 & v_140);
    v_142 = (light_status <= 1);
    v_143 = (v_141 & v_142);
    v_144 = (blind_status <= 1);
    v_145 = (v_143 & v_144);
    v_146 = not(v_145);
    v_147 = (light_status = 1);
    v_148 = (blind_status = 1);
    v_149 = (v_147 or v_148);
    rule2 = (v_146 or v_149);
    v_150 = (worker_presence or cleaner_presence);
    v_151 = (v_150 & night);
    v_152 = (light_status >= 2);
    v_153 = (v_151 & v_152);
    v_154 = (blind_status <= 1);
    v_155 = (v_153 & v_154);
    v_156 = not(v_155);
    v_157 = (blind_status = 1);
    rule1_3 = (v_156 or v_157);
    v_158 = (worker_presence or cleaner_presence);
    v_159 = (v_158 & night);
    v_160 = (light_status <= 1);
    v_161 = (v_159 & v_160);
    v_162 = not(v_161);
    v_163 = (light_status = 1);
    rule1 = (v_162 or v_163);
    v_164 = not(worker_presence);
    v_165 = not(cleaner_presence);
    v_166 = (v_164 & v_165);
    v_167 = not(v_166);
    v_168 = (air_status = 1);
    v_169 = not(v_168);
    v_170 = (air_status = 2);
    v_171 = not(v_170);
    v_172 = (v_169 & v_171);
    v_173 = (light_status = 1);
    v_174 = not(v_173);
    v_175 = (v_172 & v_174);
    v_176 = (blind_status = 1);
    v_177 = not(v_176);
    v_178 = (v_175 & v_177);
    v_179 = (door_status = 1);
    v_180 = not(v_179);
    v_181 = (v_178 & v_180);
    v_182 = (pc_status = 1);
    v_183 = not(v_182);
    v_184 = (v_181 & v_183);
    v_185 = (window_status = 1);
    v_186 = not(v_185);
    v_187 = (v_184 & v_186);
    v_188 = (closet_status = 1);
    v_189 = not(v_188);
    v_190 = (v_187 & v_189);
    rule0 = (v_167 or v_190);
    v_191 = (rule1 & rule1_1);
    v_192 = (v_191 & rule1_2);
    v_193 = (v_192 & rule1_3);
    v_194 = (v_193 & rule2);
    v_195 = (v_194 & rule0);
    v_196 = (v_195 & rule5);
    v_197 = (v_196 & rule6);
    v_198 = (v_197 & rule6_1);
    v_199 = (v_198 & rule6_2);
    v_200 = (v_199 & rule6_3);
    v_201 = (v_200 & rule6_4);
    v_202 = (v_201 & rule7);
    v_203 = (v_202 & rule7_5);
    v_204 = (v_203 & rule8);
    v_205 = (v_204 & rule8_5)
  tel
  assume true@ enforce v_205]
                 with (c_blind_2 : bool; c_light_2 : bool; c_blind_1 : bool;
                        c_light_1 : bool; c_closet : bool; c_air_2 : bool;
                        c_air_1 : bool; c_window : bool; c_pc : bool;
                        c_door : bool)
                 var nr_St_21_Falha : bool; ns_St_21_Falha_1 : bool;
                     failed_1_1_St_21_Falha : bool;
                     nr_St_21_Funcionando : bool;
                     ns_St_21_Funcionando_1 : bool;
                     failed_1_1_St_21_Funcionando : bool; ck_73_1 : bool;
                     r_St_21_Falha : bool; s_St_21_Falha_1 : bool;
                     r_St_21_Funcionando : bool;
                     s_St_21_Funcionando_1 : bool; ck_72_1 : bool;
                     nr_7_St_22_On : bool; ns_7_St_22_On_1 : bool;
                     light_source_on_1_St_22_On : int; nr_7_St_22_Off : bool;
                     ns_7_St_22_Off_1 : bool;
                     light_source_on_1_St_22_Off : int; ck_71_1 : bool;
                     v_235 : bool; v_234 : bool; v_233 : bool; v_232 : bool;
                     v_231 : bool; v_230 : bool; r_7_St_22_On : bool;
                     s_7_St_22_On_1 : bool; r_7_St_22_Off : bool;
                     s_7_St_22_Off_1 : bool; ck_70_1 : bool;
                     out_6_false : int; out_6_true : int; ck_69 : bool;
                     nr_8_St_23_Falha : bool; ns_8_St_23_Falha_1 : bool;
                     failed_1_St_23_Falha : bool;
                     nr_8_St_23_Funcionando : bool;
                     ns_8_St_23_Funcionando_1 : bool;
                     failed_1_St_23_Funcionando : bool; ck_68_1 : bool;
                     r_8_St_23_Falha : bool; s_8_St_23_Falha_1 : bool;
                     r_8_St_23_Funcionando : bool;
                     s_8_St_23_Funcionando_1 : bool; ck_67_1 : bool;
                     nr_9_St_24_On : bool; ns_9_St_24_On_1 : bool;
                     light_source_on_St_24_On : int; nr_9_St_24_Off : bool;
                     ns_9_St_24_Off_1 : bool;
                     light_source_on_St_24_Off : int; ck_66_1 : bool;
                     v_229 : bool; v_228 : bool; v_227 : bool; v_226 : bool;
                     v_225 : bool; v_224 : bool; r_9_St_24_On : bool;
                     s_9_St_24_On_1 : bool; r_9_St_24_Off : bool;
                     s_9_St_24_Off_1 : bool; ck_65_1 : bool;
                     out_5_false : int; out_5_true : int; ck_64 : bool;
                     nr_10_St_25_Falha : bool; ns_10_St_25_Falha_1 : bool;
                     failed_3_St_25_Falha : bool;
                     nr_10_St_25_Funcionando : bool;
                     ns_10_St_25_Funcionando_1 : bool;
                     failed_3_St_25_Funcionando : bool; ck_63_1 : bool;
                     r_10_St_25_Falha : bool; s_10_St_25_Falha_1 : bool;
                     r_10_St_25_Funcionando : bool;
                     s_10_St_25_Funcionando_1 : bool; ck_62_1 : bool;
                     nr_11_St_26_Open : bool; ns_11_St_26_Open_1 : bool;
                     closet_open_St_26_Open : int; nr_11_St_26_Locked : bool;
                     ns_11_St_26_Locked_1 : bool;
                     closet_open_St_26_Locked : int; ck_61_1 : bool;
                     v_223 : bool; r_11_St_26_Open : bool;
                     s_11_St_26_Open_1 : bool; r_11_St_26_Locked : bool;
                     s_11_St_26_Locked_1 : bool; ck_60_1 : bool;
                     out_4_false : int; out_4_true : int; ck_59 : bool;
                     nr_12_St_27_Falha : bool; ns_12_St_27_Falha_1 : bool;
                     failed_5_St_27_Falha : bool;
                     nr_12_St_27_Funcionando : bool;
                     ns_12_St_27_Funcionando_1 : bool;
                     failed_5_St_27_Funcionando : bool; ck_58_1 : bool;
                     r_12_St_27_Falha : bool; s_12_St_27_Falha_1 : bool;
                     r_12_St_27_Funcionando : bool;
                     s_12_St_27_Funcionando_1 : bool; ck_57_1 : bool;
                     nr_13_St_28_Open : bool; ns_13_St_28_Open_1 : bool;
                     window_open_St_28_Open : int; nr_13_St_28_Closed : bool;
                     ns_13_St_28_Closed_1 : bool;
                     window_open_St_28_Closed : int; ck_56_1 : bool;
                     v_222 : bool; r_13_St_28_Open : bool;
                     s_13_St_28_Open_1 : bool; r_13_St_28_Closed : bool;
                     s_13_St_28_Closed_1 : bool; ck_55_1 : bool;
                     out_3_false : int; out_3_true : int; ck_54 : bool;
                     nr_14_St_29_Falha : bool; ns_14_St_29_Falha_1 : bool;
                     failed_6_St_29_Falha : bool;
                     nr_14_St_29_Funcionando : bool;
                     ns_14_St_29_Funcionando_1 : bool;
                     failed_6_St_29_Funcionando : bool; ck_53_1 : bool;
                     r_14_St_29_Falha : bool; s_14_St_29_Falha_1 : bool;
                     r_14_St_29_Funcionando : bool;
                     s_14_St_29_Funcionando_1 : bool; ck_52_1 : bool;
                     v_275 : bool; v_274 : bool; v_273 : bool; v_272 : bool;
                     v_271 : bool; v_270 : bool; v_269 : int; v_268 : int;
                     ns_15_St_30_Max_2_0 : bool; ns_15_St_30_Max_2_1 : bool;
                     ns_15_St_30_Min_2_0 : bool; ns_15_St_30_Min_2_1 : bool;
                     ns_15_St_30_Off_2_0 : bool; ns_15_St_30_Off_2_1 : bool;
                     ck_51_2_0 : bool; ck_51_2_1 : bool;
                     nr_15_St_30_Max : bool; ns_15_St_30_Max_2 : bool;
                     ns_15_St_30_Max_1 : bool; air_state_1_St_30_Max : int;
                     nr_15_St_30_Min : bool; ns_15_St_30_Min_2 : bool;
                     ns_15_St_30_Min_1 : bool; air_state_1_St_30_Min : int;
                     nr_15_St_30_Off : bool; ns_15_St_30_Off_2 : bool;
                     ns_15_St_30_Off_1 : bool; air_state_1_St_30_Off : int;
                     ck_51_2 : bool; ck_51_1 : bool; v_220_2_0 : bool;
                     v_220_2_1 : bool; v_221 : bool; v_220_2 : bool;
                     v_220_1 : bool; v_219 : bool; v_218 : bool;
                     v_216_2_0 : bool; v_216_2_1 : bool; v_217 : bool;
                     v_216_2 : bool; v_216_1 : bool; v_215 : bool;
                     v_214 : bool; v_212_2_0 : bool; v_212_2_1 : bool;
                     v_213 : bool; v_212_2 : bool; v_212_1 : bool;
                     v_211 : bool; v_210 : bool; v_283 : bool; v_282 : bool;
                     v_281 : bool; v_280 : bool; v_279 : bool; v_278 : bool;
                     v_277 : bool; v_276 : bool; s_15_St_30_Max_2_0 : bool;
                     s_15_St_30_Max_2_1 : bool; s_15_St_30_Min_2_0 : bool;
                     s_15_St_30_Min_2_1 : bool; s_15_St_30_Off_2_0 : bool;
                     s_15_St_30_Off_2_1 : bool; ck_50_2_0 : bool;
                     ck_50_2_1 : bool; r_15_St_30_Max : bool;
                     s_15_St_30_Max_2 : bool; s_15_St_30_Max_1 : bool;
                     r_15_St_30_Min : bool; s_15_St_30_Min_2 : bool;
                     s_15_St_30_Min_1 : bool; r_15_St_30_Off : bool;
                     s_15_St_30_Off_2 : bool; s_15_St_30_Off_1 : bool;
                     ck_50_2 : bool; ck_50_1 : bool; out_2_false : int;
                     out_2_true : int; ck_49 : bool;
                     nr_16_St_31_Falha : bool; ns_16_St_31_Falha_1 : bool;
                     failed_4_St_31_Falha : bool;
                     nr_16_St_31_Funcionando : bool;
                     ns_16_St_31_Funcionando_1 : bool;
                     failed_4_St_31_Funcionando : bool; ck_48_1 : bool;
                     r_16_St_31_Falha : bool; s_16_St_31_Falha_1 : bool;
                     r_16_St_31_Funcionando : bool;
                     s_16_St_31_Funcionando_1 : bool; ck_47_1 : bool;
                     nr_17_St_32_On : bool; ns_17_St_32_On_1 : bool;
                     computer_on_St_32_On : int; nr_17_St_32_Off : bool;
                     ns_17_St_32_Off_1 : bool; computer_on_St_32_Off : int;
                     ck_46_1 : bool; v_209 : bool; v_208 : bool;
                     r_17_St_32_On : bool; s_17_St_32_On_1 : bool;
                     r_17_St_32_Off : bool; s_17_St_32_Off_1 : bool;
                     ck_45_1 : bool; out_1_false : int; out_1_true : int;
                     ck_44 : bool; nr_18_St_33_Falha : bool;
                     ns_18_St_33_Falha_1 : bool; failed_2_St_33_Falha : bool;
                     nr_18_St_33_Funcionando : bool;
                     ns_18_St_33_Funcionando_1 : bool;
                     failed_2_St_33_Funcionando : bool; ck_43_1 : bool;
                     r_18_St_33_Falha : bool; s_18_St_33_Falha_1 : bool;
                     r_18_St_33_Funcionando : bool;
                     s_18_St_33_Funcionando_1 : bool; ck_42_1 : bool;
                     nr_19_St_34_Open : bool; ns_19_St_34_Open_1 : bool;
                     door_open_St_34_Open : int; nr_19_St_34_Closed : bool;
                     ns_19_St_34_Closed_1 : bool;
                     door_open_St_34_Closed : int; ck_41_1 : bool;
                     v_207 : bool; v_206 : bool; r_19_St_34_Open : bool;
                     s_19_St_34_Open_1 : bool; r_19_St_34_Closed : bool;
                     s_19_St_34_Closed_1 : bool; ck_40_1 : bool;
                     out_false : int; out_true : int; ck_39 : bool;
                     nr_20_St_35_Present : bool;
                     ns_20_St_35_Present_1 : bool;
                     presence_1_St_35_Present : bool;
                     nr_20_St_35_Not_Present : bool;
                     ns_20_St_35_Not_Present_1 : bool;
                     presence_1_St_35_Not_Present : bool; ck_38_1 : bool;
                     r_20_St_35_Present : bool; s_20_St_35_Present_1 : bool;
                     r_20_St_35_Not_Present : bool;
                     s_20_St_35_Not_Present_1 : bool; ck_37_1 : bool;
                     nr_21_St_36_Present : bool;
                     ns_21_St_36_Present_1 : bool;
                     presence_St_36_Present : bool;
                     nr_21_St_36_Not_Present : bool;
                     ns_21_St_36_Not_Present_1 : bool;
                     presence_St_36_Not_Present : bool; ck_36_1 : bool;
                     r_21_St_36_Present : bool; s_21_St_36_Present_1 : bool;
                     r_21_St_36_Not_Present : bool;
                     s_21_St_36_Not_Present_1 : bool; ck_35_1 : bool;
                     nr_22_St_37_Noite : bool; ns_22_St_37_Noite_1 : bool;
                     night_1_St_37_Noite : bool; nr_22_St_37_Dia : bool;
                     ns_22_St_37_Dia_1 : bool; night_1_St_37_Dia : bool;
                     ck_34_1 : bool; r_22_St_37_Noite : bool;
                     s_22_St_37_Noite_1 : bool; r_22_St_37_Dia : bool;
                     s_22_St_37_Dia_1 : bool; ck_1 : bool; s_15_2_0 : bool;
                     s_15_2_1 : bool; ns_15_2_0 : bool; ns_15_2_1 : bool;
                     s_22_1 : bool; ns_22_1 : bool; r_22 : bool;
                     nr_22 : bool; pnr_22 : bool; s_21_1 : bool;
                     ns_21_1 : bool; r_21 : bool; nr_21 : bool;
                     pnr_21 : bool; s_20_1 : bool; ns_20_1 : bool;
                     r_20 : bool; nr_20 : bool; pnr_20 : bool; s_19_1 : bool;
                     ns_19_1 : bool; r_19 : bool; nr_19 : bool;
                     pnr_19 : bool; s_18_1 : bool; ns_18_1 : bool;
                     r_18 : bool; nr_18 : bool; pnr_18 : bool; s_17_1 : bool;
                     ns_17_1 : bool; r_17 : bool; nr_17 : bool;
                     pnr_17 : bool; s_16_1 : bool; ns_16_1 : bool;
                     r_16 : bool; nr_16 : bool; pnr_16 : bool; s_15_2 : bool;
                     s_15_1 : bool; ns_15_2 : bool; ns_15_1 : bool;
                     r_15 : bool; nr_15 : bool; pnr_15 : bool; s_14_1 : bool;
                     ns_14_1 : bool; r_14 : bool; nr_14 : bool;
                     pnr_14 : bool; s_13_1 : bool; ns_13_1 : bool;
                     r_13 : bool; nr_13 : bool; pnr_13 : bool; s_12_1 : bool;
                     ns_12_1 : bool; r_12 : bool; nr_12 : bool;
                     pnr_12 : bool; s_11_1 : bool; ns_11_1 : bool;
                     r_11 : bool; nr_11 : bool; pnr_11 : bool; s_10_1 : bool;
                     ns_10_1 : bool; r_10 : bool; nr_10 : bool;
                     pnr_10 : bool; s_9_1 : bool; ns_9_1 : bool; r_9 : bool;
                     nr_9 : bool; pnr_9 : bool; s_8_1 : bool; ns_8_1 : bool;
                     r_8 : bool; nr_8 : bool; pnr_8 : bool; s_7_1 : bool;
                     ns_7_1 : bool; r_7 : bool; nr_7 : bool; pnr_7 : bool;
                     s_1 : bool; ns_1 : bool; r : bool; nr : bool;
                     pnr : bool; sw_2 : bool; c1_8 : bool; c2_4 : bool;
                     failed_recovered_12 : bool; failed_recovered_1_1 : bool;
                     failed_1_1 : bool; sw_1_1 : bool; c1_1_1 : bool;
                     c2_1_1 : bool; light_source_on_1 : int;
                     light_source_1 : int; failed_12 : bool; out_6 : int;
                     sw : bool; c1_7 : bool; c2_3 : bool;
                     failed_recovered_11 : bool; failed_recovered_1 : bool;
                     failed_1 : bool; sw_1 : bool; c1_1 : bool; c2_1 : bool;
                     light_source_on : int; light_source : int;
                     failed_11 : bool; out_5 : int; c1_6 : bool;
                     failed_recovered_10 : bool; failed_recovered_3 : bool;
                     failed_3 : bool; c_3 : bool; closet_open : int;
                     closet : int; failed_10 : bool; out_4 : int;
                     c1_5 : bool; failed_recovered_9 : bool;
                     failed_recovered_5 : bool; failed_5 : bool; c_2 : bool;
                     window_open : int; window : int; failed_9 : bool;
                     out_3 : int; c1_4 : bool; c2 : bool;
                     failed_recovered_8 : bool; failed_recovered_6 : bool;
                     failed_6 : bool; c1_2 : bool; c2_2 : bool;
                     air_state_1 : int; air_state : int; failed_8 : bool;
                     out_2 : int; c1_3 : bool; failed_recovered_7 : bool;
                     failed_recovered_4 : bool; failed_4 : bool; c_1 : bool;
                     computer_on : int; computer : int; failed_7 : bool;
                     out_1 : int; c1 : bool; failed_recovered : bool;
                     failed_recovered_2 : bool; failed_2 : bool; c : bool;
                     door_open : int; door : int; failed : bool; out : int;
                     arrived_1 : bool; presence_1 : bool; arrived : bool;
                     presence : bool; change : bool; night_1 : bool;
  let
    sw_2 = blind_switch;
    c1_8 = c_blind_1;
    c2_4 = c_blind_2;
    failed_recovered_12 = blind_failed_recovered;
    failed_recovered_1_1 = failed_recovered_12;
    pnr = false fby nr;
    ck_73_1 = s_1;
    failed_1_1_St_21_Funcionando = false;
    nr_St_21_Funcionando = false;
    ns_St_21_Funcionando_1 = false;
    failed_1_1_St_21_Falha = true;
    nr_St_21_Falha = false;
    ns_St_21_Falha_1 = true;
    failed_1_1 =
      merge ck_73_1
        (true -> failed_1_1_St_21_Falha)
        (false -> failed_1_1_St_21_Funcionando);
    ns_1 =
      merge ck_73_1
        (true -> ns_St_21_Falha_1)(false -> ns_St_21_Funcionando_1);
    nr =
      merge ck_73_1 (true -> nr_St_21_Falha)(false -> nr_St_21_Funcionando);
    ck_72_1 = false fby ns_1;
    r_St_21_Funcionando =
      if (failed_recovered_1_1 when false(ck_72_1))
      then true
      else (pnr when false(ck_72_1));
    s_St_21_Funcionando_1 =
      if (failed_recovered_1_1 when false(ck_72_1)) then true else false;
    r_St_21_Falha =
      if (failed_recovered_1_1 when true(ck_72_1))
      then true
      else (pnr when true(ck_72_1));
    s_St_21_Falha_1 =
      if (failed_recovered_1_1 when true(ck_72_1)) then false else true;
    s_1 =
      merge ck_72_1 (true -> s_St_21_Falha_1)(false -> s_St_21_Funcionando_1);
    r = merge ck_72_1 (true -> r_St_21_Falha)(false -> r_St_21_Funcionando);
    sw_1_1 = sw_2;
    c1_1_1 = c1_8;
    c2_1_1 = c2_4;
    pnr_7 = false fby nr_7;
    ck_71_1 = s_7_1;
    light_source_on_1_St_22_Off = 0;
    nr_7_St_22_Off = false;
    ns_7_St_22_Off_1 = true;
    light_source_on_1_St_22_On = 1;
    nr_7_St_22_On = false;
    ns_7_St_22_On_1 = false;
    light_source_on_1 =
      merge ck_71_1
        (true -> light_source_on_1_St_22_Off)
        (false -> light_source_on_1_St_22_On);
    ns_7_1 =
      merge ck_71_1 (true -> ns_7_St_22_Off_1)(false -> ns_7_St_22_On_1);
    nr_7 = merge ck_71_1 (true -> nr_7_St_22_Off)(false -> nr_7_St_22_On);
    ck_70_1 = true fby ns_7_1;
    r_7_St_22_Off = if v_235 then true else (pnr_7 when true(ck_70_1));
    s_7_St_22_Off_1 = if v_235 then false else true;
    v_235 = (v_233 or v_234);
    v_234 = not((c2_1_1 when true(ck_70_1)));
    v_233 = ((c1_1_1 when true(ck_70_1)) & (sw_1_1 when true(ck_70_1)));
    r_7_St_22_On = if v_232 then true else (pnr_7 when false(ck_70_1));
    s_7_St_22_On_1 = if v_232 then true else false;
    v_232 = (v_230 or v_231);
    v_231 = not((c2_1_1 when false(ck_70_1)));
    v_230 = ((c1_1_1 when false(ck_70_1)) & (sw_1_1 when false(ck_70_1)));
    s_7_1 = merge ck_70_1 (true -> s_7_St_22_Off_1)(false -> s_7_St_22_On_1);
    r_7 = merge ck_70_1 (true -> r_7_St_22_Off)(false -> r_7_St_22_On);
    light_source_1 = light_source_on_1;
    failed_12 = failed_1_1;
    ck_69 = failed_12;
    out_6_true = ((light_source_1 when true(ck_69)) + 2);
    out_6_false = (light_source_1 when false(ck_69));
    out_6 = merge ck_69 (false -> out_6_false)(true -> out_6_true);
    sw = light_switch;
    c1_7 = c_light_1;
    c2_3 = c_light_2;
    failed_recovered_11 = light_failed_recovered;
    failed_recovered_1 = failed_recovered_11;
    pnr_8 = false fby nr_8;
    ck_68_1 = s_8_1;
    failed_1_St_23_Funcionando = false;
    nr_8_St_23_Funcionando = false;
    ns_8_St_23_Funcionando_1 = false;
    failed_1_St_23_Falha = true;
    nr_8_St_23_Falha = false;
    ns_8_St_23_Falha_1 = true;
    failed_1 =
      merge ck_68_1
        (true -> failed_1_St_23_Falha)(false -> failed_1_St_23_Funcionando);
    ns_8_1 =
      merge ck_68_1
        (true -> ns_8_St_23_Falha_1)(false -> ns_8_St_23_Funcionando_1);
    nr_8 =
      merge ck_68_1
        (true -> nr_8_St_23_Falha)(false -> nr_8_St_23_Funcionando);
    ck_67_1 = false fby ns_8_1;
    r_8_St_23_Funcionando =
      if (failed_recovered_1 when false(ck_67_1))
      then true
      else (pnr_8 when false(ck_67_1));
    s_8_St_23_Funcionando_1 =
      if (failed_recovered_1 when false(ck_67_1)) then true else false;
    r_8_St_23_Falha =
      if (failed_recovered_1 when true(ck_67_1))
      then true
      else (pnr_8 when true(ck_67_1));
    s_8_St_23_Falha_1 =
      if (failed_recovered_1 when true(ck_67_1)) then false else true;
    s_8_1 =
      merge ck_67_1
        (true -> s_8_St_23_Falha_1)(false -> s_8_St_23_Funcionando_1);
    r_8 =
      merge ck_67_1 (true -> r_8_St_23_Falha)(false -> r_8_St_23_Funcionando);
    sw_1 = sw;
    c1_1 = c1_7;
    c2_1 = c2_3;
    pnr_9 = false fby nr_9;
    ck_66_1 = s_9_1;
    light_source_on_St_24_Off = 0;
    nr_9_St_24_Off = false;
    ns_9_St_24_Off_1 = true;
    light_source_on_St_24_On = 1;
    nr_9_St_24_On = false;
    ns_9_St_24_On_1 = false;
    light_source_on =
      merge ck_66_1
        (true -> light_source_on_St_24_Off)
        (false -> light_source_on_St_24_On);
    ns_9_1 =
      merge ck_66_1 (true -> ns_9_St_24_Off_1)(false -> ns_9_St_24_On_1);
    nr_9 = merge ck_66_1 (true -> nr_9_St_24_Off)(false -> nr_9_St_24_On);
    ck_65_1 = true fby ns_9_1;
    r_9_St_24_Off = if v_229 then true else (pnr_9 when true(ck_65_1));
    s_9_St_24_Off_1 = if v_229 then false else true;
    v_229 = (v_227 or v_228);
    v_228 = not((c2_1 when true(ck_65_1)));
    v_227 = ((c1_1 when true(ck_65_1)) & (sw_1 when true(ck_65_1)));
    r_9_St_24_On = if v_226 then true else (pnr_9 when false(ck_65_1));
    s_9_St_24_On_1 = if v_226 then true else false;
    v_226 = (v_224 or v_225);
    v_225 = not((c2_1 when false(ck_65_1)));
    v_224 = ((c1_1 when false(ck_65_1)) & (sw_1 when false(ck_65_1)));
    s_9_1 = merge ck_65_1 (true -> s_9_St_24_Off_1)(false -> s_9_St_24_On_1);
    r_9 = merge ck_65_1 (true -> r_9_St_24_Off)(false -> r_9_St_24_On);
    light_source = light_source_on;
    failed_11 = failed_1;
    ck_64 = failed_11;
    out_5_true = ((light_source when true(ck_64)) + 2);
    out_5_false = (light_source when false(ck_64));
    out_5 = merge ck_64 (false -> out_5_false)(true -> out_5_true);
    c1_6 = c_closet;
    failed_recovered_10 = closet_failed_recovered;
    failed_recovered_3 = failed_recovered_10;
    pnr_10 = false fby nr_10;
    ck_63_1 = s_10_1;
    failed_3_St_25_Funcionando = false;
    nr_10_St_25_Funcionando = false;
    ns_10_St_25_Funcionando_1 = false;
    failed_3_St_25_Falha = true;
    nr_10_St_25_Falha = false;
    ns_10_St_25_Falha_1 = true;
    failed_3 =
      merge ck_63_1
        (true -> failed_3_St_25_Falha)(false -> failed_3_St_25_Funcionando);
    ns_10_1 =
      merge ck_63_1
        (true -> ns_10_St_25_Falha_1)(false -> ns_10_St_25_Funcionando_1);
    nr_10 =
      merge ck_63_1
        (true -> nr_10_St_25_Falha)(false -> nr_10_St_25_Funcionando);
    ck_62_1 = false fby ns_10_1;
    r_10_St_25_Funcionando =
      if (failed_recovered_3 when false(ck_62_1))
      then true
      else (pnr_10 when false(ck_62_1));
    s_10_St_25_Funcionando_1 =
      if (failed_recovered_3 when false(ck_62_1)) then true else false;
    r_10_St_25_Falha =
      if (failed_recovered_3 when true(ck_62_1))
      then true
      else (pnr_10 when true(ck_62_1));
    s_10_St_25_Falha_1 =
      if (failed_recovered_3 when true(ck_62_1)) then false else true;
    s_10_1 =
      merge ck_62_1
        (true -> s_10_St_25_Falha_1)(false -> s_10_St_25_Funcionando_1);
    r_10 =
      merge ck_62_1
        (true -> r_10_St_25_Falha)(false -> r_10_St_25_Funcionando);
    c_3 = c1_6;
    pnr_11 = false fby nr_11;
    ck_61_1 = s_11_1;
    closet_open_St_26_Locked = 0;
    nr_11_St_26_Locked = false;
    ns_11_St_26_Locked_1 = true;
    closet_open_St_26_Open = 1;
    nr_11_St_26_Open = false;
    ns_11_St_26_Open_1 = false;
    closet_open =
      merge ck_61_1
        (true -> closet_open_St_26_Locked)(false -> closet_open_St_26_Open);
    ns_11_1 =
      merge ck_61_1
        (true -> ns_11_St_26_Locked_1)(false -> ns_11_St_26_Open_1);
    nr_11 =
      merge ck_61_1 (true -> nr_11_St_26_Locked)(false -> nr_11_St_26_Open);
    ck_60_1 = true fby ns_11_1;
    r_11_St_26_Locked = if v_223 then true else (pnr_11 when true(ck_60_1));
    s_11_St_26_Locked_1 = if v_223 then false else true;
    v_223 = not((c_3 when true(ck_60_1)));
    r_11_St_26_Open =
      if (c_3 when false(ck_60_1))
      then true
      else (pnr_11 when false(ck_60_1));
    s_11_St_26_Open_1 = if (c_3 when false(ck_60_1)) then true else false;
    s_11_1 =
      merge ck_60_1 (true -> s_11_St_26_Locked_1)(false -> s_11_St_26_Open_1);
    r_11 =
      merge ck_60_1 (true -> r_11_St_26_Locked)(false -> r_11_St_26_Open);
    closet = closet_open;
    failed_10 = failed_3;
    ck_59 = failed_10;
    out_4_true = ((closet when true(ck_59)) + 2);
    out_4_false = (closet when false(ck_59));
    out_4 = merge ck_59 (false -> out_4_false)(true -> out_4_true);
    c1_5 = c_window;
    failed_recovered_9 = window_failed_recovered;
    failed_recovered_5 = failed_recovered_9;
    pnr_12 = false fby nr_12;
    ck_58_1 = s_12_1;
    failed_5_St_27_Funcionando = false;
    nr_12_St_27_Funcionando = false;
    ns_12_St_27_Funcionando_1 = false;
    failed_5_St_27_Falha = true;
    nr_12_St_27_Falha = false;
    ns_12_St_27_Falha_1 = true;
    failed_5 =
      merge ck_58_1
        (true -> failed_5_St_27_Falha)(false -> failed_5_St_27_Funcionando);
    ns_12_1 =
      merge ck_58_1
        (true -> ns_12_St_27_Falha_1)(false -> ns_12_St_27_Funcionando_1);
    nr_12 =
      merge ck_58_1
        (true -> nr_12_St_27_Falha)(false -> nr_12_St_27_Funcionando);
    ck_57_1 = false fby ns_12_1;
    r_12_St_27_Funcionando =
      if (failed_recovered_5 when false(ck_57_1))
      then true
      else (pnr_12 when false(ck_57_1));
    s_12_St_27_Funcionando_1 =
      if (failed_recovered_5 when false(ck_57_1)) then true else false;
    r_12_St_27_Falha =
      if (failed_recovered_5 when true(ck_57_1))
      then true
      else (pnr_12 when true(ck_57_1));
    s_12_St_27_Falha_1 =
      if (failed_recovered_5 when true(ck_57_1)) then false else true;
    s_12_1 =
      merge ck_57_1
        (true -> s_12_St_27_Falha_1)(false -> s_12_St_27_Funcionando_1);
    r_12 =
      merge ck_57_1
        (true -> r_12_St_27_Falha)(false -> r_12_St_27_Funcionando);
    c_2 = c1_5;
    pnr_13 = false fby nr_13;
    ck_56_1 = s_13_1;
    window_open_St_28_Closed = 0;
    nr_13_St_28_Closed = false;
    ns_13_St_28_Closed_1 = true;
    window_open_St_28_Open = 1;
    nr_13_St_28_Open = false;
    ns_13_St_28_Open_1 = false;
    window_open =
      merge ck_56_1
        (true -> window_open_St_28_Closed)(false -> window_open_St_28_Open);
    ns_13_1 =
      merge ck_56_1
        (true -> ns_13_St_28_Closed_1)(false -> ns_13_St_28_Open_1);
    nr_13 =
      merge ck_56_1 (true -> nr_13_St_28_Closed)(false -> nr_13_St_28_Open);
    ck_55_1 = true fby ns_13_1;
    r_13_St_28_Closed = if v_222 then true else (pnr_13 when true(ck_55_1));
    s_13_St_28_Closed_1 = if v_222 then false else true;
    v_222 = not((c_2 when true(ck_55_1)));
    r_13_St_28_Open =
      if (c_2 when false(ck_55_1))
      then true
      else (pnr_13 when false(ck_55_1));
    s_13_St_28_Open_1 = if (c_2 when false(ck_55_1)) then true else false;
    s_13_1 =
      merge ck_55_1 (true -> s_13_St_28_Closed_1)(false -> s_13_St_28_Open_1);
    r_13 =
      merge ck_55_1 (true -> r_13_St_28_Closed)(false -> r_13_St_28_Open);
    window = window_open;
    failed_9 = failed_5;
    ck_54 = failed_9;
    out_3_true = ((window when true(ck_54)) + 2);
    out_3_false = (window when false(ck_54));
    out_3 = merge ck_54 (false -> out_3_false)(true -> out_3_true);
    c1_4 = c_air_1;
    c2 = c_air_2;
    failed_recovered_8 = air_failed_recovered;
    failed_recovered_6 = failed_recovered_8;
    pnr_14 = false fby nr_14;
    ck_53_1 = s_14_1;
    failed_6_St_29_Funcionando = false;
    nr_14_St_29_Funcionando = false;
    ns_14_St_29_Funcionando_1 = false;
    failed_6_St_29_Falha = true;
    nr_14_St_29_Falha = false;
    ns_14_St_29_Falha_1 = true;
    failed_6 =
      merge ck_53_1
        (true -> failed_6_St_29_Falha)(false -> failed_6_St_29_Funcionando);
    ns_14_1 =
      merge ck_53_1
        (true -> ns_14_St_29_Falha_1)(false -> ns_14_St_29_Funcionando_1);
    nr_14 =
      merge ck_53_1
        (true -> nr_14_St_29_Falha)(false -> nr_14_St_29_Funcionando);
    ck_52_1 = false fby ns_14_1;
    r_14_St_29_Funcionando =
      if (failed_recovered_6 when false(ck_52_1))
      then true
      else (pnr_14 when false(ck_52_1));
    s_14_St_29_Funcionando_1 =
      if (failed_recovered_6 when false(ck_52_1)) then true else false;
    r_14_St_29_Falha =
      if (failed_recovered_6 when true(ck_52_1))
      then true
      else (pnr_14 when true(ck_52_1));
    s_14_St_29_Falha_1 =
      if (failed_recovered_6 when true(ck_52_1)) then false else true;
    s_14_1 =
      merge ck_52_1
        (true -> s_14_St_29_Falha_1)(false -> s_14_St_29_Funcionando_1);
    r_14 =
      merge ck_52_1
        (true -> r_14_St_29_Falha)(false -> r_14_St_29_Funcionando);
    c1_2 = c1_4;
    c2_2 = c2;
    pnr_15 = false fby nr_15;
    ck_51_1 = s_15_1;
    ck_51_2 = s_15_2;
    air_state_1_St_30_Off = 0;
    nr_15_St_30_Off = false;
    ns_15_St_30_Off_1 = false;
    ns_15_St_30_Off_2 = false;
    air_state_1_St_30_Min = 1;
    nr_15_St_30_Min = false;
    ns_15_St_30_Min_1 = true;
    ns_15_St_30_Min_2 = false;
    air_state_1_St_30_Max = 2;
    nr_15_St_30_Max = false;
    ns_15_St_30_Max_1 = true;
    ns_15_St_30_Max_2 = true;
    v_268 =
      merge ck_51_2_1
        (true -> air_state_1_St_30_Max)(false -> air_state_1_St_30_Min);
    v_269 =
      merge ck_51_2_0
        (true -> ((0 when false(ck_51_1)) when true(ck_51_2_0)))
        (false -> air_state_1_St_30_Off);
    air_state_1 = merge ck_51_1 (true -> v_268)(false -> v_269);
    v_270 =
      merge ck_51_2_1 (true -> ns_15_St_30_Max_1)(false -> ns_15_St_30_Min_1);
    v_271 =
      merge ck_51_2_1 (true -> ns_15_St_30_Max_2)(false -> ns_15_St_30_Min_2);
    v_272 =
      merge ck_51_2_0
        (true -> ((true when false(ck_51_1)) when true(ck_51_2_0)))
        (false -> ns_15_St_30_Off_1);
    v_273 =
      merge ck_51_2_0
        (true -> ((true when false(ck_51_1)) when true(ck_51_2_0)))
        (false -> ns_15_St_30_Off_2);
    ns_15_1 = merge ck_51_1 (true -> v_270)(false -> v_272);
    ns_15_2 = merge ck_51_1 (true -> v_271)(false -> v_273);
    v_274 =
      merge ck_51_2_1 (true -> nr_15_St_30_Max)(false -> nr_15_St_30_Min);
    v_275 =
      merge ck_51_2_0
        (true -> ((true when false(ck_51_1)) when true(ck_51_2_0)))
        (false -> nr_15_St_30_Off);
    nr_15 = merge ck_51_1 (true -> v_274)(false -> v_275);
    ck_51_2_1 = (ck_51_2 when true(ck_51_1));
    ck_51_2_0 = (ck_51_2 when false(ck_51_1));
    ns_15_St_30_Off_2_1 = (ns_15_St_30_Off_2 when true(ns_15_St_30_Off_1));
    ns_15_St_30_Off_2_0 = (ns_15_St_30_Off_2 when false(ns_15_St_30_Off_1));
    ns_15_St_30_Min_2_1 = (ns_15_St_30_Min_2 when true(ns_15_St_30_Min_1));
    ns_15_St_30_Min_2_0 = (ns_15_St_30_Min_2 when false(ns_15_St_30_Min_1));
    ns_15_St_30_Max_2_1 = (ns_15_St_30_Max_2 when true(ns_15_St_30_Max_1));
    ns_15_St_30_Max_2_0 = (ns_15_St_30_Max_2 when false(ns_15_St_30_Max_1));
    v_276 = false fby ns_15_1;
    v_277 = false fby ns_15_2;
    ck_50_1 = v_276;
    ck_50_2 = v_277;
    r_15_St_30_Off = if v_218 then true else v_221;
    s_15_St_30_Off_1 = if v_218 then true else v_220_1;
    s_15_St_30_Off_2 = if v_218 then false else v_220_2;
    v_221 =
      if v_219
      then true
      else ((pnr_15 when false(ck_50_1)) when false(ck_50_2_0));
    v_220_1 = if v_219 then true else false;
    v_220_2 = if v_219 then true else false;
    v_219 = not(((c2_2 when false(ck_50_1)) when false(ck_50_2_0)));
    v_218 = not(((c1_2 when false(ck_50_1)) when false(ck_50_2_0)));
    v_220_2_1 = (v_220_2 when true(v_220_1));
    v_220_2_0 = (v_220_2 when false(v_220_1));
    r_15_St_30_Min = if v_214 then true else v_217;
    s_15_St_30_Min_1 = if v_214 then false else v_216_1;
    s_15_St_30_Min_2 = if v_214 then false else v_216_2;
    v_217 =
      if v_215
      then true
      else ((pnr_15 when true(ck_50_1)) when false(ck_50_2_1));
    v_216_1 = if v_215 then true else true;
    v_216_2 = if v_215 then true else false;
    v_215 = not(((c2_2 when true(ck_50_1)) when false(ck_50_2_1)));
    v_214 = not(((c1_2 when true(ck_50_1)) when false(ck_50_2_1)));
    v_216_2_1 = (v_216_2 when true(v_216_1));
    v_216_2_0 = (v_216_2 when false(v_216_1));
    r_15_St_30_Max = if v_210 then true else v_213;
    s_15_St_30_Max_1 = if v_210 then true else v_212_1;
    s_15_St_30_Max_2 = if v_210 then false else v_212_2;
    v_213 =
      if v_211
      then true
      else ((pnr_15 when true(ck_50_1)) when true(ck_50_2_1));
    v_212_1 = if v_211 then false else true;
    v_212_2 = if v_211 then false else true;
    v_211 = not(((c2_2 when true(ck_50_1)) when true(ck_50_2_1)));
    v_210 = not(((c1_2 when true(ck_50_1)) when true(ck_50_2_1)));
    v_212_2_1 = (v_212_2 when true(v_212_1));
    v_212_2_0 = (v_212_2 when false(v_212_1));
    v_278 =
      merge ck_50_2_1 (true -> s_15_St_30_Max_1)(false -> s_15_St_30_Min_1);
    v_279 =
      merge ck_50_2_1 (true -> s_15_St_30_Max_2)(false -> s_15_St_30_Min_2);
    v_280 =
      merge ck_50_2_0
        (true -> ((true when false(ck_50_1)) when true(ck_50_2_0)))
        (false -> s_15_St_30_Off_1);
    v_281 =
      merge ck_50_2_0
        (true -> ((true when false(ck_50_1)) when true(ck_50_2_0)))
        (false -> s_15_St_30_Off_2);
    s_15_1 = merge ck_50_1 (true -> v_278)(false -> v_280);
    s_15_2 = merge ck_50_1 (true -> v_279)(false -> v_281);
    v_282 = merge ck_50_2_1 (true -> r_15_St_30_Max)(false -> r_15_St_30_Min);
    v_283 =
      merge ck_50_2_0
        (true -> ((true when false(ck_50_1)) when true(ck_50_2_0)))
        (false -> r_15_St_30_Off);
    r_15 = merge ck_50_1 (true -> v_282)(false -> v_283);
    ck_50_2_1 = (ck_50_2 when true(ck_50_1));
    ck_50_2_0 = (ck_50_2 when false(ck_50_1));
    s_15_St_30_Off_2_1 = (s_15_St_30_Off_2 when true(s_15_St_30_Off_1));
    s_15_St_30_Off_2_0 = (s_15_St_30_Off_2 when false(s_15_St_30_Off_1));
    s_15_St_30_Min_2_1 = (s_15_St_30_Min_2 when true(s_15_St_30_Min_1));
    s_15_St_30_Min_2_0 = (s_15_St_30_Min_2 when false(s_15_St_30_Min_1));
    s_15_St_30_Max_2_1 = (s_15_St_30_Max_2 when true(s_15_St_30_Max_1));
    s_15_St_30_Max_2_0 = (s_15_St_30_Max_2 when false(s_15_St_30_Max_1));
    air_state = air_state_1;
    failed_8 = failed_6;
    ck_49 = failed_8;
    out_2_true = ((air_state when true(ck_49)) + 3);
    out_2_false = (air_state when false(ck_49));
    out_2 = merge ck_49 (false -> out_2_false)(true -> out_2_true);
    c1_3 = c_pc;
    failed_recovered_7 = pc_failed_recovered;
    failed_recovered_4 = failed_recovered_7;
    pnr_16 = false fby nr_16;
    ck_48_1 = s_16_1;
    failed_4_St_31_Funcionando = false;
    nr_16_St_31_Funcionando = false;
    ns_16_St_31_Funcionando_1 = false;
    failed_4_St_31_Falha = true;
    nr_16_St_31_Falha = false;
    ns_16_St_31_Falha_1 = true;
    failed_4 =
      merge ck_48_1
        (true -> failed_4_St_31_Falha)(false -> failed_4_St_31_Funcionando);
    ns_16_1 =
      merge ck_48_1
        (true -> ns_16_St_31_Falha_1)(false -> ns_16_St_31_Funcionando_1);
    nr_16 =
      merge ck_48_1
        (true -> nr_16_St_31_Falha)(false -> nr_16_St_31_Funcionando);
    ck_47_1 = false fby ns_16_1;
    r_16_St_31_Funcionando =
      if (failed_recovered_4 when false(ck_47_1))
      then true
      else (pnr_16 when false(ck_47_1));
    s_16_St_31_Funcionando_1 =
      if (failed_recovered_4 when false(ck_47_1)) then true else false;
    r_16_St_31_Falha =
      if (failed_recovered_4 when true(ck_47_1))
      then true
      else (pnr_16 when true(ck_47_1));
    s_16_St_31_Falha_1 =
      if (failed_recovered_4 when true(ck_47_1)) then false else true;
    s_16_1 =
      merge ck_47_1
        (true -> s_16_St_31_Falha_1)(false -> s_16_St_31_Funcionando_1);
    r_16 =
      merge ck_47_1
        (true -> r_16_St_31_Falha)(false -> r_16_St_31_Funcionando);
    c_1 = c1_3;
    pnr_17 = false fby nr_17;
    ck_46_1 = s_17_1;
    computer_on_St_32_Off = 0;
    nr_17_St_32_Off = false;
    ns_17_St_32_Off_1 = true;
    computer_on_St_32_On = 1;
    nr_17_St_32_On = false;
    ns_17_St_32_On_1 = false;
    computer_on =
      merge ck_46_1
        (true -> computer_on_St_32_Off)(false -> computer_on_St_32_On);
    ns_17_1 =
      merge ck_46_1 (true -> ns_17_St_32_Off_1)(false -> ns_17_St_32_On_1);
    nr_17 = merge ck_46_1 (true -> nr_17_St_32_Off)(false -> nr_17_St_32_On);
    ck_45_1 = true fby ns_17_1;
    r_17_St_32_Off = if v_209 then true else (pnr_17 when true(ck_45_1));
    s_17_St_32_Off_1 = if v_209 then false else true;
    v_209 = not((c_1 when true(ck_45_1)));
    r_17_St_32_On = if v_208 then true else (pnr_17 when false(ck_45_1));
    s_17_St_32_On_1 = if v_208 then true else false;
    v_208 = not((c_1 when false(ck_45_1)));
    s_17_1 =
      merge ck_45_1 (true -> s_17_St_32_Off_1)(false -> s_17_St_32_On_1);
    r_17 = merge ck_45_1 (true -> r_17_St_32_Off)(false -> r_17_St_32_On);
    computer = computer_on;
    failed_7 = failed_4;
    ck_44 = failed_7;
    out_1_true = ((computer when true(ck_44)) + 2);
    out_1_false = (computer when false(ck_44));
    out_1 = merge ck_44 (false -> out_1_false)(true -> out_1_true);
    c1 = c_door;
    failed_recovered = door_failed_recovered;
    failed_recovered_2 = failed_recovered;
    pnr_18 = false fby nr_18;
    ck_43_1 = s_18_1;
    failed_2_St_33_Funcionando = false;
    nr_18_St_33_Funcionando = false;
    ns_18_St_33_Funcionando_1 = false;
    failed_2_St_33_Falha = true;
    nr_18_St_33_Falha = false;
    ns_18_St_33_Falha_1 = true;
    failed_2 =
      merge ck_43_1
        (true -> failed_2_St_33_Falha)(false -> failed_2_St_33_Funcionando);
    ns_18_1 =
      merge ck_43_1
        (true -> ns_18_St_33_Falha_1)(false -> ns_18_St_33_Funcionando_1);
    nr_18 =
      merge ck_43_1
        (true -> nr_18_St_33_Falha)(false -> nr_18_St_33_Funcionando);
    ck_42_1 = false fby ns_18_1;
    r_18_St_33_Funcionando =
      if (failed_recovered_2 when false(ck_42_1))
      then true
      else (pnr_18 when false(ck_42_1));
    s_18_St_33_Funcionando_1 =
      if (failed_recovered_2 when false(ck_42_1)) then true else false;
    r_18_St_33_Falha =
      if (failed_recovered_2 when true(ck_42_1))
      then true
      else (pnr_18 when true(ck_42_1));
    s_18_St_33_Falha_1 =
      if (failed_recovered_2 when true(ck_42_1)) then false else true;
    s_18_1 =
      merge ck_42_1
        (true -> s_18_St_33_Falha_1)(false -> s_18_St_33_Funcionando_1);
    r_18 =
      merge ck_42_1
        (true -> r_18_St_33_Falha)(false -> r_18_St_33_Funcionando);
    c = c1;
    pnr_19 = false fby nr_19;
    ck_41_1 = s_19_1;
    door_open_St_34_Closed = 0;
    nr_19_St_34_Closed = false;
    ns_19_St_34_Closed_1 = true;
    door_open_St_34_Open = 1;
    nr_19_St_34_Open = false;
    ns_19_St_34_Open_1 = false;
    door_open =
      merge ck_41_1
        (true -> door_open_St_34_Closed)(false -> door_open_St_34_Open);
    ns_19_1 =
      merge ck_41_1
        (true -> ns_19_St_34_Closed_1)(false -> ns_19_St_34_Open_1);
    nr_19 =
      merge ck_41_1 (true -> nr_19_St_34_Closed)(false -> nr_19_St_34_Open);
    ck_40_1 = true fby ns_19_1;
    r_19_St_34_Closed = if v_207 then true else (pnr_19 when true(ck_40_1));
    s_19_St_34_Closed_1 = if v_207 then false else true;
    v_207 = not((c when true(ck_40_1)));
    r_19_St_34_Open = if v_206 then true else (pnr_19 when false(ck_40_1));
    s_19_St_34_Open_1 = if v_206 then true else false;
    v_206 = not((c when false(ck_40_1)));
    s_19_1 =
      merge ck_40_1 (true -> s_19_St_34_Closed_1)(false -> s_19_St_34_Open_1);
    r_19 =
      merge ck_40_1 (true -> r_19_St_34_Closed)(false -> r_19_St_34_Open);
    door = door_open;
    failed = failed_2;
    ck_39 = failed;
    out_true = ((door when true(ck_39)) + 2);
    out_false = (door when false(ck_39));
    out = merge ck_39 (false -> out_false)(true -> out_true);
    arrived_1 = cleaner;
    pnr_20 = false fby nr_20;
    ck_38_1 = s_20_1;
    presence_1_St_35_Not_Present = false;
    nr_20_St_35_Not_Present = false;
    ns_20_St_35_Not_Present_1 = true;
    presence_1_St_35_Present = true;
    nr_20_St_35_Present = false;
    ns_20_St_35_Present_1 = false;
    presence_1 =
      merge ck_38_1
        (true -> presence_1_St_35_Not_Present)
        (false -> presence_1_St_35_Present);
    ns_20_1 =
      merge ck_38_1
        (true -> ns_20_St_35_Not_Present_1)(false -> ns_20_St_35_Present_1);
    nr_20 =
      merge ck_38_1
        (true -> nr_20_St_35_Not_Present)(false -> nr_20_St_35_Present);
    ck_37_1 = true fby ns_20_1;
    r_20_St_35_Not_Present =
      if (arrived_1 when true(ck_37_1))
      then true
      else (pnr_20 when true(ck_37_1));
    s_20_St_35_Not_Present_1 =
      if (arrived_1 when true(ck_37_1)) then false else true;
    r_20_St_35_Present =
      if (arrived_1 when false(ck_37_1))
      then true
      else (pnr_20 when false(ck_37_1));
    s_20_St_35_Present_1 =
      if (arrived_1 when false(ck_37_1)) then true else false;
    s_20_1 =
      merge ck_37_1
        (true -> s_20_St_35_Not_Present_1)(false -> s_20_St_35_Present_1);
    r_20 =
      merge ck_37_1
        (true -> r_20_St_35_Not_Present)(false -> r_20_St_35_Present);
    arrived = worker;
    pnr_21 = false fby nr_21;
    ck_36_1 = s_21_1;
    presence_St_36_Not_Present = false;
    nr_21_St_36_Not_Present = false;
    ns_21_St_36_Not_Present_1 = true;
    presence_St_36_Present = true;
    nr_21_St_36_Present = false;
    ns_21_St_36_Present_1 = false;
    presence =
      merge ck_36_1
        (true -> presence_St_36_Not_Present)(false -> presence_St_36_Present);
    ns_21_1 =
      merge ck_36_1
        (true -> ns_21_St_36_Not_Present_1)(false -> ns_21_St_36_Present_1);
    nr_21 =
      merge ck_36_1
        (true -> nr_21_St_36_Not_Present)(false -> nr_21_St_36_Present);
    ck_35_1 = true fby ns_21_1;
    r_21_St_36_Not_Present =
      if (arrived when true(ck_35_1))
      then true
      else (pnr_21 when true(ck_35_1));
    s_21_St_36_Not_Present_1 =
      if (arrived when true(ck_35_1)) then false else true;
    r_21_St_36_Present =
      if (arrived when false(ck_35_1))
      then true
      else (pnr_21 when false(ck_35_1));
    s_21_St_36_Present_1 =
      if (arrived when false(ck_35_1)) then true else false;
    s_21_1 =
      merge ck_35_1
        (true -> s_21_St_36_Not_Present_1)(false -> s_21_St_36_Present_1);
    r_21 =
      merge ck_35_1
        (true -> r_21_St_36_Not_Present)(false -> r_21_St_36_Present);
    change = change_shift;
    pnr_22 = false fby nr_22;
    ck_34_1 = s_22_1;
    night_1_St_37_Dia = false;
    nr_22_St_37_Dia = false;
    ns_22_St_37_Dia_1 = true;
    night_1_St_37_Noite = true;
    nr_22_St_37_Noite = false;
    ns_22_St_37_Noite_1 = false;
    night_1 =
      merge ck_34_1 (true -> night_1_St_37_Dia)(false -> night_1_St_37_Noite);
    ns_22_1 =
      merge ck_34_1 (true -> ns_22_St_37_Dia_1)(false -> ns_22_St_37_Noite_1);
    nr_22 =
      merge ck_34_1 (true -> nr_22_St_37_Dia)(false -> nr_22_St_37_Noite);
    ck_1 = true fby ns_22_1;
    r_22_St_37_Dia =
      if (change when true(ck_1)) then true else (pnr_22 when true(ck_1));
    s_22_St_37_Dia_1 = if (change when true(ck_1)) then false else true;
    r_22_St_37_Noite =
      if (change when false(ck_1)) then true else (pnr_22 when false(ck_1));
    s_22_St_37_Noite_1 = if (change when false(ck_1)) then true else false;
    s_22_1 =
      merge ck_1 (true -> s_22_St_37_Dia_1)(false -> s_22_St_37_Noite_1);
    r_22 = merge ck_1 (true -> r_22_St_37_Dia)(false -> r_22_St_37_Noite);
    night = night_1;
    worker_presence = presence;
    cleaner_presence = presence_1;
    door_status = out;
    pc_status = out_1;
    air_status = out_2;
    window_status = out_3;
    closet_status = out_4;
    light_status = out_5;
    blind_status = out_6;
    ns_15_2_1 = (ns_15_2 when true(ns_15_1));
    ns_15_2_0 = (ns_15_2 when false(ns_15_1));
    s_15_2_1 = (s_15_2 when true(s_15_1));
    s_15_2_0 = (s_15_2 when false(s_15_1))
  tel

