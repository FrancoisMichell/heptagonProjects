type st_17 = St_17_Noite|St_17_Dia
type st_16 = St_16_Present|St_16_Not_Present
type st_15 = St_15_Present|St_15_Not_Present
type st_14 = St_14_On|St_14_Off
type st_13 = St_13_Open|St_13_Closed
type st_12 = St_12_Open|St_12_Locked
type st_11 = St_11_Open|St_11_Closed
type st_10 = St_10_Off|St_10_Min|St_10_Max
type st_9 = St_9_On|St_9_Off
type st_8 = St_8_On|St_8_Off
type st_7 = St_7_Noite|St_7_Dia
type st_6 = St_6_Present|St_6_Not_Present
type st_5 = St_5_Off|St_5_Min|St_5_Max
type st_4 = St_4_Open|St_4_Closed
type st_3 = St_3_On|St_3_Off
type st_2 = St_2_Open|St_2_Locked
type st_1 = St_1_Open|St_1_Closed
type st = St_On|St_Off
node light_source(sw : bool; c1 : bool; c2 : bool)
returns (light_source_status : int)
var nr_St_On : bool; ns_St_On_1 : bool; light_source_status_St_On : int;
    nr_St_Off : bool; ns_St_Off_1 : bool; light_source_status_St_Off : int;
    ck_1_1 : bool; v_5 : bool; v_4 : bool; v_3 : bool; v_2 : bool;
    v_1 : bool; v : bool; r_St_On : bool; s_St_On_1 : bool; r_St_Off : bool;
    s_St_Off_1 : bool; ck_1_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  light_source_status_St_Off = 0;
  nr_St_Off = false;
  ns_St_Off_1 = true;
  light_source_status_St_On = 1;
  nr_St_On = false;
  ns_St_On_1 = false;
  light_source_status =
    merge ck_1_1
      (true -> light_source_status_St_Off)
      (false -> light_source_status_St_On);
  ns_1 = merge ck_1_1 (true -> ns_St_Off_1)(false -> ns_St_On_1);
  nr = merge ck_1_1 (true -> nr_St_Off)(false -> nr_St_On);
  ck_1_2 = true fby ns_1;
  r_St_Off = if v_5 then true else (pnr when true(ck_1_2));
  s_St_Off_1 = if v_5 then false else true;
  v_5 = (v_3 or v_4);
  v_4 = not((c2 when true(ck_1_2)));
  v_3 = ((c1 when true(ck_1_2)) & (sw when true(ck_1_2)));
  r_St_On = if v_2 then true else (pnr when false(ck_1_2));
  s_St_On_1 = if v_2 then true else false;
  v_2 = (v or v_1);
  v_1 = not((c2 when false(ck_1_2)));
  v = ((c1 when false(ck_1_2)) & (sw when false(ck_1_2)));
  s_1 = merge ck_1_2 (true -> s_St_Off_1)(false -> s_St_On_1);
  r = merge ck_1_2 (true -> r_St_Off)(false -> r_St_On)
tel

node door(c : bool) returns (door_status : int)
var nr_St_1_Open : bool; ns_St_1_Open_1 : bool; door_status_St_1_Open : int;
    nr_St_1_Closed : bool; ns_St_1_Closed_1 : bool;
    door_status_St_1_Closed : int; ck_2_1 : bool; v_6 : bool; v : bool;
    r_St_1_Open : bool; s_St_1_Open_1 : bool; r_St_1_Closed : bool;
    s_St_1_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  door_status_St_1_Closed = 0;
  nr_St_1_Closed = false;
  ns_St_1_Closed_1 = true;
  door_status_St_1_Open = 1;
  nr_St_1_Open = false;
  ns_St_1_Open_1 = false;
  door_status =
    merge ck_2_1
      (true -> door_status_St_1_Closed)(false -> door_status_St_1_Open);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Closed_1)(false -> ns_St_1_Open_1);
  nr = merge ck_2_1 (true -> nr_St_1_Closed)(false -> nr_St_1_Open);
  ck_1 = true fby ns_1;
  r_St_1_Closed = if v_6 then true else (pnr when true(ck_1));
  s_St_1_Closed_1 = if v_6 then false else true;
  v_6 = not((c when true(ck_1)));
  r_St_1_Open = if v then true else (pnr when false(ck_1));
  s_St_1_Open_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Closed_1)(false -> s_St_1_Open_1);
  r = merge ck_1 (true -> r_St_1_Closed)(false -> r_St_1_Open)
tel

node closet(c : bool) returns (closet_status : int)
var nr_St_2_Open : bool; ns_St_2_Open_1 : bool;
    closet_status_St_2_Open : int; nr_St_2_Locked : bool;
    ns_St_2_Locked_1 : bool; closet_status_St_2_Locked : int; ck_3_1 : bool;
    v : bool; r_St_2_Open : bool; s_St_2_Open_1 : bool; r_St_2_Locked : bool;
    s_St_2_Locked_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  closet_status_St_2_Locked = 0;
  nr_St_2_Locked = false;
  ns_St_2_Locked_1 = true;
  closet_status_St_2_Open = 1;
  nr_St_2_Open = false;
  ns_St_2_Open_1 = false;
  closet_status =
    merge ck_3_1
      (true -> closet_status_St_2_Locked)(false -> closet_status_St_2_Open);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Locked_1)(false -> ns_St_2_Open_1);
  nr = merge ck_3_1 (true -> nr_St_2_Locked)(false -> nr_St_2_Open);
  ck_1 = true fby ns_1;
  r_St_2_Locked = if v then true else (pnr when true(ck_1));
  s_St_2_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_2_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_2_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_2_Locked_1)(false -> s_St_2_Open_1);
  r = merge ck_1 (true -> r_St_2_Locked)(false -> r_St_2_Open)
tel

node computer(c : bool) returns (computer_on : int)
var nr_St_3_On : bool; ns_St_3_On_1 : bool; computer_on_St_3_On : int;
    nr_St_3_Off : bool; ns_St_3_Off_1 : bool; computer_on_St_3_Off : int;
    ck_4_1 : bool; v : bool; r_St_3_On : bool; s_St_3_On_1 : bool;
    r_St_3_Off : bool; s_St_3_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  computer_on_St_3_Off = 0;
  nr_St_3_Off = false;
  ns_St_3_Off_1 = true;
  computer_on_St_3_On = 1;
  nr_St_3_On = false;
  ns_St_3_On_1 = false;
  computer_on =
    merge ck_4_1 (true -> computer_on_St_3_Off)(false -> computer_on_St_3_On);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Off_1)(false -> ns_St_3_On_1);
  nr = merge ck_4_1 (true -> nr_St_3_Off)(false -> nr_St_3_On);
  ck_1 = true fby ns_1;
  r_St_3_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_3_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_3_On = if v then true else (pnr when false(ck_1));
  s_St_3_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_3_Off_1)(false -> s_St_3_On_1);
  r = merge ck_1 (true -> r_St_3_Off)(false -> r_St_3_On)
tel

node window(c : bool) returns (window_status : int)
var nr_St_4_Open : bool; ns_St_4_Open_1 : bool;
    window_status_St_4_Open : int; nr_St_4_Closed : bool;
    ns_St_4_Closed_1 : bool; window_status_St_4_Closed : int; ck_5_1 : bool;
    v : bool; r_St_4_Open : bool; s_St_4_Open_1 : bool; r_St_4_Closed : bool;
    s_St_4_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  window_status_St_4_Closed = 0;
  nr_St_4_Closed = false;
  ns_St_4_Closed_1 = true;
  window_status_St_4_Open = 1;
  nr_St_4_Open = false;
  ns_St_4_Open_1 = false;
  window_status =
    merge ck_5_1
      (true -> window_status_St_4_Closed)(false -> window_status_St_4_Open);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Closed_1)(false -> ns_St_4_Open_1);
  nr = merge ck_5_1 (true -> nr_St_4_Closed)(false -> nr_St_4_Open);
  ck_1 = true fby ns_1;
  r_St_4_Closed = if v then true else (pnr when true(ck_1));
  s_St_4_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_4_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_4_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_4_Closed_1)(false -> s_St_4_Open_1);
  r = merge ck_1 (true -> r_St_4_Closed)(false -> r_St_4_Open)
tel

node air_conditioner(c1 : bool; c2 : bool) returns (air_status : int)
var v_221 : bool; v_220 : bool; v_219 : bool; v_218 : bool; v_217 : bool;
    v_216 : bool; v_215 : int; v_214 : int; ns_St_5_Max_2_0 : bool;
    ns_St_5_Max_2_1 : bool; ns_St_5_Min_2_0 : bool; ns_St_5_Min_2_1 : bool;
    ns_St_5_Off_2_0 : bool; ns_St_5_Off_2_1 : bool; ck_6_2_0 : bool;
    ck_6_2_1 : bool; nr_St_5_Max : bool; ns_St_5_Max_2 : bool;
    ns_St_5_Max_1 : bool; air_status_St_5_Max : int; nr_St_5_Min : bool;
    ns_St_5_Min_2 : bool; ns_St_5_Min_1 : bool; air_status_St_5_Min : int;
    nr_St_5_Off : bool; ns_St_5_Off_2 : bool; ns_St_5_Off_1 : bool;
    air_status_St_5_Off : int; ck_6_2 : bool; ck_6_1 : bool; v_15_2_0 : bool;
    v_15_2_1 : bool; v_16 : bool; v_15_2 : bool; v_15_1 : bool; v_14 : bool;
    v_12_2_0 : bool; v_12_2_1 : bool; v_13 : bool; v_12_2 : bool;
    v_12_1 : bool; v_11 : bool; v_10 : bool; v_8_2_0 : bool; v_8_2_1 : bool;
    v_9 : bool; v_8_2 : bool; v_8_1 : bool; v_7 : bool; v : bool;
    v_229 : bool; v_228 : bool; v_227 : bool; v_226 : bool; v_225 : bool;
    v_224 : bool; v_223 : bool; v_222 : bool; s_St_5_Max_2_0 : bool;
    s_St_5_Max_2_1 : bool; s_St_5_Min_2_0 : bool; s_St_5_Min_2_1 : bool;
    s_St_5_Off_2_0 : bool; s_St_5_Off_2_1 : bool; ck_2_0 : bool;
    ck_2_1 : bool; r_St_5_Max : bool; s_St_5_Max_2 : bool;
    s_St_5_Max_1 : bool; r_St_5_Min : bool; s_St_5_Min_2 : bool;
    s_St_5_Min_1 : bool; r_St_5_Off : bool; s_St_5_Off_2 : bool;
    s_St_5_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  ck_6_2 = s_2;
  air_status_St_5_Off = 0;
  nr_St_5_Off = false;
  ns_St_5_Off_1 = false;
  ns_St_5_Off_2 = false;
  air_status_St_5_Min = 1;
  nr_St_5_Min = false;
  ns_St_5_Min_1 = true;
  ns_St_5_Min_2 = false;
  air_status_St_5_Max = 2;
  nr_St_5_Max = false;
  ns_St_5_Max_1 = true;
  ns_St_5_Max_2 = true;
  v_214 =
    merge ck_6_2_1
      (true -> air_status_St_5_Max)(false -> air_status_St_5_Min);
  v_215 =
    merge ck_6_2_0
      (true -> ((0 when false(ck_6_1)) when true(ck_6_2_0)))
      (false -> air_status_St_5_Off);
  air_status = merge ck_6_1 (true -> v_214)(false -> v_215);
  v_216 = merge ck_6_2_1 (true -> ns_St_5_Max_1)(false -> ns_St_5_Min_1);
  v_217 = merge ck_6_2_1 (true -> ns_St_5_Max_2)(false -> ns_St_5_Min_2);
  v_218 =
    merge ck_6_2_0
      (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
      (false -> ns_St_5_Off_1);
  v_219 =
    merge ck_6_2_0
      (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
      (false -> ns_St_5_Off_2);
  ns_1 = merge ck_6_1 (true -> v_216)(false -> v_218);
  ns_2 = merge ck_6_1 (true -> v_217)(false -> v_219);
  v_220 = merge ck_6_2_1 (true -> nr_St_5_Max)(false -> nr_St_5_Min);
  v_221 =
    merge ck_6_2_0
      (true -> ((true when false(ck_6_1)) when true(ck_6_2_0)))
      (false -> nr_St_5_Off);
  nr = merge ck_6_1 (true -> v_220)(false -> v_221);
  ck_6_2_1 = (ck_6_2 when true(ck_6_1));
  ck_6_2_0 = (ck_6_2 when false(ck_6_1));
  ns_St_5_Off_2_1 = (ns_St_5_Off_2 when true(ns_St_5_Off_1));
  ns_St_5_Off_2_0 = (ns_St_5_Off_2 when false(ns_St_5_Off_1));
  ns_St_5_Min_2_1 = (ns_St_5_Min_2 when true(ns_St_5_Min_1));
  ns_St_5_Min_2_0 = (ns_St_5_Min_2 when false(ns_St_5_Min_1));
  ns_St_5_Max_2_1 = (ns_St_5_Max_2 when true(ns_St_5_Max_1));
  ns_St_5_Max_2_0 = (ns_St_5_Max_2 when false(ns_St_5_Max_1));
  v_222 = false fby ns_1;
  v_223 = false fby ns_2;
  ck_1 = v_222;
  ck_2 = v_223;
  r_St_5_Off =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_16;
  s_St_5_Off_1 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_15_1;
  s_St_5_Off_2 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then false else v_15_2;
  v_16 = if v_14 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_15_1 = if v_14 then true else false;
  v_15_2 = if v_14 then true else false;
  v_14 = not(((c2 when false(ck_1)) when false(ck_2_0)));
  v_15_2_1 = (v_15_2 when true(v_15_1));
  v_15_2_0 = (v_15_2 when false(v_15_1));
  r_St_5_Min = if v_10 then true else v_13;
  s_St_5_Min_1 = if v_10 then false else v_12_1;
  s_St_5_Min_2 = if v_10 then false else v_12_2;
  v_13 = if v_11 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_12_1 = if v_11 then true else true;
  v_12_2 = if v_11 then true else false;
  v_11 = not(((c2 when true(ck_1)) when false(ck_2_1)));
  v_10 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_12_2_1 = (v_12_2 when true(v_12_1));
  v_12_2_0 = (v_12_2 when false(v_12_1));
  r_St_5_Max = if v then true else v_9;
  s_St_5_Max_1 = if v then true else v_8_1;
  s_St_5_Max_2 = if v then false else v_8_2;
  v_9 = if v_7 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_8_1 = if v_7 then false else true;
  v_8_2 = if v_7 then false else true;
  v_7 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_8_2_1 = (v_8_2 when true(v_8_1));
  v_8_2_0 = (v_8_2 when false(v_8_1));
  v_224 = merge ck_2_1 (true -> s_St_5_Max_1)(false -> s_St_5_Min_1);
  v_225 = merge ck_2_1 (true -> s_St_5_Max_2)(false -> s_St_5_Min_2);
  v_226 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_5_Off_1);
  v_227 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_5_Off_2);
  s_1 = merge ck_1 (true -> v_224)(false -> v_226);
  s_2 = merge ck_1 (true -> v_225)(false -> v_227);
  v_228 = merge ck_2_1 (true -> r_St_5_Max)(false -> r_St_5_Min);
  v_229 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_5_Off);
  r = merge ck_1 (true -> v_228)(false -> v_229);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_5_Off_2_1 = (s_St_5_Off_2 when true(s_St_5_Off_1));
  s_St_5_Off_2_0 = (s_St_5_Off_2 when false(s_St_5_Off_1));
  s_St_5_Min_2_1 = (s_St_5_Min_2 when true(s_St_5_Min_1));
  s_St_5_Min_2_0 = (s_St_5_Min_2 when false(s_St_5_Min_1));
  s_St_5_Max_2_1 = (s_St_5_Max_2 when true(s_St_5_Max_1));
  s_St_5_Max_2_0 = (s_St_5_Max_2 when false(s_St_5_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node person(arrived : bool) returns (presence : bool)
var nr_St_6_Present : bool; ns_St_6_Present_1 : bool;
    presence_St_6_Present : bool; nr_St_6_Not_Present : bool;
    ns_St_6_Not_Present_1 : bool; presence_St_6_Not_Present : bool;
    ck_7_1 : bool; r_St_6_Present : bool; s_St_6_Present_1 : bool;
    r_St_6_Not_Present : bool; s_St_6_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  presence_St_6_Not_Present = false;
  nr_St_6_Not_Present = false;
  ns_St_6_Not_Present_1 = true;
  presence_St_6_Present = true;
  nr_St_6_Present = false;
  ns_St_6_Present_1 = false;
  presence =
    merge ck_7_1
      (true -> presence_St_6_Not_Present)(false -> presence_St_6_Present);
  ns_1 =
    merge ck_7_1 (true -> ns_St_6_Not_Present_1)(false -> ns_St_6_Present_1);
  nr = merge ck_7_1 (true -> nr_St_6_Not_Present)(false -> nr_St_6_Present);
  ck_1 = true fby ns_1;
  r_St_6_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_6_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_6_Present =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_6_Present_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_6_Not_Present_1)(false -> s_St_6_Present_1);
  r = merge ck_1 (true -> r_St_6_Not_Present)(false -> r_St_6_Present)
tel

node day_shift(change : bool) returns (night : bool)
var nr_St_7_Noite : bool; ns_St_7_Noite_1 : bool; night_St_7_Noite : bool;
    nr_St_7_Dia : bool; ns_St_7_Dia_1 : bool; night_St_7_Dia : bool;
    ck_8_1 : bool; r_St_7_Noite : bool; s_St_7_Noite_1 : bool;
    r_St_7_Dia : bool; s_St_7_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  night_St_7_Dia = false;
  nr_St_7_Dia = false;
  ns_St_7_Dia_1 = true;
  night_St_7_Noite = true;
  nr_St_7_Noite = false;
  ns_St_7_Noite_1 = false;
  night = merge ck_8_1 (true -> night_St_7_Dia)(false -> night_St_7_Noite);
  ns_1 = merge ck_8_1 (true -> ns_St_7_Dia_1)(false -> ns_St_7_Noite_1);
  nr = merge ck_8_1 (true -> nr_St_7_Dia)(false -> nr_St_7_Noite);
  ck_1 = true fby ns_1;
  r_St_7_Dia =
    if (change when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_7_Dia_1 = if (change when true(ck_1)) then false else true;
  r_St_7_Noite =
    if (change when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_7_Noite_1 = if (change when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_7_Dia_1)(false -> s_St_7_Noite_1);
  r = merge ck_1 (true -> r_St_7_Dia)(false -> r_St_7_Noite)
tel

node controller(change_shift : bool; worker : bool; cleaner : bool;
                 air_failed_recovered : bool; light_switch : bool;
                 light_failed_recovered : bool; blind_switch : bool;
                 blind_failed_recovered : bool; door_failed_recovered : bool;
                 closet_failed_recovered : bool; pc_failed_recovered : bool;
                 window_failed_recovered : bool)
returns (night : bool; worker_presence : bool; cleaner_presence : bool;
          door_status : int; pc_status : int; window_status : int;
          closet_status : int; air_status : int; light_status : int;
          blind_status : int)
contract
  var rule8_5 : bool; rule8 : bool; rule7_5 : bool; rule7 : bool;
      rule6_4 : bool; rule6_3 : bool; rule6_2 : bool; rule6_1 : bool;
      rule6 : bool; rule5 : bool; rule1_2 : bool; rule1_1 : bool;
      rule2 : bool; rule1_3 : bool; rule1 : bool; rule0 : bool; v : bool;
      v_17 : bool; v_18 : bool; v_19 : bool; v_20 : bool; v_21 : bool;
      v_22 : bool; v_23 : bool; v_24 : bool; v_25 : bool; v_26 : bool;
      v_27 : bool; v_28 : bool; v_29 : bool; v_30 : bool; v_31 : bool;
      v_32 : bool; v_33 : bool; v_34 : bool; v_35 : bool; v_36 : bool;
      v_37 : bool; v_38 : bool; v_39 : bool; v_40 : bool; v_41 : bool;
      v_42 : bool; v_43 : bool; v_44 : bool; v_45 : bool; v_46 : bool;
      v_47 : bool; v_48 : bool; v_49 : bool; v_50 : bool; v_51 : bool;
      v_52 : bool; v_53 : bool; v_54 : bool; v_55 : bool; v_56 : bool;
      v_57 : bool; v_58 : bool; v_59 : bool; v_60 : bool; v_61 : bool;
      v_62 : bool; v_63 : bool; v_64 : bool; v_65 : bool; v_66 : bool;
      v_67 : bool; v_68 : bool; v_69 : bool; v_70 : bool; v_71 : bool;
      v_72 : bool; v_73 : bool; v_74 : bool; v_75 : bool; v_76 : bool;
      v_77 : bool; v_78 : bool; v_79 : bool; v_80 : bool; v_81 : bool;
      v_82 : bool; v_83 : bool; v_84 : bool; v_85 : bool; v_86 : bool;
      v_87 : bool; v_88 : bool; v_89 : bool; v_90 : bool; v_91 : bool;
      v_92 : bool; v_93 : bool; v_94 : bool; v_95 : bool; v_96 : bool;
      v_97 : bool; v_98 : bool; v_99 : bool; v_100 : bool; v_101 : bool;
      v_102 : bool; v_103 : bool; v_104 : bool; v_105 : bool; v_106 : bool;
      v_107 : bool; v_108 : bool; v_109 : bool; v_110 : bool; v_111 : bool;
      v_112 : bool; v_113 : bool; v_114 : bool; v_115 : bool; v_116 : bool;
      v_117 : bool; v_118 : bool; v_119 : bool; v_120 : bool; v_121 : bool;
      v_122 : bool; v_123 : bool; v_124 : bool; v_125 : bool; v_126 : bool;
      v_127 : bool; v_128 : bool; v_129 : bool; v_130 : bool; v_131 : bool;
      v_132 : bool; v_133 : bool; v_134 : bool; v_135 : bool; v_136 : bool;
      v_137 : bool; v_138 : bool; v_139 : bool; v_140 : bool; v_141 : bool;
      v_142 : bool; v_143 : bool; v_144 : bool; v_145 : bool; v_146 : bool;
      v_147 : bool; v_148 : bool; v_149 : bool; v_150 : bool; v_151 : bool;
      v_152 : bool; v_153 : bool; v_154 : bool; v_155 : bool; v_156 : bool;
      v_157 : bool; v_158 : bool; v_159 : bool; v_160 : bool; v_161 : bool;
      v_162 : bool; v_163 : bool; v_164 : bool; v_165 : bool; v_166 : bool;
      v_167 : bool; v_168 : bool; v_169 : bool; v_170 : bool; v_171 : bool;
      v_172 : bool; v_173 : bool; v_174 : bool; v_175 : bool; v_176 : bool;
      v_177 : bool; v_178 : bool; v_179 : bool; v_180 : bool; v_181 : bool;
      v_182 : bool; v_183 : bool; v_184 : bool; v_185 : bool;
  let
    v = not(cleaner_presence);
    v_17 = (closet_status <= 1);
    v_18 = (v & v_17);
    v_19 = not(v_18);
    v_20 = (closet_status = 0);
    rule8_5 = (v_19 or v_20);
    v_21 = (closet_status <= 1);
    v_22 = (cleaner_presence & v_21);
    v_23 = not(v_22);
    v_24 = (closet_status = 1);
    rule8 = (v_23 or v_24);
    v_25 = not(worker_presence);
    v_26 = (pc_status <= 1);
    v_27 = (v_25 & v_26);
    v_28 = not(v_27);
    v_29 = (pc_status = 0);
    rule7_5 = (v_28 or v_29);
    v_30 = (pc_status <= 1);
    v_31 = (worker_presence & v_30);
    v_32 = not(v_31);
    v_33 = (pc_status = 1);
    rule7 = (v_32 or v_33);
    v_34 = (worker_presence or cleaner_presence);
    v_35 = (air_status >= 3);
    v_36 = (v_34 & v_35);
    v_37 = (blind_status <= 1);
    v_38 = (v_36 & v_37);
    v_39 = (window_status <= 1);
    v_40 = (v_38 & v_39);
    v_41 = (door_status >= 2);
    v_42 = (v_40 & v_41);
    v_43 = not(v_42);
    v_44 = (blind_status = 1);
    v_45 = (window_status = 1);
    v_46 = (v_44 & v_45);
    v_47 = (door_status = 1);
    v_48 = not(v_47);
    v_49 = (v_46 & v_48);
    rule6_4 = (v_43 or v_49);
    v_50 = (worker_presence or cleaner_presence);
    v_51 = (air_status >= 3);
    v_52 = (v_50 & v_51);
    v_53 = (window_status >= 2);
    v_54 = (v_52 & v_53);
    v_55 = (door_status <= 1);
    v_56 = (v_54 & v_55);
    v_57 = not(v_56);
    v_58 = (door_status = 1);
    rule6_3 = (v_57 or v_58);
    v_59 = (worker_presence or cleaner_presence);
    v_60 = (air_status >= 3);
    v_61 = (v_59 & v_60);
    v_62 = (blind_status >= 2);
    v_63 = (v_61 & v_62);
    v_64 = (door_status <= 1);
    v_65 = (v_63 & v_64);
    v_66 = not(v_65);
    v_67 = (window_status = 1);
    v_68 = not(v_67);
    v_69 = (door_status = 1);
    v_70 = (v_68 & v_69);
    rule6_2 = (v_66 or v_70);
    v_71 = (worker_presence or cleaner_presence);
    v_72 = (air_status >= 3);
    v_73 = (v_71 & v_72);
    v_74 = (blind_status <= 1);
    v_75 = (v_73 & v_74);
    v_76 = (window_status <= 1);
    v_77 = (v_75 & v_76);
    v_78 = (door_status <= 1);
    v_79 = (v_77 & v_78);
    v_80 = not(v_79);
    v_81 = (blind_status = 1);
    v_82 = (window_status = 1);
    v_83 = (v_81 & v_82);
    v_84 = (door_status = 1);
    v_85 = (v_83 & v_84);
    rule6_1 = (v_80 or v_85);
    v_86 = (worker_presence & cleaner_presence);
    v_87 = not(v_86);
    v_88 = (worker_presence or cleaner_presence);
    v_89 = (v_87 & v_88);
    v_90 = (air_status <= 2);
    v_91 = (v_89 & v_90);
    v_92 = not(v_91);
    v_93 = (air_status = 1);
    v_94 = (door_status = 1);
    v_95 = not(v_94);
    v_96 = (v_93 & v_95);
    v_97 = (window_status = 1);
    v_98 = not(v_97);
    v_99 = (v_96 & v_98);
    rule6 = (v_92 or v_99);
    v_100 = (worker_presence & cleaner_presence);
    v_101 = (air_status <= 2);
    v_102 = (v_100 & v_101);
    v_103 = not(v_102);
    v_104 = (air_status = 2);
    rule5 = (v_103 or v_104);
    v_105 = (worker_presence or cleaner_presence);
    v_106 = (light_status <= 1);
    v_107 = (v_105 & v_106);
    v_108 = (blind_status >= 2);
    v_109 = (v_107 & v_108);
    v_110 = not(v_109);
    v_111 = (light_status = 1);
    rule1_2 = (v_110 or v_111);
    v_112 = (worker_presence or cleaner_presence);
    v_113 = (light_status >= 2);
    v_114 = (v_112 & v_113);
    v_115 = (blind_status <= 1);
    v_116 = (v_114 & v_115);
    v_117 = not(v_116);
    v_118 = (blind_status = 1);
    rule1_1 = (v_117 or v_118);
    v_119 = (worker_presence or cleaner_presence);
    v_120 = not(night);
    v_121 = (v_119 & v_120);
    v_122 = (light_status <= 1);
    v_123 = (v_121 & v_122);
    v_124 = (blind_status <= 1);
    v_125 = (v_123 & v_124);
    v_126 = not(v_125);
    v_127 = (light_status = 1);
    v_128 = (blind_status = 1);
    v_129 = (v_127 or v_128);
    rule2 = (v_126 or v_129);
    v_130 = (worker_presence or cleaner_presence);
    v_131 = (v_130 & night);
    v_132 = (light_status >= 2);
    v_133 = (v_131 & v_132);
    v_134 = (blind_status <= 1);
    v_135 = (v_133 & v_134);
    v_136 = not(v_135);
    v_137 = (blind_status = 1);
    rule1_3 = (v_136 or v_137);
    v_138 = (worker_presence or cleaner_presence);
    v_139 = (v_138 & night);
    v_140 = (light_status <= 1);
    v_141 = (v_139 & v_140);
    v_142 = not(v_141);
    v_143 = (light_status = 1);
    rule1 = (v_142 or v_143);
    v_144 = not(worker_presence);
    v_145 = not(cleaner_presence);
    v_146 = (v_144 & v_145);
    v_147 = not(v_146);
    v_148 = (air_status = 1);
    v_149 = not(v_148);
    v_150 = (air_status = 2);
    v_151 = not(v_150);
    v_152 = (v_149 & v_151);
    v_153 = (light_status = 1);
    v_154 = not(v_153);
    v_155 = (v_152 & v_154);
    v_156 = (blind_status = 1);
    v_157 = not(v_156);
    v_158 = (v_155 & v_157);
    v_159 = (door_status = 1);
    v_160 = not(v_159);
    v_161 = (v_158 & v_160);
    v_162 = (pc_status = 1);
    v_163 = not(v_162);
    v_164 = (v_161 & v_163);
    v_165 = (window_status = 1);
    v_166 = not(v_165);
    v_167 = (v_164 & v_166);
    v_168 = (closet_status = 1);
    v_169 = not(v_168);
    v_170 = (v_167 & v_169);
    rule0 = (v_147 or v_170);
    v_171 = (rule0 & rule1);
    v_172 = (v_171 & rule1_3);
    v_173 = (v_172 & rule2);
    v_174 = (v_173 & rule1_1);
    v_175 = (v_174 & rule1_2);
    v_176 = (v_175 & rule5);
    v_177 = (v_176 & rule6);
    v_178 = (v_177 & rule6_1);
    v_179 = (v_178 & rule6_2);
    v_180 = (v_179 & rule6_3);
    v_181 = (v_180 & rule6_4);
    v_182 = (v_181 & rule7);
    v_183 = (v_182 & rule7_5);
    v_184 = (v_183 & rule8);
    v_185 = (v_184 & rule8_5)
  tel
  assume true@ enforce v_185]
                 with (c_blind_2 : bool; c_light_2 : bool; c_blind_1 : bool;
                        c_light_1 : bool; c_closet : bool; c_air_2 : bool;
                        c_air_1 : bool; c_window : bool; c_pc : bool;
                        c_door : bool)
                 var nr_St_8_On : bool; ns_St_8_On_1 : bool;
                     light_source_status_1_St_8_On : int; nr_St_8_Off : bool;
                     ns_St_8_Off_1 : bool;
                     light_source_status_1_St_8_Off : int; ck_27_1 : bool;
                     v_213 : bool; v_212 : bool; v_211 : bool; v_210 : bool;
                     v_209 : bool; v_208 : bool; r_St_8_On : bool;
                     s_St_8_On_1 : bool; r_St_8_Off : bool;
                     s_St_8_Off_1 : bool; ck_26_1 : bool;
                     nr_1_St_9_On : bool; ns_1_St_9_On_1 : bool;
                     light_source_status_St_9_On : int; nr_1_St_9_Off : bool;
                     ns_1_St_9_Off_1 : bool;
                     light_source_status_St_9_Off : int; ck_25_1 : bool;
                     v_207 : bool; v_206 : bool; v_205 : bool; v_204 : bool;
                     v_203 : bool; v_202 : bool; r_1_St_9_On : bool;
                     s_1_St_9_On_1 : bool; r_1_St_9_Off : bool;
                     s_1_St_9_Off_1 : bool; ck_24_1 : bool; v_237 : bool;
                     v_236 : bool; v_235 : bool; v_234 : bool; v_233 : bool;
                     v_232 : bool; v_231 : int; v_230 : int;
                     ns_2_St_10_Max_2_0 : bool; ns_2_St_10_Max_2_1 : bool;
                     ns_2_St_10_Min_2_0 : bool; ns_2_St_10_Min_2_1 : bool;
                     ns_2_St_10_Off_2_0 : bool; ns_2_St_10_Off_2_1 : bool;
                     ck_23_2_0 : bool; ck_23_2_1 : bool;
                     nr_2_St_10_Max : bool; ns_2_St_10_Max_2 : bool;
                     ns_2_St_10_Max_1 : bool; air_status_1_St_10_Max : int;
                     nr_2_St_10_Min : bool; ns_2_St_10_Min_2 : bool;
                     ns_2_St_10_Min_1 : bool; air_status_1_St_10_Min : int;
                     nr_2_St_10_Off : bool; ns_2_St_10_Off_2 : bool;
                     ns_2_St_10_Off_1 : bool; air_status_1_St_10_Off : int;
                     ck_23_2 : bool; ck_23_1 : bool; v_200_2_0 : bool;
                     v_200_2_1 : bool; v_201 : bool; v_200_2 : bool;
                     v_200_1 : bool; v_199 : bool; v_197_2_0 : bool;
                     v_197_2_1 : bool; v_198 : bool; v_197_2 : bool;
                     v_197_1 : bool; v_196 : bool; v_195 : bool;
                     v_193_2_0 : bool; v_193_2_1 : bool; v_194 : bool;
                     v_193_2 : bool; v_193_1 : bool; v_192 : bool;
                     v_191 : bool; v_245 : bool; v_244 : bool; v_243 : bool;
                     v_242 : bool; v_241 : bool; v_240 : bool; v_239 : bool;
                     v_238 : bool; s_2_St_10_Max_2_0 : bool;
                     s_2_St_10_Max_2_1 : bool; s_2_St_10_Min_2_0 : bool;
                     s_2_St_10_Min_2_1 : bool; s_2_St_10_Off_2_0 : bool;
                     s_2_St_10_Off_2_1 : bool; ck_22_2_0 : bool;
                     ck_22_2_1 : bool; r_2_St_10_Max : bool;
                     s_2_St_10_Max_2 : bool; s_2_St_10_Max_1 : bool;
                     r_2_St_10_Min : bool; s_2_St_10_Min_2 : bool;
                     s_2_St_10_Min_1 : bool; r_2_St_10_Off : bool;
                     s_2_St_10_Off_2 : bool; s_2_St_10_Off_1 : bool;
                     ck_22_2 : bool; ck_22_1 : bool; nr_3_St_11_Open : bool;
                     ns_3_St_11_Open_1 : bool;
                     window_status_1_St_11_Open : int;
                     nr_3_St_11_Closed : bool; ns_3_St_11_Closed_1 : bool;
                     window_status_1_St_11_Closed : int; ck_21_1 : bool;
                     v_190 : bool; r_3_St_11_Open : bool;
                     s_3_St_11_Open_1 : bool; r_3_St_11_Closed : bool;
                     s_3_St_11_Closed_1 : bool; ck_20_1 : bool;
                     nr_4_St_12_Open : bool; ns_4_St_12_Open_1 : bool;
                     closet_status_1_St_12_Open : int;
                     nr_4_St_12_Locked : bool; ns_4_St_12_Locked_1 : bool;
                     closet_status_1_St_12_Locked : int; ck_19_1 : bool;
                     v_189 : bool; r_4_St_12_Open : bool;
                     s_4_St_12_Open_1 : bool; r_4_St_12_Locked : bool;
                     s_4_St_12_Locked_1 : bool; ck_18_1 : bool;
                     nr_5_St_13_Open : bool; ns_5_St_13_Open_1 : bool;
                     door_status_1_St_13_Open : int;
                     nr_5_St_13_Closed : bool; ns_5_St_13_Closed_1 : bool;
                     door_status_1_St_13_Closed : int; ck_17_1 : bool;
                     v_188 : bool; v_187 : bool; r_5_St_13_Open : bool;
                     s_5_St_13_Open_1 : bool; r_5_St_13_Closed : bool;
                     s_5_St_13_Closed_1 : bool; ck_16_1 : bool;
                     nr_6_St_14_On : bool; ns_6_St_14_On_1 : bool;
                     computer_on_St_14_On : int; nr_6_St_14_Off : bool;
                     ns_6_St_14_Off_1 : bool; computer_on_St_14_Off : int;
                     ck_15_1 : bool; v_186 : bool; r_6_St_14_On : bool;
                     s_6_St_14_On_1 : bool; r_6_St_14_Off : bool;
                     s_6_St_14_Off_1 : bool; ck_14_1 : bool;
                     nr_7_St_15_Present : bool; ns_7_St_15_Present_1 : bool;
                     presence_1_St_15_Present : bool;
                     nr_7_St_15_Not_Present : bool;
                     ns_7_St_15_Not_Present_1 : bool;
                     presence_1_St_15_Not_Present : bool; ck_13_1 : bool;
                     r_7_St_15_Present : bool; s_7_St_15_Present_1 : bool;
                     r_7_St_15_Not_Present : bool;
                     s_7_St_15_Not_Present_1 : bool; ck_12_1 : bool;
                     nr_8_St_16_Present : bool; ns_8_St_16_Present_1 : bool;
                     presence_St_16_Present : bool;
                     nr_8_St_16_Not_Present : bool;
                     ns_8_St_16_Not_Present_1 : bool;
                     presence_St_16_Not_Present : bool; ck_11_1 : bool;
                     r_8_St_16_Present : bool; s_8_St_16_Present_1 : bool;
                     r_8_St_16_Not_Present : bool;
                     s_8_St_16_Not_Present_1 : bool; ck_10_1 : bool;
                     nr_9_St_17_Noite : bool; ns_9_St_17_Noite_1 : bool;
                     night_1_St_17_Noite : bool; nr_9_St_17_Dia : bool;
                     ns_9_St_17_Dia_1 : bool; night_1_St_17_Dia : bool;
                     ck_9_1 : bool; r_9_St_17_Noite : bool;
                     s_9_St_17_Noite_1 : bool; r_9_St_17_Dia : bool;
                     s_9_St_17_Dia_1 : bool; ck_1 : bool; s_2_2_0 : bool;
                     s_2_2_1 : bool; ns_2_2_0 : bool; ns_2_2_1 : bool;
                     s_9_1 : bool; ns_9_1 : bool; r_9 : bool; nr_9 : bool;
                     pnr_9 : bool; s_8_1 : bool; ns_8_1 : bool; r_8 : bool;
                     nr_8 : bool; pnr_8 : bool; s_7_1 : bool; ns_7_1 : bool;
                     r_7 : bool; nr_7 : bool; pnr_7 : bool; s_6_1 : bool;
                     ns_6_1 : bool; r_6 : bool; nr_6 : bool; pnr_6 : bool;
                     s_5_1 : bool; ns_5_1 : bool; r_5 : bool; nr_5 : bool;
                     pnr_5 : bool; s_4_1 : bool; ns_4_1 : bool; r_4 : bool;
                     nr_4 : bool; pnr_4 : bool; s_3_1 : bool; ns_3_1 : bool;
                     r_3 : bool; nr_3 : bool; pnr_3 : bool; s_2_2 : bool;
                     s_2_1 : bool; ns_2_2 : bool; ns_2_1 : bool; r_2 : bool;
                     nr_2 : bool; pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool;
                     r_1 : bool; nr_1 : bool; pnr_1 : bool; s_1_2 : bool;
                     ns_1_2 : bool; r : bool; nr : bool; pnr : bool;
                     sw_1 : bool; c1_2 : bool; c2_2 : bool;
                     light_source_status_1 : int; sw : bool; c1_1 : bool;
                     c2_1 : bool; light_source_status : int; c1 : bool;
                     c2 : bool; air_status_1 : int; c_3 : bool;
                     window_status_1 : int; c_2 : bool;
                     closet_status_1 : int; c_1 : bool; door_status_1 : int;
                     c : bool; computer_on : int; arrived_1 : bool;
                     presence_1 : bool; arrived : bool; presence : bool;
                     change : bool; night_1 : bool;
  let
    sw_1 = blind_switch;
    c1_2 = c_blind_1;
    c2_2 = c_blind_2;
    pnr = false fby nr;
    ck_27_1 = s_1_2;
    light_source_status_1_St_8_Off = 0;
    nr_St_8_Off = false;
    ns_St_8_Off_1 = true;
    light_source_status_1_St_8_On = 1;
    nr_St_8_On = false;
    ns_St_8_On_1 = false;
    light_source_status_1 =
      merge ck_27_1
        (true -> light_source_status_1_St_8_Off)
        (false -> light_source_status_1_St_8_On);
    ns_1_2 = merge ck_27_1 (true -> ns_St_8_Off_1)(false -> ns_St_8_On_1);
    nr = merge ck_27_1 (true -> nr_St_8_Off)(false -> nr_St_8_On);
    ck_26_1 = true fby ns_1_2;
    r_St_8_Off = if v_213 then true else (pnr when true(ck_26_1));
    s_St_8_Off_1 = if v_213 then false else true;
    v_213 = (v_211 or v_212);
    v_212 = not((c2_2 when true(ck_26_1)));
    v_211 = ((c1_2 when true(ck_26_1)) & (sw_1 when true(ck_26_1)));
    r_St_8_On = if v_210 then true else (pnr when false(ck_26_1));
    s_St_8_On_1 = if v_210 then true else false;
    v_210 = (v_208 or v_209);
    v_209 = not((c2_2 when false(ck_26_1)));
    v_208 = ((c1_2 when false(ck_26_1)) & (sw_1 when false(ck_26_1)));
    s_1_2 = merge ck_26_1 (true -> s_St_8_Off_1)(false -> s_St_8_On_1);
    r = merge ck_26_1 (true -> r_St_8_Off)(false -> r_St_8_On);
    sw = light_switch;
    c1_1 = c_light_1;
    c2_1 = c_light_2;
    pnr_1 = false fby nr_1;
    ck_25_1 = s_1_1;
    light_source_status_St_9_Off = 0;
    nr_1_St_9_Off = false;
    ns_1_St_9_Off_1 = true;
    light_source_status_St_9_On = 1;
    nr_1_St_9_On = false;
    ns_1_St_9_On_1 = false;
    light_source_status =
      merge ck_25_1
        (true -> light_source_status_St_9_Off)
        (false -> light_source_status_St_9_On);
    ns_1_1 = merge ck_25_1 (true -> ns_1_St_9_Off_1)(false -> ns_1_St_9_On_1);
    nr_1 = merge ck_25_1 (true -> nr_1_St_9_Off)(false -> nr_1_St_9_On);
    ck_24_1 = true fby ns_1_1;
    r_1_St_9_Off = if v_207 then true else (pnr_1 when true(ck_24_1));
    s_1_St_9_Off_1 = if v_207 then false else true;
    v_207 = (v_205 or v_206);
    v_206 = not((c2_1 when true(ck_24_1)));
    v_205 = ((c1_1 when true(ck_24_1)) & (sw when true(ck_24_1)));
    r_1_St_9_On = if v_204 then true else (pnr_1 when false(ck_24_1));
    s_1_St_9_On_1 = if v_204 then true else false;
    v_204 = (v_202 or v_203);
    v_203 = not((c2_1 when false(ck_24_1)));
    v_202 = ((c1_1 when false(ck_24_1)) & (sw when false(ck_24_1)));
    s_1_1 = merge ck_24_1 (true -> s_1_St_9_Off_1)(false -> s_1_St_9_On_1);
    r_1 = merge ck_24_1 (true -> r_1_St_9_Off)(false -> r_1_St_9_On);
    c1 = c_air_1;
    c2 = c_air_2;
    pnr_2 = false fby nr_2;
    ck_23_1 = s_2_1;
    ck_23_2 = s_2_2;
    air_status_1_St_10_Off = 0;
    nr_2_St_10_Off = false;
    ns_2_St_10_Off_1 = false;
    ns_2_St_10_Off_2 = false;
    air_status_1_St_10_Min = 1;
    nr_2_St_10_Min = false;
    ns_2_St_10_Min_1 = true;
    ns_2_St_10_Min_2 = false;
    air_status_1_St_10_Max = 2;
    nr_2_St_10_Max = false;
    ns_2_St_10_Max_1 = true;
    ns_2_St_10_Max_2 = true;
    v_230 =
      merge ck_23_2_1
        (true -> air_status_1_St_10_Max)(false -> air_status_1_St_10_Min);
    v_231 =
      merge ck_23_2_0
        (true -> ((0 when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> air_status_1_St_10_Off);
    air_status_1 = merge ck_23_1 (true -> v_230)(false -> v_231);
    v_232 =
      merge ck_23_2_1 (true -> ns_2_St_10_Max_1)(false -> ns_2_St_10_Min_1);
    v_233 =
      merge ck_23_2_1 (true -> ns_2_St_10_Max_2)(false -> ns_2_St_10_Min_2);
    v_234 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> ns_2_St_10_Off_1);
    v_235 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> ns_2_St_10_Off_2);
    ns_2_1 = merge ck_23_1 (true -> v_232)(false -> v_234);
    ns_2_2 = merge ck_23_1 (true -> v_233)(false -> v_235);
    v_236 = merge ck_23_2_1 (true -> nr_2_St_10_Max)(false -> nr_2_St_10_Min);
    v_237 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> nr_2_St_10_Off);
    nr_2 = merge ck_23_1 (true -> v_236)(false -> v_237);
    ck_23_2_1 = (ck_23_2 when true(ck_23_1));
    ck_23_2_0 = (ck_23_2 when false(ck_23_1));
    ns_2_St_10_Off_2_1 = (ns_2_St_10_Off_2 when true(ns_2_St_10_Off_1));
    ns_2_St_10_Off_2_0 = (ns_2_St_10_Off_2 when false(ns_2_St_10_Off_1));
    ns_2_St_10_Min_2_1 = (ns_2_St_10_Min_2 when true(ns_2_St_10_Min_1));
    ns_2_St_10_Min_2_0 = (ns_2_St_10_Min_2 when false(ns_2_St_10_Min_1));
    ns_2_St_10_Max_2_1 = (ns_2_St_10_Max_2 when true(ns_2_St_10_Max_1));
    ns_2_St_10_Max_2_0 = (ns_2_St_10_Max_2 when false(ns_2_St_10_Max_1));
    v_238 = false fby ns_2_1;
    v_239 = false fby ns_2_2;
    ck_22_1 = v_238;
    ck_22_2 = v_239;
    r_2_St_10_Off =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0))
      then true
      else v_201;
    s_2_St_10_Off_1 =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0))
      then true
      else v_200_1;
    s_2_St_10_Off_2 =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0))
      then false
      else v_200_2;
    v_201 =
      if v_199
      then true
      else ((pnr_2 when false(ck_22_1)) when false(ck_22_2_0));
    v_200_1 = if v_199 then true else false;
    v_200_2 = if v_199 then true else false;
    v_199 = not(((c2 when false(ck_22_1)) when false(ck_22_2_0)));
    v_200_2_1 = (v_200_2 when true(v_200_1));
    v_200_2_0 = (v_200_2 when false(v_200_1));
    r_2_St_10_Min = if v_195 then true else v_198;
    s_2_St_10_Min_1 = if v_195 then false else v_197_1;
    s_2_St_10_Min_2 = if v_195 then false else v_197_2;
    v_198 =
      if v_196
      then true
      else ((pnr_2 when true(ck_22_1)) when false(ck_22_2_1));
    v_197_1 = if v_196 then true else true;
    v_197_2 = if v_196 then true else false;
    v_196 = not(((c2 when true(ck_22_1)) when false(ck_22_2_1)));
    v_195 = not(((c1 when true(ck_22_1)) when false(ck_22_2_1)));
    v_197_2_1 = (v_197_2 when true(v_197_1));
    v_197_2_0 = (v_197_2 when false(v_197_1));
    r_2_St_10_Max = if v_191 then true else v_194;
    s_2_St_10_Max_1 = if v_191 then true else v_193_1;
    s_2_St_10_Max_2 = if v_191 then false else v_193_2;
    v_194 =
      if v_192
      then true
      else ((pnr_2 when true(ck_22_1)) when true(ck_22_2_1));
    v_193_1 = if v_192 then false else true;
    v_193_2 = if v_192 then false else true;
    v_192 = not(((c2 when true(ck_22_1)) when true(ck_22_2_1)));
    v_191 = not(((c1 when true(ck_22_1)) when true(ck_22_2_1)));
    v_193_2_1 = (v_193_2 when true(v_193_1));
    v_193_2_0 = (v_193_2 when false(v_193_1));
    v_240 =
      merge ck_22_2_1 (true -> s_2_St_10_Max_1)(false -> s_2_St_10_Min_1);
    v_241 =
      merge ck_22_2_1 (true -> s_2_St_10_Max_2)(false -> s_2_St_10_Min_2);
    v_242 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> s_2_St_10_Off_1);
    v_243 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> s_2_St_10_Off_2);
    s_2_1 = merge ck_22_1 (true -> v_240)(false -> v_242);
    s_2_2 = merge ck_22_1 (true -> v_241)(false -> v_243);
    v_244 = merge ck_22_2_1 (true -> r_2_St_10_Max)(false -> r_2_St_10_Min);
    v_245 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> r_2_St_10_Off);
    r_2 = merge ck_22_1 (true -> v_244)(false -> v_245);
    ck_22_2_1 = (ck_22_2 when true(ck_22_1));
    ck_22_2_0 = (ck_22_2 when false(ck_22_1));
    s_2_St_10_Off_2_1 = (s_2_St_10_Off_2 when true(s_2_St_10_Off_1));
    s_2_St_10_Off_2_0 = (s_2_St_10_Off_2 when false(s_2_St_10_Off_1));
    s_2_St_10_Min_2_1 = (s_2_St_10_Min_2 when true(s_2_St_10_Min_1));
    s_2_St_10_Min_2_0 = (s_2_St_10_Min_2 when false(s_2_St_10_Min_1));
    s_2_St_10_Max_2_1 = (s_2_St_10_Max_2 when true(s_2_St_10_Max_1));
    s_2_St_10_Max_2_0 = (s_2_St_10_Max_2 when false(s_2_St_10_Max_1));
    c_3 = c_window;
    pnr_3 = false fby nr_3;
    ck_21_1 = s_3_1;
    window_status_1_St_11_Closed = 0;
    nr_3_St_11_Closed = false;
    ns_3_St_11_Closed_1 = true;
    window_status_1_St_11_Open = 1;
    nr_3_St_11_Open = false;
    ns_3_St_11_Open_1 = false;
    window_status_1 =
      merge ck_21_1
        (true -> window_status_1_St_11_Closed)
        (false -> window_status_1_St_11_Open);
    ns_3_1 =
      merge ck_21_1 (true -> ns_3_St_11_Closed_1)(false -> ns_3_St_11_Open_1);
    nr_3 =
      merge ck_21_1 (true -> nr_3_St_11_Closed)(false -> nr_3_St_11_Open);
    ck_20_1 = true fby ns_3_1;
    r_3_St_11_Closed = if v_190 then true else (pnr_3 when true(ck_20_1));
    s_3_St_11_Closed_1 = if v_190 then false else true;
    v_190 = not((c_3 when true(ck_20_1)));
    r_3_St_11_Open =
      if (c_3 when false(ck_20_1)) then true else (pnr_3 when false(ck_20_1));
    s_3_St_11_Open_1 = if (c_3 when false(ck_20_1)) then true else false;
    s_3_1 =
      merge ck_20_1 (true -> s_3_St_11_Closed_1)(false -> s_3_St_11_Open_1);
    r_3 = merge ck_20_1 (true -> r_3_St_11_Closed)(false -> r_3_St_11_Open);
    c_2 = c_closet;
    pnr_4 = false fby nr_4;
    ck_19_1 = s_4_1;
    closet_status_1_St_12_Locked = 0;
    nr_4_St_12_Locked = false;
    ns_4_St_12_Locked_1 = true;
    closet_status_1_St_12_Open = 1;
    nr_4_St_12_Open = false;
    ns_4_St_12_Open_1 = false;
    closet_status_1 =
      merge ck_19_1
        (true -> closet_status_1_St_12_Locked)
        (false -> closet_status_1_St_12_Open);
    ns_4_1 =
      merge ck_19_1 (true -> ns_4_St_12_Locked_1)(false -> ns_4_St_12_Open_1);
    nr_4 =
      merge ck_19_1 (true -> nr_4_St_12_Locked)(false -> nr_4_St_12_Open);
    ck_18_1 = true fby ns_4_1;
    r_4_St_12_Locked = if v_189 then true else (pnr_4 when true(ck_18_1));
    s_4_St_12_Locked_1 = if v_189 then false else true;
    v_189 = not((c_2 when true(ck_18_1)));
    r_4_St_12_Open =
      if (c_2 when false(ck_18_1)) then true else (pnr_4 when false(ck_18_1));
    s_4_St_12_Open_1 = if (c_2 when false(ck_18_1)) then true else false;
    s_4_1 =
      merge ck_18_1 (true -> s_4_St_12_Locked_1)(false -> s_4_St_12_Open_1);
    r_4 = merge ck_18_1 (true -> r_4_St_12_Locked)(false -> r_4_St_12_Open);
    c_1 = c_door;
    pnr_5 = false fby nr_5;
    ck_17_1 = s_5_1;
    door_status_1_St_13_Closed = 0;
    nr_5_St_13_Closed = false;
    ns_5_St_13_Closed_1 = true;
    door_status_1_St_13_Open = 1;
    nr_5_St_13_Open = false;
    ns_5_St_13_Open_1 = false;
    door_status_1 =
      merge ck_17_1
        (true -> door_status_1_St_13_Closed)
        (false -> door_status_1_St_13_Open);
    ns_5_1 =
      merge ck_17_1 (true -> ns_5_St_13_Closed_1)(false -> ns_5_St_13_Open_1);
    nr_5 =
      merge ck_17_1 (true -> nr_5_St_13_Closed)(false -> nr_5_St_13_Open);
    ck_16_1 = true fby ns_5_1;
    r_5_St_13_Closed = if v_188 then true else (pnr_5 when true(ck_16_1));
    s_5_St_13_Closed_1 = if v_188 then false else true;
    v_188 = not((c_1 when true(ck_16_1)));
    r_5_St_13_Open = if v_187 then true else (pnr_5 when false(ck_16_1));
    s_5_St_13_Open_1 = if v_187 then true else false;
    v_187 = not((c_1 when false(ck_16_1)));
    s_5_1 =
      merge ck_16_1 (true -> s_5_St_13_Closed_1)(false -> s_5_St_13_Open_1);
    r_5 = merge ck_16_1 (true -> r_5_St_13_Closed)(false -> r_5_St_13_Open);
    c = c_pc;
    pnr_6 = false fby nr_6;
    ck_15_1 = s_6_1;
    computer_on_St_14_Off = 0;
    nr_6_St_14_Off = false;
    ns_6_St_14_Off_1 = true;
    computer_on_St_14_On = 1;
    nr_6_St_14_On = false;
    ns_6_St_14_On_1 = false;
    computer_on =
      merge ck_15_1
        (true -> computer_on_St_14_Off)(false -> computer_on_St_14_On);
    ns_6_1 =
      merge ck_15_1 (true -> ns_6_St_14_Off_1)(false -> ns_6_St_14_On_1);
    nr_6 = merge ck_15_1 (true -> nr_6_St_14_Off)(false -> nr_6_St_14_On);
    ck_14_1 = true fby ns_6_1;
    r_6_St_14_Off =
      if (c when true(ck_14_1)) then true else (pnr_6 when true(ck_14_1));
    s_6_St_14_Off_1 = if (c when true(ck_14_1)) then false else true;
    r_6_St_14_On = if v_186 then true else (pnr_6 when false(ck_14_1));
    s_6_St_14_On_1 = if v_186 then true else false;
    v_186 = not((c when false(ck_14_1)));
    s_6_1 = merge ck_14_1 (true -> s_6_St_14_Off_1)(false -> s_6_St_14_On_1);
    r_6 = merge ck_14_1 (true -> r_6_St_14_Off)(false -> r_6_St_14_On);
    arrived_1 = cleaner;
    pnr_7 = false fby nr_7;
    ck_13_1 = s_7_1;
    presence_1_St_15_Not_Present = false;
    nr_7_St_15_Not_Present = false;
    ns_7_St_15_Not_Present_1 = true;
    presence_1_St_15_Present = true;
    nr_7_St_15_Present = false;
    ns_7_St_15_Present_1 = false;
    presence_1 =
      merge ck_13_1
        (true -> presence_1_St_15_Not_Present)
        (false -> presence_1_St_15_Present);
    ns_7_1 =
      merge ck_13_1
        (true -> ns_7_St_15_Not_Present_1)(false -> ns_7_St_15_Present_1);
    nr_7 =
      merge ck_13_1
        (true -> nr_7_St_15_Not_Present)(false -> nr_7_St_15_Present);
    ck_12_1 = true fby ns_7_1;
    r_7_St_15_Not_Present =
      if (arrived_1 when true(ck_12_1))
      then true
      else (pnr_7 when true(ck_12_1));
    s_7_St_15_Not_Present_1 =
      if (arrived_1 when true(ck_12_1)) then false else true;
    r_7_St_15_Present =
      if (arrived_1 when false(ck_12_1))
      then true
      else (pnr_7 when false(ck_12_1));
    s_7_St_15_Present_1 =
      if (arrived_1 when false(ck_12_1)) then true else false;
    s_7_1 =
      merge ck_12_1
        (true -> s_7_St_15_Not_Present_1)(false -> s_7_St_15_Present_1);
    r_7 =
      merge ck_12_1
        (true -> r_7_St_15_Not_Present)(false -> r_7_St_15_Present);
    arrived = worker;
    pnr_8 = false fby nr_8;
    ck_11_1 = s_8_1;
    presence_St_16_Not_Present = false;
    nr_8_St_16_Not_Present = false;
    ns_8_St_16_Not_Present_1 = true;
    presence_St_16_Present = true;
    nr_8_St_16_Present = false;
    ns_8_St_16_Present_1 = false;
    presence =
      merge ck_11_1
        (true -> presence_St_16_Not_Present)(false -> presence_St_16_Present);
    ns_8_1 =
      merge ck_11_1
        (true -> ns_8_St_16_Not_Present_1)(false -> ns_8_St_16_Present_1);
    nr_8 =
      merge ck_11_1
        (true -> nr_8_St_16_Not_Present)(false -> nr_8_St_16_Present);
    ck_10_1 = true fby ns_8_1;
    r_8_St_16_Not_Present =
      if (arrived when true(ck_10_1))
      then true
      else (pnr_8 when true(ck_10_1));
    s_8_St_16_Not_Present_1 =
      if (arrived when true(ck_10_1)) then false else true;
    r_8_St_16_Present =
      if (arrived when false(ck_10_1))
      then true
      else (pnr_8 when false(ck_10_1));
    s_8_St_16_Present_1 =
      if (arrived when false(ck_10_1)) then true else false;
    s_8_1 =
      merge ck_10_1
        (true -> s_8_St_16_Not_Present_1)(false -> s_8_St_16_Present_1);
    r_8 =
      merge ck_10_1
        (true -> r_8_St_16_Not_Present)(false -> r_8_St_16_Present);
    change = change_shift;
    pnr_9 = false fby nr_9;
    ck_9_1 = s_9_1;
    night_1_St_17_Dia = false;
    nr_9_St_17_Dia = false;
    ns_9_St_17_Dia_1 = true;
    night_1_St_17_Noite = true;
    nr_9_St_17_Noite = false;
    ns_9_St_17_Noite_1 = false;
    night_1 =
      merge ck_9_1 (true -> night_1_St_17_Dia)(false -> night_1_St_17_Noite);
    ns_9_1 =
      merge ck_9_1 (true -> ns_9_St_17_Dia_1)(false -> ns_9_St_17_Noite_1);
    nr_9 = merge ck_9_1 (true -> nr_9_St_17_Dia)(false -> nr_9_St_17_Noite);
    ck_1 = true fby ns_9_1;
    r_9_St_17_Dia =
      if (change when true(ck_1)) then true else (pnr_9 when true(ck_1));
    s_9_St_17_Dia_1 = if (change when true(ck_1)) then false else true;
    r_9_St_17_Noite =
      if (change when false(ck_1)) then true else (pnr_9 when false(ck_1));
    s_9_St_17_Noite_1 = if (change when false(ck_1)) then true else false;
    s_9_1 = merge ck_1 (true -> s_9_St_17_Dia_1)(false -> s_9_St_17_Noite_1);
    r_9 = merge ck_1 (true -> r_9_St_17_Dia)(false -> r_9_St_17_Noite);
    night = night_1;
    worker_presence = presence;
    cleaner_presence = presence_1;
    pc_status = computer_on;
    door_status = door_status_1;
    closet_status = closet_status_1;
    window_status = window_status_1;
    air_status = air_status_1;
    light_status = light_source_status;
    blind_status = light_source_status_1;
    ns_2_2_1 = (ns_2_2 when true(ns_2_1));
    ns_2_2_0 = (ns_2_2 when false(ns_2_1));
    s_2_2_1 = (s_2_2 when true(s_2_1));
    s_2_2_0 = (s_2_2 when false(s_2_1))
  tel

