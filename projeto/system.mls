type st_29 = St_29_Noite|St_29_Dia
type st_28 = St_28_Open|St_28_Closed
type st_27 = St_27_Open|St_27_Locked
type st_26 = St_26_Present|St_26_Not_Present
type st_25 = St_25_Present|St_25_Not_Present
type st_24 = St_24_On|St_24_Off
type st_23 = St_23_Open|St_23_Closed
type st_22 = St_22_Off|St_22_Min|St_22_Max
type st_21 = St_21_Funcionando|St_21_Falha
type st_20 = St_20_On|St_20_Off
type st_19 = St_19_Funcionando|St_19_Falha
type st_18 = St_18_Up|St_18_Down
type st_17 = St_17_Funcionando|St_17_Falha
type st_16 = St_16_Up|St_16_Down
type st_15 = St_15_Funcionando|St_15_Falha
type st_14 = St_14_On|St_14_Off
type st_13 = St_13_Funcionando|St_13_Falha
type st_12 = St_12_Off|St_12_Min|St_12_Max
type st_11 = St_11_Funcionando|St_11_Falha
type st_10 = St_10_Funcionando|St_10_Falha
type st_9 = St_9_Noite|St_9_Dia
type st_8 = St_8_Off|St_8_Min|St_8_Max
type st_7 = St_7_Open|St_7_Closed
type st_6 = St_6_On|St_6_Off
type st_5 = St_5_Present|St_5_Not_Present
type st_4 = St_4_Open|St_4_Locked
type st_3 = St_3_Open|St_3_Closed
type st_2 = St_2_Up|St_2_Down
type st_1 = St_1_On|St_1_Off
type st = St_Off_Up|St_Off|St_Min|St_Max_Up|St_Max
node ilumination(c1 : bool; c2 : bool; c_up : bool; c_down : bool; up : bool;
                  down : bool; ar_fail : bool; shift : bool)
returns (lamp : int; pers : int; policy : int)
var v_270 : bool; v_269 : bool; v_268 : bool; v_267 : bool; v_266 : bool;
    v_265 : bool; v_264 : bool; v_263 : bool; v_262 : bool; v_261 : bool;
    v_260 : bool; v_259 : bool; v_258 : bool; v_257 : bool; v_256 : bool;
    v_255 : bool; v_254 : bool; v_253 : bool; v_252 : bool; v_251 : bool;
    v_250 : int; v_249 : int; v_248 : int; v_247 : int; v_246 : int;
    v_245 : int; v_244 : int; v_243 : int; v_242 : int; v_241 : int;
    v_240 : int; v_239 : int; v_238 : int; v_237 : int; v_236 : int;
    ns_St_Max_Up_2_0 : bool; ns_St_Max_Up_3_0_0 : bool;
    ns_St_Max_Up_3_0_1 : bool; ns_St_Max_Up_2_1 : bool;
    ns_St_Max_Up_3_1_0 : bool; ns_St_Max_Up_3_1_1 : bool;
    ns_St_Max_2_0 : bool; ns_St_Max_3_0_0 : bool; ns_St_Max_3_0_1 : bool;
    ns_St_Max_2_1 : bool; ns_St_Max_3_1_0 : bool; ns_St_Max_3_1_1 : bool;
    ns_St_Min_2_0 : bool; ns_St_Min_3_0_0 : bool; ns_St_Min_3_0_1 : bool;
    ns_St_Min_2_1 : bool; ns_St_Min_3_1_0 : bool; ns_St_Min_3_1_1 : bool;
    ns_St_Off_Up_2_0 : bool; ns_St_Off_Up_3_0_0 : bool;
    ns_St_Off_Up_3_0_1 : bool; ns_St_Off_Up_2_1 : bool;
    ns_St_Off_Up_3_1_0 : bool; ns_St_Off_Up_3_1_1 : bool;
    ns_St_Off_2_0 : bool; ns_St_Off_3_0_0 : bool; ns_St_Off_3_0_1 : bool;
    ns_St_Off_2_1 : bool; ns_St_Off_3_1_0 : bool; ns_St_Off_3_1_1 : bool;
    ck_1_2_0 : bool; ck_1_3_0_0 : bool; ck_1_3_0_1 : bool; ck_1_2_1 : bool;
    ck_1_3_1_0 : bool; ck_1_3_1_1 : bool; nr_St_Max_Up : bool;
    ns_St_Max_Up_3 : bool; ns_St_Max_Up_2 : bool; ns_St_Max_Up_1 : bool;
    policy_St_Max_Up : int; pers_St_Max_Up : int; lamp_St_Max_Up : int;
    nr_St_Max : bool; ns_St_Max_3 : bool; ns_St_Max_2 : bool;
    ns_St_Max_1 : bool; policy_St_Max : int; pers_St_Max : int;
    lamp_St_Max : int; nr_St_Min : bool; ns_St_Min_3 : bool;
    ns_St_Min_2 : bool; ns_St_Min_1 : bool; policy_St_Min : int;
    pers_St_Min : int; lamp_St_Min : int; nr_St_Off_Up : bool;
    ns_St_Off_Up_3 : bool; ns_St_Off_Up_2 : bool; ns_St_Off_Up_1 : bool;
    policy_St_Off_Up : int; pers_St_Off_Up : int; lamp_St_Off_Up : int;
    nr_St_Off : bool; ns_St_Off_3 : bool; ns_St_Off_2 : bool;
    ns_St_Off_1 : bool; policy_St_Off : int; pers_St_Off : int;
    lamp_St_Off : int; ck_1_3 : bool; ck_1_2 : bool; ck_1_1 : bool;
    v_34_2_0 : bool; v_34_3_0_0 : bool; v_34_3_0_1 : bool; v_34_2_1 : bool;
    v_34_3_1_0 : bool; v_34_3_1_1 : bool; v_35 : bool; v_34_3 : bool;
    v_34_2 : bool; v_34_1 : bool; v_33 : bool; v_32 : bool; v_31 : bool;
    v_30 : bool; v_28_2_0 : bool; v_28_3_0_0 : bool; v_28_3_0_1 : bool;
    v_28_2_1 : bool; v_28_3_1_0 : bool; v_28_3_1_1 : bool; v_29 : bool;
    v_28_3 : bool; v_28_2 : bool; v_28_1 : bool; v_27 : bool; v_26 : bool;
    v_25 : bool; v_24 : bool; v_23 : bool; v_21_2_0 : bool;
    v_21_3_0_0 : bool; v_21_3_0_1 : bool; v_21_2_1 : bool; v_21_3_1_0 : bool;
    v_21_3_1_1 : bool; v_22 : bool; v_21_3 : bool; v_21_2 : bool;
    v_21_1 : bool; v_20 : bool; v_19 : bool; v_18 : bool; v_17 : bool;
    v_16 : bool; v_15 : bool; v_13_2_0 : bool; v_13_3_0_0 : bool;
    v_13_3_0_1 : bool; v_13_2_1 : bool; v_13_3_1_0 : bool; v_13_3_1_1 : bool;
    v_11_2_0 : bool; v_11_3_0_0 : bool; v_11_3_0_1 : bool; v_11_2_1 : bool;
    v_11_3_1_0 : bool; v_11_3_1_1 : bool; v_14 : bool; v_13_3 : bool;
    v_13_2 : bool; v_13_1 : bool; v_12 : bool; v_11_3 : bool; v_11_2 : bool;
    v_11_1 : bool; v_10 : bool; v_9 : bool; v_8 : bool; v_7 : bool;
    v_5_2_0 : bool; v_5_3_0_0 : bool; v_5_3_0_1 : bool; v_5_2_1 : bool;
    v_5_3_1_0 : bool; v_5_3_1_1 : bool; v_6 : bool; v_5_3 : bool;
    v_5_2 : bool; v_5_1 : bool; v_4 : bool; v_3 : bool; v_2 : bool;
    v_1 : bool; v : bool; v_293 : bool; v_292 : bool; v_291 : bool;
    v_290 : bool; v_289 : bool; v_288 : bool; v_287 : bool; v_286 : bool;
    v_285 : bool; v_284 : bool; v_283 : bool; v_282 : bool; v_281 : bool;
    v_280 : bool; v_279 : bool; v_278 : bool; v_277 : bool; v_276 : bool;
    v_275 : bool; v_274 : bool; v_273 : bool; v_272 : bool; v_271 : bool;
    s_St_Max_Up_2_0 : bool; s_St_Max_Up_3_0_0 : bool;
    s_St_Max_Up_3_0_1 : bool; s_St_Max_Up_2_1 : bool;
    s_St_Max_Up_3_1_0 : bool; s_St_Max_Up_3_1_1 : bool; s_St_Max_2_0 : bool;
    s_St_Max_3_0_0 : bool; s_St_Max_3_0_1 : bool; s_St_Max_2_1 : bool;
    s_St_Max_3_1_0 : bool; s_St_Max_3_1_1 : bool; s_St_Min_2_0 : bool;
    s_St_Min_3_0_0 : bool; s_St_Min_3_0_1 : bool; s_St_Min_2_1 : bool;
    s_St_Min_3_1_0 : bool; s_St_Min_3_1_1 : bool; s_St_Off_Up_2_0 : bool;
    s_St_Off_Up_3_0_0 : bool; s_St_Off_Up_3_0_1 : bool;
    s_St_Off_Up_2_1 : bool; s_St_Off_Up_3_1_0 : bool;
    s_St_Off_Up_3_1_1 : bool; s_St_Off_2_0 : bool; s_St_Off_3_0_0 : bool;
    s_St_Off_3_0_1 : bool; s_St_Off_2_1 : bool; s_St_Off_3_1_0 : bool;
    s_St_Off_3_1_1 : bool; ck_2_0 : bool; ck_3_0_0 : bool; ck_3_0_1 : bool;
    ck_2_1 : bool; ck_3_1_0 : bool; ck_3_1_1 : bool; r_St_Max_Up : bool;
    s_St_Max_Up_3 : bool; s_St_Max_Up_2 : bool; s_St_Max_Up_1 : bool;
    r_St_Max : bool; s_St_Max_3 : bool; s_St_Max_2 : bool; s_St_Max_1 : bool;
    r_St_Min : bool; s_St_Min_3 : bool; s_St_Min_2 : bool; s_St_Min_1 : bool;
    r_St_Off_Up : bool; s_St_Off_Up_3 : bool; s_St_Off_Up_2 : bool;
    s_St_Off_Up_1 : bool; r_St_Off : bool; s_St_Off_3 : bool;
    s_St_Off_2 : bool; s_St_Off_1 : bool; ck_3 : bool; ck_2 : bool;
    ck_1_4 : bool; s_2_0 : bool; s_3_0_0 : bool; s_3_0_1 : bool;
    s_2_1 : bool; s_3_1_0 : bool; s_3_1_1 : bool; ns_2_0 : bool;
    ns_3_0_0 : bool; ns_3_0_1 : bool; ns_2_1 : bool; ns_3_1_0 : bool;
    ns_3_1_1 : bool; s_3 : bool; s_2 : bool; s_1 : bool; ns_3 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  ck_1_2 = s_2;
  ck_1_3 = s_3;
  lamp_St_Off = 0;
  pers_St_Off = 0;
  policy_St_Off = 0;
  nr_St_Off = false;
  ns_St_Off_1 = false;
  ns_St_Off_2 = false;
  ns_St_Off_3 = true;
  lamp_St_Off_Up = 2;
  pers_St_Off_Up = 0;
  policy_St_Off_Up = 4;
  nr_St_Off_Up = false;
  ns_St_Off_Up_1 = false;
  ns_St_Off_Up_2 = false;
  ns_St_Off_Up_3 = false;
  lamp_St_Min = 1;
  pers_St_Min = 1;
  policy_St_Min = 1;
  nr_St_Min = false;
  ns_St_Min_1 = true;
  ns_St_Min_2 = false;
  ns_St_Min_3 = false;
  lamp_St_Max = 2;
  pers_St_Max = 2;
  policy_St_Max = 2;
  nr_St_Max = false;
  ns_St_Max_1 = true;
  ns_St_Max_2 = true;
  ns_St_Max_3 = true;
  lamp_St_Max_Up = 0;
  pers_St_Max_Up = 0;
  policy_St_Max_Up = 5;
  nr_St_Max_Up = false;
  ns_St_Max_Up_1 = true;
  ns_St_Max_Up_2 = true;
  ns_St_Max_Up_3 = false;
  v_236 = merge ck_1_3_1_1 (true -> lamp_St_Max)(false -> lamp_St_Max_Up);
  v_237 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> lamp_St_Min);
  v_238 = merge ck_1_2_1 (true -> v_236)(false -> v_237);
  v_239 = merge ck_1_3_0_0 (true -> lamp_St_Off)(false -> lamp_St_Off_Up);
  v_240 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_239);
  lamp = merge ck_1_1 (true -> v_238)(false -> v_240);
  v_241 = merge ck_1_3_1_1 (true -> pers_St_Max)(false -> pers_St_Max_Up);
  v_242 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> pers_St_Min);
  v_243 = merge ck_1_2_1 (true -> v_241)(false -> v_242);
  v_244 = merge ck_1_3_0_0 (true -> pers_St_Off)(false -> pers_St_Off_Up);
  v_245 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_244);
  pers = merge ck_1_1 (true -> v_243)(false -> v_245);
  v_246 = merge ck_1_3_1_1 (true -> policy_St_Max)(false -> policy_St_Max_Up);
  v_247 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> policy_St_Min);
  v_248 = merge ck_1_2_1 (true -> v_246)(false -> v_247);
  v_249 = merge ck_1_3_0_0 (true -> policy_St_Off)(false -> policy_St_Off_Up);
  v_250 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_249);
  policy = merge ck_1_1 (true -> v_248)(false -> v_250);
  v_251 = merge ck_1_3_1_1 (true -> ns_St_Max_1)(false -> ns_St_Max_Up_1);
  v_252 = merge ck_1_3_1_1 (true -> ns_St_Max_2)(false -> ns_St_Max_Up_2);
  v_253 = merge ck_1_3_1_1 (true -> ns_St_Max_3)(false -> ns_St_Max_Up_3);
  v_254 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_1);
  v_255 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_2);
  v_256 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_3);
  v_257 = merge ck_1_3_0_0 (true -> ns_St_Off_1)(false -> ns_St_Off_Up_1);
  v_258 = merge ck_1_3_0_0 (true -> ns_St_Off_2)(false -> ns_St_Off_Up_2);
  v_259 = merge ck_1_3_0_0 (true -> ns_St_Off_3)(false -> ns_St_Off_Up_3);
  v_260 = merge ck_1_2_1 (true -> v_251)(false -> v_254);
  v_261 = merge ck_1_2_1 (true -> v_252)(false -> v_255);
  v_262 = merge ck_1_2_1 (true -> v_253)(false -> v_256);
  v_263 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_257);
  v_264 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_258);
  v_265 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_259);
  ns_1 = merge ck_1_1 (true -> v_260)(false -> v_263);
  ns_2 = merge ck_1_1 (true -> v_261)(false -> v_264);
  ns_3 = merge ck_1_1 (true -> v_262)(false -> v_265);
  v_266 = merge ck_1_3_1_1 (true -> nr_St_Max)(false -> nr_St_Max_Up);
  v_267 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> nr_St_Min);
  v_268 = merge ck_1_2_1 (true -> v_266)(false -> v_267);
  v_269 = merge ck_1_3_0_0 (true -> nr_St_Off)(false -> nr_St_Off_Up);
  v_270 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_269);
  nr = merge ck_1_1 (true -> v_268)(false -> v_270);
  ck_1_3_1_1 = ((ck_1_3 when true(ck_1_1)) when true(ck_1_2_1));
  ck_1_3_1_0 = ((ck_1_3 when true(ck_1_1)) when false(ck_1_2_1));
  ck_1_2_1 = (ck_1_2 when true(ck_1_1));
  ck_1_3_0_1 = ((ck_1_3 when false(ck_1_1)) when true(ck_1_2_0));
  ck_1_3_0_0 = ((ck_1_3 when false(ck_1_1)) when false(ck_1_2_0));
  ck_1_2_0 = (ck_1_2 when false(ck_1_1));
  ns_St_Off_3_1_1 =
    ((ns_St_Off_3 when true(ns_St_Off_1)) when true(ns_St_Off_2_1));
  ns_St_Off_3_1_0 =
    ((ns_St_Off_3 when true(ns_St_Off_1)) when false(ns_St_Off_2_1));
  ns_St_Off_2_1 = (ns_St_Off_2 when true(ns_St_Off_1));
  ns_St_Off_3_0_1 =
    ((ns_St_Off_3 when false(ns_St_Off_1)) when true(ns_St_Off_2_0));
  ns_St_Off_3_0_0 =
    ((ns_St_Off_3 when false(ns_St_Off_1)) when false(ns_St_Off_2_0));
  ns_St_Off_2_0 = (ns_St_Off_2 when false(ns_St_Off_1));
  ns_St_Off_Up_3_1_1 =
    ((ns_St_Off_Up_3 when true(ns_St_Off_Up_1)) when true(ns_St_Off_Up_2_1));
  ns_St_Off_Up_3_1_0 =
    ((ns_St_Off_Up_3 when true(ns_St_Off_Up_1)) when false(ns_St_Off_Up_2_1));
  ns_St_Off_Up_2_1 = (ns_St_Off_Up_2 when true(ns_St_Off_Up_1));
  ns_St_Off_Up_3_0_1 =
    ((ns_St_Off_Up_3 when false(ns_St_Off_Up_1)) when true(ns_St_Off_Up_2_0));
  ns_St_Off_Up_3_0_0 =
    ((ns_St_Off_Up_3 when false(ns_St_Off_Up_1))
      when false(ns_St_Off_Up_2_0));
  ns_St_Off_Up_2_0 = (ns_St_Off_Up_2 when false(ns_St_Off_Up_1));
  ns_St_Min_3_1_1 =
    ((ns_St_Min_3 when true(ns_St_Min_1)) when true(ns_St_Min_2_1));
  ns_St_Min_3_1_0 =
    ((ns_St_Min_3 when true(ns_St_Min_1)) when false(ns_St_Min_2_1));
  ns_St_Min_2_1 = (ns_St_Min_2 when true(ns_St_Min_1));
  ns_St_Min_3_0_1 =
    ((ns_St_Min_3 when false(ns_St_Min_1)) when true(ns_St_Min_2_0));
  ns_St_Min_3_0_0 =
    ((ns_St_Min_3 when false(ns_St_Min_1)) when false(ns_St_Min_2_0));
  ns_St_Min_2_0 = (ns_St_Min_2 when false(ns_St_Min_1));
  ns_St_Max_3_1_1 =
    ((ns_St_Max_3 when true(ns_St_Max_1)) when true(ns_St_Max_2_1));
  ns_St_Max_3_1_0 =
    ((ns_St_Max_3 when true(ns_St_Max_1)) when false(ns_St_Max_2_1));
  ns_St_Max_2_1 = (ns_St_Max_2 when true(ns_St_Max_1));
  ns_St_Max_3_0_1 =
    ((ns_St_Max_3 when false(ns_St_Max_1)) when true(ns_St_Max_2_0));
  ns_St_Max_3_0_0 =
    ((ns_St_Max_3 when false(ns_St_Max_1)) when false(ns_St_Max_2_0));
  ns_St_Max_2_0 = (ns_St_Max_2 when false(ns_St_Max_1));
  ns_St_Max_Up_3_1_1 =
    ((ns_St_Max_Up_3 when true(ns_St_Max_Up_1)) when true(ns_St_Max_Up_2_1));
  ns_St_Max_Up_3_1_0 =
    ((ns_St_Max_Up_3 when true(ns_St_Max_Up_1)) when false(ns_St_Max_Up_2_1));
  ns_St_Max_Up_2_1 = (ns_St_Max_Up_2 when true(ns_St_Max_Up_1));
  ns_St_Max_Up_3_0_1 =
    ((ns_St_Max_Up_3 when false(ns_St_Max_Up_1)) when true(ns_St_Max_Up_2_0));
  ns_St_Max_Up_3_0_0 =
    ((ns_St_Max_Up_3 when false(ns_St_Max_Up_1))
      when false(ns_St_Max_Up_2_0));
  ns_St_Max_Up_2_0 = (ns_St_Max_Up_2 when false(ns_St_Max_Up_1));
  v_271 = false fby ns_1;
  v_272 = false fby ns_2;
  v_273 = true fby ns_3;
  ck_1_4 = v_271;
  ck_2 = v_272;
  ck_3 = v_273;
  r_St_Off = if v_32 then true else v_35;
  s_St_Off_1 = if v_32 then true else v_34_1;
  s_St_Off_2 = if v_32 then false else v_34_2;
  s_St_Off_3 = if v_32 then false else v_34_3;
  v_35 =
    if v_33
    then true
    else (((pnr when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0));
  v_34_1 = if v_33 then true else false;
  v_34_2 = if v_33 then true else false;
  v_34_3 = if v_33 then true else true;
  v_33 =
    not((((c2 when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_32 = (v_30 or v_31);
  v_31 =
    ((((up when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)) &
     (((c_up when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_30 =
    not((((c1 when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_34_3_1_1 = ((v_34_3 when true(v_34_1)) when true(v_34_2_1));
  v_34_3_1_0 = ((v_34_3 when true(v_34_1)) when false(v_34_2_1));
  v_34_2_1 = (v_34_2 when true(v_34_1));
  v_34_3_0_1 = ((v_34_3 when false(v_34_1)) when true(v_34_2_0));
  v_34_3_0_0 = ((v_34_3 when false(v_34_1)) when false(v_34_2_0));
  v_34_2_0 = (v_34_2 when false(v_34_1));
  r_St_Off_Up = if v_24 then true else v_29;
  s_St_Off_Up_1 = if v_24 then false else v_28_1;
  s_St_Off_Up_2 = if v_24 then false else v_28_2;
  s_St_Off_Up_3 = if v_24 then true else v_28_3;
  v_29 =
    if v_27
    then true
    else (((pnr when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0));
  v_28_1 = if v_27 then true else false;
  v_28_2 = if v_27 then true else false;
  v_28_3 = if v_27 then true else false;
  v_27 = (v_25 & v_26);
  v_26 =
    not
    ((((shift when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_25 =
    not
    ((((ar_fail when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_24 =
    (v_23 &
     (((shift when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_23 =
    not
    ((((ar_fail when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_28_3_1_1 = ((v_28_3 when true(v_28_1)) when true(v_28_2_1));
  v_28_3_1_0 = ((v_28_3 when true(v_28_1)) when false(v_28_2_1));
  v_28_2_1 = (v_28_2 when true(v_28_1));
  v_28_3_0_1 = ((v_28_3 when false(v_28_1)) when true(v_28_2_0));
  v_28_3_0_0 = ((v_28_3 when false(v_28_1)) when false(v_28_2_0));
  v_28_2_0 = (v_28_2 when false(v_28_1));
  r_St_Min = if v_17 then true else v_22;
  s_St_Min_1 = if v_17 then false else v_21_1;
  s_St_Min_2 = if v_17 then false else v_21_2;
  s_St_Min_3 = if v_17 then true else v_21_3;
  v_22 =
    if v_20
    then true
    else (((pnr when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0));
  v_21_1 = if v_20 then true else true;
  v_21_2 = if v_20 then true else false;
  v_21_3 = if v_20 then true else false;
  v_20 = (v_18 or v_19);
  v_19 =
    ((((up when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_up when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_18 =
    not((((c2 when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_17 = (v_15 or v_16);
  v_16 =
    ((((down when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_down when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_15 =
    not((((c1 when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_21_3_1_1 = ((v_21_3 when true(v_21_1)) when true(v_21_2_1));
  v_21_3_1_0 = ((v_21_3 when true(v_21_1)) when false(v_21_2_1));
  v_21_2_1 = (v_21_2 when true(v_21_1));
  v_21_3_0_1 = ((v_21_3 when false(v_21_1)) when true(v_21_2_0));
  v_21_3_0_0 = ((v_21_3 when false(v_21_1)) when false(v_21_2_0));
  v_21_2_0 = (v_21_2 when false(v_21_1));
  r_St_Max = if v_9 then true else v_14;
  s_St_Max_1 = if v_9 then true else v_13_1;
  s_St_Max_2 = if v_9 then false else v_13_2;
  s_St_Max_3 = if v_9 then false else v_13_3;
  v_14 = if v_10 then true else v_12;
  v_13_1 = if v_10 then false else v_11_1;
  v_13_2 = if v_10 then false else v_11_2;
  v_13_3 = if v_10 then true else v_11_3;
  v_12 =
    if (((ar_fail when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1))
    then true
    else (((pnr when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1));
  v_11_1 =
    if (((ar_fail when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1))
    then false
    else true;
  v_11_2 =
    if (((ar_fail when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1))
    then false
    else true;
  v_11_3 =
    if (((ar_fail when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1))
    then false
    else true;
  v_10 =
    not((((c2 when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_9 = (v_7 or v_8);
  v_8 =
    ((((down when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)) &
     (((c_down when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_7 = not((((c1 when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_11_3_1_1 = ((v_11_3 when true(v_11_1)) when true(v_11_2_1));
  v_11_3_1_0 = ((v_11_3 when true(v_11_1)) when false(v_11_2_1));
  v_11_2_1 = (v_11_2 when true(v_11_1));
  v_11_3_0_1 = ((v_11_3 when false(v_11_1)) when true(v_11_2_0));
  v_11_3_0_0 = ((v_11_3 when false(v_11_1)) when false(v_11_2_0));
  v_11_2_0 = (v_11_2 when false(v_11_1));
  v_13_3_1_1 = ((v_13_3 when true(v_13_1)) when true(v_13_2_1));
  v_13_3_1_0 = ((v_13_3 when true(v_13_1)) when false(v_13_2_1));
  v_13_2_1 = (v_13_2 when true(v_13_1));
  v_13_3_0_1 = ((v_13_3 when false(v_13_1)) when true(v_13_2_0));
  v_13_3_0_0 = ((v_13_3 when false(v_13_1)) when false(v_13_2_0));
  v_13_2_0 = (v_13_2 when false(v_13_1));
  r_St_Max_Up = if v_1 then true else v_6;
  s_St_Max_Up_1 = if v_1 then false else v_5_1;
  s_St_Max_Up_2 = if v_1 then false else v_5_2;
  s_St_Max_Up_3 = if v_1 then true else v_5_3;
  v_6 =
    if v_4
    then true
    else (((pnr when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1));
  v_5_1 = if v_4 then false else true;
  v_5_2 = if v_4 then false else true;
  v_5_3 = if v_4 then true else false;
  v_4 = (v_2 & v_3);
  v_3 =
    not((((shift when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_2 =
    not
    ((((ar_fail when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_1 =
    (v &
     (((shift when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v =
    not
    ((((ar_fail when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_5_3_1_1 = ((v_5_3 when true(v_5_1)) when true(v_5_2_1));
  v_5_3_1_0 = ((v_5_3 when true(v_5_1)) when false(v_5_2_1));
  v_5_2_1 = (v_5_2 when true(v_5_1));
  v_5_3_0_1 = ((v_5_3 when false(v_5_1)) when true(v_5_2_0));
  v_5_3_0_0 = ((v_5_3 when false(v_5_1)) when false(v_5_2_0));
  v_5_2_0 = (v_5_2 when false(v_5_1));
  v_274 = merge ck_3_1_1 (true -> s_St_Max_1)(false -> s_St_Max_Up_1);
  v_275 = merge ck_3_1_1 (true -> s_St_Max_2)(false -> s_St_Max_Up_2);
  v_276 = merge ck_3_1_1 (true -> s_St_Max_3)(false -> s_St_Max_Up_3);
  v_277 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_1);
  v_278 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_2);
  v_279 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_3);
  v_280 = merge ck_3_0_0 (true -> s_St_Off_1)(false -> s_St_Off_Up_1);
  v_281 = merge ck_3_0_0 (true -> s_St_Off_2)(false -> s_St_Off_Up_2);
  v_282 = merge ck_3_0_0 (true -> s_St_Off_3)(false -> s_St_Off_Up_3);
  v_283 = merge ck_2_1 (true -> v_274)(false -> v_277);
  v_284 = merge ck_2_1 (true -> v_275)(false -> v_278);
  v_285 = merge ck_2_1 (true -> v_276)(false -> v_279);
  v_286 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_280);
  v_287 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_281);
  v_288 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_282);
  s_1 = merge ck_1_4 (true -> v_283)(false -> v_286);
  s_2 = merge ck_1_4 (true -> v_284)(false -> v_287);
  s_3 = merge ck_1_4 (true -> v_285)(false -> v_288);
  v_289 = merge ck_3_1_1 (true -> r_St_Max)(false -> r_St_Max_Up);
  v_290 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> r_St_Min);
  v_291 = merge ck_2_1 (true -> v_289)(false -> v_290);
  v_292 = merge ck_3_0_0 (true -> r_St_Off)(false -> r_St_Off_Up);
  v_293 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_292);
  r = merge ck_1_4 (true -> v_291)(false -> v_293);
  ck_3_1_1 = ((ck_3 when true(ck_1_4)) when true(ck_2_1));
  ck_3_1_0 = ((ck_3 when true(ck_1_4)) when false(ck_2_1));
  ck_2_1 = (ck_2 when true(ck_1_4));
  ck_3_0_1 = ((ck_3 when false(ck_1_4)) when true(ck_2_0));
  ck_3_0_0 = ((ck_3 when false(ck_1_4)) when false(ck_2_0));
  ck_2_0 = (ck_2 when false(ck_1_4));
  s_St_Off_3_1_1 =
    ((s_St_Off_3 when true(s_St_Off_1)) when true(s_St_Off_2_1));
  s_St_Off_3_1_0 =
    ((s_St_Off_3 when true(s_St_Off_1)) when false(s_St_Off_2_1));
  s_St_Off_2_1 = (s_St_Off_2 when true(s_St_Off_1));
  s_St_Off_3_0_1 =
    ((s_St_Off_3 when false(s_St_Off_1)) when true(s_St_Off_2_0));
  s_St_Off_3_0_0 =
    ((s_St_Off_3 when false(s_St_Off_1)) when false(s_St_Off_2_0));
  s_St_Off_2_0 = (s_St_Off_2 when false(s_St_Off_1));
  s_St_Off_Up_3_1_1 =
    ((s_St_Off_Up_3 when true(s_St_Off_Up_1)) when true(s_St_Off_Up_2_1));
  s_St_Off_Up_3_1_0 =
    ((s_St_Off_Up_3 when true(s_St_Off_Up_1)) when false(s_St_Off_Up_2_1));
  s_St_Off_Up_2_1 = (s_St_Off_Up_2 when true(s_St_Off_Up_1));
  s_St_Off_Up_3_0_1 =
    ((s_St_Off_Up_3 when false(s_St_Off_Up_1)) when true(s_St_Off_Up_2_0));
  s_St_Off_Up_3_0_0 =
    ((s_St_Off_Up_3 when false(s_St_Off_Up_1)) when false(s_St_Off_Up_2_0));
  s_St_Off_Up_2_0 = (s_St_Off_Up_2 when false(s_St_Off_Up_1));
  s_St_Min_3_1_1 =
    ((s_St_Min_3 when true(s_St_Min_1)) when true(s_St_Min_2_1));
  s_St_Min_3_1_0 =
    ((s_St_Min_3 when true(s_St_Min_1)) when false(s_St_Min_2_1));
  s_St_Min_2_1 = (s_St_Min_2 when true(s_St_Min_1));
  s_St_Min_3_0_1 =
    ((s_St_Min_3 when false(s_St_Min_1)) when true(s_St_Min_2_0));
  s_St_Min_3_0_0 =
    ((s_St_Min_3 when false(s_St_Min_1)) when false(s_St_Min_2_0));
  s_St_Min_2_0 = (s_St_Min_2 when false(s_St_Min_1));
  s_St_Max_3_1_1 =
    ((s_St_Max_3 when true(s_St_Max_1)) when true(s_St_Max_2_1));
  s_St_Max_3_1_0 =
    ((s_St_Max_3 when true(s_St_Max_1)) when false(s_St_Max_2_1));
  s_St_Max_2_1 = (s_St_Max_2 when true(s_St_Max_1));
  s_St_Max_3_0_1 =
    ((s_St_Max_3 when false(s_St_Max_1)) when true(s_St_Max_2_0));
  s_St_Max_3_0_0 =
    ((s_St_Max_3 when false(s_St_Max_1)) when false(s_St_Max_2_0));
  s_St_Max_2_0 = (s_St_Max_2 when false(s_St_Max_1));
  s_St_Max_Up_3_1_1 =
    ((s_St_Max_Up_3 when true(s_St_Max_Up_1)) when true(s_St_Max_Up_2_1));
  s_St_Max_Up_3_1_0 =
    ((s_St_Max_Up_3 when true(s_St_Max_Up_1)) when false(s_St_Max_Up_2_1));
  s_St_Max_Up_2_1 = (s_St_Max_Up_2 when true(s_St_Max_Up_1));
  s_St_Max_Up_3_0_1 =
    ((s_St_Max_Up_3 when false(s_St_Max_Up_1)) when true(s_St_Max_Up_2_0));
  s_St_Max_Up_3_0_0 =
    ((s_St_Max_Up_3 when false(s_St_Max_Up_1)) when false(s_St_Max_Up_2_0));
  s_St_Max_Up_2_0 = (s_St_Max_Up_2 when false(s_St_Max_Up_1));
  ns_3_1_1 = ((ns_3 when true(ns_1)) when true(ns_2_1));
  ns_3_1_0 = ((ns_3 when true(ns_1)) when false(ns_2_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_3_0_1 = ((ns_3 when false(ns_1)) when true(ns_2_0));
  ns_3_0_0 = ((ns_3 when false(ns_1)) when false(ns_2_0));
  ns_2_0 = (ns_2 when false(ns_1));
  s_3_1_1 = ((s_3 when true(s_1)) when true(s_2_1));
  s_3_1_0 = ((s_3 when true(s_1)) when false(s_2_1));
  s_2_1 = (s_2 when true(s_1));
  s_3_0_1 = ((s_3 when false(s_1)) when true(s_2_0));
  s_3_0_0 = ((s_3 when false(s_1)) when false(s_2_0));
  s_2_0 = (s_2 when false(s_1))
tel

node lamp(c1 : bool; c2 : bool; sw : bool) returns (lamp_on : int)
var nr_St_1_On : bool; ns_St_1_On_1 : bool; lamp_on_St_1_On : int;
    nr_St_1_Off : bool; ns_St_1_Off_1 : bool; lamp_on_St_1_Off : int;
    ck_2_1 : bool; v_40 : bool; v_39 : bool; v_38 : bool; v_37 : bool;
    v_36 : bool; v : bool; r_St_1_On : bool; s_St_1_On_1 : bool;
    r_St_1_Off : bool; s_St_1_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  lamp_on_St_1_Off = 0;
  nr_St_1_Off = false;
  ns_St_1_Off_1 = true;
  lamp_on_St_1_On = 1;
  nr_St_1_On = false;
  ns_St_1_On_1 = false;
  lamp_on = merge ck_2_1 (true -> lamp_on_St_1_Off)(false -> lamp_on_St_1_On);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Off_1)(false -> ns_St_1_On_1);
  nr = merge ck_2_1 (true -> nr_St_1_Off)(false -> nr_St_1_On);
  ck_1 = true fby ns_1;
  r_St_1_Off = if v_40 then true else (pnr when true(ck_1));
  s_St_1_Off_1 = if v_40 then false else true;
  v_40 = (v_38 or v_39);
  v_39 = not((c2 when true(ck_1)));
  v_38 = ((c1 when true(ck_1)) & (sw when true(ck_1)));
  r_St_1_On = if v_37 then true else (pnr when false(ck_1));
  s_St_1_On_1 = if v_37 then true else false;
  v_37 = (v or v_36);
  v_36 = not((c2 when false(ck_1)));
  v = ((c1 when false(ck_1)) & (sw when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Off_1)(false -> s_St_1_On_1);
  r = merge ck_1 (true -> r_St_1_Off)(false -> r_St_1_On)
tel

node blind(c1 : bool; c2 : bool; sw : bool) returns (blind_open : bool)
var nr_St_2_Up : bool; ns_St_2_Up_1 : bool; blind_open_St_2_Up : bool;
    nr_St_2_Down : bool; ns_St_2_Down_1 : bool; blind_open_St_2_Down : bool;
    ck_3_1 : bool; v_45 : bool; v_44 : bool; v_43 : bool; v_42 : bool;
    v_41 : bool; v : bool; r_St_2_Up : bool; s_St_2_Up_1 : bool;
    r_St_2_Down : bool; s_St_2_Down_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  blind_open_St_2_Down = false;
  nr_St_2_Down = false;
  ns_St_2_Down_1 = true;
  blind_open_St_2_Up = true;
  nr_St_2_Up = false;
  ns_St_2_Up_1 = false;
  blind_open =
    merge ck_3_1 (true -> blind_open_St_2_Down)(false -> blind_open_St_2_Up);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Down_1)(false -> ns_St_2_Up_1);
  nr = merge ck_3_1 (true -> nr_St_2_Down)(false -> nr_St_2_Up);
  ck_1 = true fby ns_1;
  r_St_2_Down = if v_45 then true else (pnr when true(ck_1));
  s_St_2_Down_1 = if v_45 then false else true;
  v_45 = (v_43 or v_44);
  v_44 = not((c2 when true(ck_1)));
  v_43 = ((c1 when true(ck_1)) & (sw when true(ck_1)));
  r_St_2_Up = if v_42 then true else (pnr when false(ck_1));
  s_St_2_Up_1 = if v_42 then true else false;
  v_42 = (v or v_41);
  v_41 = not((c2 when false(ck_1)));
  v = ((c1 when false(ck_1)) & (sw when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_2_Down_1)(false -> s_St_2_Up_1);
  r = merge ck_1 (true -> r_St_2_Down)(false -> r_St_2_Up)
tel

node door(push : bool; c1 : bool; c2 : bool) returns (door_open : bool)
var nr_St_3_Open : bool; ns_St_3_Open_1 : bool; door_open_St_3_Open : bool;
    nr_St_3_Closed : bool; ns_St_3_Closed_1 : bool;
    door_open_St_3_Closed : bool; ck_4_1 : bool; v_50 : bool; v_49 : bool;
    v_48 : bool; v_47 : bool; v_46 : bool; v : bool; r_St_3_Open : bool;
    s_St_3_Open_1 : bool; r_St_3_Closed : bool; s_St_3_Closed_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  door_open_St_3_Closed = false;
  nr_St_3_Closed = false;
  ns_St_3_Closed_1 = true;
  door_open_St_3_Open = true;
  nr_St_3_Open = false;
  ns_St_3_Open_1 = false;
  door_open =
    merge ck_4_1
      (true -> door_open_St_3_Closed)(false -> door_open_St_3_Open);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Closed_1)(false -> ns_St_3_Open_1);
  nr = merge ck_4_1 (true -> nr_St_3_Closed)(false -> nr_St_3_Open);
  ck_1 = true fby ns_1;
  r_St_3_Closed = if v_50 then true else (pnr when true(ck_1));
  s_St_3_Closed_1 = if v_50 then false else true;
  v_50 = (v_48 or v_49);
  v_49 = not((c1 when true(ck_1)));
  v_48 = ((push when true(ck_1)) & (c2 when true(ck_1)));
  r_St_3_Open = if v_47 then true else (pnr when false(ck_1));
  s_St_3_Open_1 = if v_47 then true else false;
  v_47 = (v or v_46);
  v_46 = not((c1 when false(ck_1)));
  v = ((push when false(ck_1)) & (c2 when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_3_Closed_1)(false -> s_St_3_Open_1);
  r = merge ck_1 (true -> r_St_3_Closed)(false -> r_St_3_Open)
tel

node closet(c : bool) returns (closet_open : bool)
var nr_St_4_Open : bool; ns_St_4_Open_1 : bool; closet_open_St_4_Open : bool;
    nr_St_4_Locked : bool; ns_St_4_Locked_1 : bool;
    closet_open_St_4_Locked : bool; ck_5_1 : bool; v : bool;
    r_St_4_Open : bool; s_St_4_Open_1 : bool; r_St_4_Locked : bool;
    s_St_4_Locked_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  closet_open_St_4_Locked = false;
  nr_St_4_Locked = false;
  ns_St_4_Locked_1 = true;
  closet_open_St_4_Open = true;
  nr_St_4_Open = false;
  ns_St_4_Open_1 = false;
  closet_open =
    merge ck_5_1
      (true -> closet_open_St_4_Locked)(false -> closet_open_St_4_Open);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Locked_1)(false -> ns_St_4_Open_1);
  nr = merge ck_5_1 (true -> nr_St_4_Locked)(false -> nr_St_4_Open);
  ck_1 = true fby ns_1;
  r_St_4_Locked = if v then true else (pnr when true(ck_1));
  s_St_4_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_4_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_4_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_4_Locked_1)(false -> s_St_4_Open_1);
  r = merge ck_1 (true -> r_St_4_Locked)(false -> r_St_4_Open)
tel

node person(arrived : bool) returns (presence : bool)
var nr_St_5_Present : bool; ns_St_5_Present_1 : bool;
    presence_St_5_Present : bool; nr_St_5_Not_Present : bool;
    ns_St_5_Not_Present_1 : bool; presence_St_5_Not_Present : bool;
    ck_6_1 : bool; r_St_5_Present : bool; s_St_5_Present_1 : bool;
    r_St_5_Not_Present : bool; s_St_5_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  presence_St_5_Not_Present = false;
  nr_St_5_Not_Present = false;
  ns_St_5_Not_Present_1 = true;
  presence_St_5_Present = true;
  nr_St_5_Present = false;
  ns_St_5_Present_1 = false;
  presence =
    merge ck_6_1
      (true -> presence_St_5_Not_Present)(false -> presence_St_5_Present);
  ns_1 =
    merge ck_6_1 (true -> ns_St_5_Not_Present_1)(false -> ns_St_5_Present_1);
  nr = merge ck_6_1 (true -> nr_St_5_Not_Present)(false -> nr_St_5_Present);
  ck_1 = true fby ns_1;
  r_St_5_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_5_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_5_Present =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_5_Present_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_5_Not_Present_1)(false -> s_St_5_Present_1);
  r = merge ck_1 (true -> r_St_5_Not_Present)(false -> r_St_5_Present)
tel

node computer(c : bool) returns (computer_on : bool)
var nr_St_6_On : bool; ns_St_6_On_1 : bool; computer_on_St_6_On : bool;
    nr_St_6_Off : bool; ns_St_6_Off_1 : bool; computer_on_St_6_Off : bool;
    ck_7_1 : bool; v : bool; r_St_6_On : bool; s_St_6_On_1 : bool;
    r_St_6_Off : bool; s_St_6_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  computer_on_St_6_Off = false;
  nr_St_6_Off = false;
  ns_St_6_Off_1 = true;
  computer_on_St_6_On = true;
  nr_St_6_On = false;
  ns_St_6_On_1 = false;
  computer_on =
    merge ck_7_1 (true -> computer_on_St_6_Off)(false -> computer_on_St_6_On);
  ns_1 = merge ck_7_1 (true -> ns_St_6_Off_1)(false -> ns_St_6_On_1);
  nr = merge ck_7_1 (true -> nr_St_6_Off)(false -> nr_St_6_On);
  ck_1 = true fby ns_1;
  r_St_6_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_6_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_6_On = if v then true else (pnr when false(ck_1));
  s_St_6_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_6_Off_1)(false -> s_St_6_On_1);
  r = merge ck_1 (true -> r_St_6_Off)(false -> r_St_6_On)
tel

node window(c : bool) returns (window_open : bool)
var nr_St_7_Open : bool; ns_St_7_Open_1 : bool; window_open_St_7_Open : bool;
    nr_St_7_Closed : bool; ns_St_7_Closed_1 : bool;
    window_open_St_7_Closed : bool; ck_8_1 : bool; v : bool;
    r_St_7_Open : bool; s_St_7_Open_1 : bool; r_St_7_Closed : bool;
    s_St_7_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  window_open_St_7_Closed = false;
  nr_St_7_Closed = false;
  ns_St_7_Closed_1 = true;
  window_open_St_7_Open = true;
  nr_St_7_Open = false;
  ns_St_7_Open_1 = false;
  window_open =
    merge ck_8_1
      (true -> window_open_St_7_Closed)(false -> window_open_St_7_Open);
  ns_1 = merge ck_8_1 (true -> ns_St_7_Closed_1)(false -> ns_St_7_Open_1);
  nr = merge ck_8_1 (true -> nr_St_7_Closed)(false -> nr_St_7_Open);
  ck_1 = true fby ns_1;
  r_St_7_Closed = if v then true else (pnr when true(ck_1));
  s_St_7_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_7_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_7_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_7_Closed_1)(false -> s_St_7_Open_1);
  r = merge ck_1 (true -> r_St_7_Closed)(false -> r_St_7_Open)
tel

node air_conditioner(c1 : bool; c2 : bool) returns (air_state : int)
var v_301 : bool; v_300 : bool; v_299 : bool; v_298 : bool; v_297 : bool;
    v_296 : bool; v_295 : int; v_294 : int; ns_St_8_Max_2_0 : bool;
    ns_St_8_Max_2_1 : bool; ns_St_8_Min_2_0 : bool; ns_St_8_Min_2_1 : bool;
    ns_St_8_Off_2_0 : bool; ns_St_8_Off_2_1 : bool; ck_9_2_0 : bool;
    ck_9_2_1 : bool; nr_St_8_Max : bool; ns_St_8_Max_2 : bool;
    ns_St_8_Max_1 : bool; air_state_St_8_Max : int; nr_St_8_Min : bool;
    ns_St_8_Min_2 : bool; ns_St_8_Min_1 : bool; air_state_St_8_Min : int;
    nr_St_8_Off : bool; ns_St_8_Off_2 : bool; ns_St_8_Off_1 : bool;
    air_state_St_8_Off : int; ck_9_2 : bool; ck_9_1 : bool; v_59_2_0 : bool;
    v_59_2_1 : bool; v_60 : bool; v_59_2 : bool; v_59_1 : bool; v_58 : bool;
    v_56_2_0 : bool; v_56_2_1 : bool; v_57 : bool; v_56_2 : bool;
    v_56_1 : bool; v_55 : bool; v_54 : bool; v_52_2_0 : bool;
    v_52_2_1 : bool; v_53 : bool; v_52_2 : bool; v_52_1 : bool; v_51 : bool;
    v : bool; v_309 : bool; v_308 : bool; v_307 : bool; v_306 : bool;
    v_305 : bool; v_304 : bool; v_303 : bool; v_302 : bool;
    s_St_8_Max_2_0 : bool; s_St_8_Max_2_1 : bool; s_St_8_Min_2_0 : bool;
    s_St_8_Min_2_1 : bool; s_St_8_Off_2_0 : bool; s_St_8_Off_2_1 : bool;
    ck_2_0 : bool; ck_2_1 : bool; r_St_8_Max : bool; s_St_8_Max_2 : bool;
    s_St_8_Max_1 : bool; r_St_8_Min : bool; s_St_8_Min_2 : bool;
    s_St_8_Min_1 : bool; r_St_8_Off : bool; s_St_8_Off_2 : bool;
    s_St_8_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_9_1 = s_1;
  ck_9_2 = s_2;
  air_state_St_8_Off = 0;
  nr_St_8_Off = false;
  ns_St_8_Off_1 = false;
  ns_St_8_Off_2 = false;
  air_state_St_8_Min = 1;
  nr_St_8_Min = false;
  ns_St_8_Min_1 = true;
  ns_St_8_Min_2 = false;
  air_state_St_8_Max = 2;
  nr_St_8_Max = false;
  ns_St_8_Max_1 = true;
  ns_St_8_Max_2 = true;
  v_294 =
    merge ck_9_2_1 (true -> air_state_St_8_Max)(false -> air_state_St_8_Min);
  v_295 =
    merge ck_9_2_0
      (true -> ((0 when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> air_state_St_8_Off);
  air_state = merge ck_9_1 (true -> v_294)(false -> v_295);
  v_296 = merge ck_9_2_1 (true -> ns_St_8_Max_1)(false -> ns_St_8_Min_1);
  v_297 = merge ck_9_2_1 (true -> ns_St_8_Max_2)(false -> ns_St_8_Min_2);
  v_298 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> ns_St_8_Off_1);
  v_299 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> ns_St_8_Off_2);
  ns_1 = merge ck_9_1 (true -> v_296)(false -> v_298);
  ns_2 = merge ck_9_1 (true -> v_297)(false -> v_299);
  v_300 = merge ck_9_2_1 (true -> nr_St_8_Max)(false -> nr_St_8_Min);
  v_301 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> nr_St_8_Off);
  nr = merge ck_9_1 (true -> v_300)(false -> v_301);
  ck_9_2_1 = (ck_9_2 when true(ck_9_1));
  ck_9_2_0 = (ck_9_2 when false(ck_9_1));
  ns_St_8_Off_2_1 = (ns_St_8_Off_2 when true(ns_St_8_Off_1));
  ns_St_8_Off_2_0 = (ns_St_8_Off_2 when false(ns_St_8_Off_1));
  ns_St_8_Min_2_1 = (ns_St_8_Min_2 when true(ns_St_8_Min_1));
  ns_St_8_Min_2_0 = (ns_St_8_Min_2 when false(ns_St_8_Min_1));
  ns_St_8_Max_2_1 = (ns_St_8_Max_2 when true(ns_St_8_Max_1));
  ns_St_8_Max_2_0 = (ns_St_8_Max_2 when false(ns_St_8_Max_1));
  v_302 = false fby ns_1;
  v_303 = false fby ns_2;
  ck_1 = v_302;
  ck_2 = v_303;
  r_St_8_Off =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_60;
  s_St_8_Off_1 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_59_1;
  s_St_8_Off_2 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then false else v_59_2;
  v_60 = if v_58 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_59_1 = if v_58 then true else false;
  v_59_2 = if v_58 then true else false;
  v_58 = not(((c2 when false(ck_1)) when false(ck_2_0)));
  v_59_2_1 = (v_59_2 when true(v_59_1));
  v_59_2_0 = (v_59_2 when false(v_59_1));
  r_St_8_Min = if v_54 then true else v_57;
  s_St_8_Min_1 = if v_54 then false else v_56_1;
  s_St_8_Min_2 = if v_54 then false else v_56_2;
  v_57 = if v_55 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_56_1 = if v_55 then true else true;
  v_56_2 = if v_55 then true else false;
  v_55 = not(((c2 when true(ck_1)) when false(ck_2_1)));
  v_54 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_56_2_1 = (v_56_2 when true(v_56_1));
  v_56_2_0 = (v_56_2 when false(v_56_1));
  r_St_8_Max = if v then true else v_53;
  s_St_8_Max_1 = if v then true else v_52_1;
  s_St_8_Max_2 = if v then false else v_52_2;
  v_53 = if v_51 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_52_1 = if v_51 then false else true;
  v_52_2 = if v_51 then false else true;
  v_51 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_52_2_1 = (v_52_2 when true(v_52_1));
  v_52_2_0 = (v_52_2 when false(v_52_1));
  v_304 = merge ck_2_1 (true -> s_St_8_Max_1)(false -> s_St_8_Min_1);
  v_305 = merge ck_2_1 (true -> s_St_8_Max_2)(false -> s_St_8_Min_2);
  v_306 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_8_Off_1);
  v_307 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_8_Off_2);
  s_1 = merge ck_1 (true -> v_304)(false -> v_306);
  s_2 = merge ck_1 (true -> v_305)(false -> v_307);
  v_308 = merge ck_2_1 (true -> r_St_8_Max)(false -> r_St_8_Min);
  v_309 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_8_Off);
  r = merge ck_1 (true -> v_308)(false -> v_309);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_8_Off_2_1 = (s_St_8_Off_2 when true(s_St_8_Off_1));
  s_St_8_Off_2_0 = (s_St_8_Off_2 when false(s_St_8_Off_1));
  s_St_8_Min_2_1 = (s_St_8_Min_2 when true(s_St_8_Min_1));
  s_St_8_Min_2_0 = (s_St_8_Min_2 when false(s_St_8_Min_1));
  s_St_8_Max_2_1 = (s_St_8_Max_2 when true(s_St_8_Max_1));
  s_St_8_Max_2_0 = (s_St_8_Max_2 when false(s_St_8_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node day_shift(change : bool) returns (night : bool)
var nr_St_9_Noite : bool; ns_St_9_Noite_1 : bool; night_St_9_Noite : bool;
    nr_St_9_Dia : bool; ns_St_9_Dia_1 : bool; night_St_9_Dia : bool;
    ck_10_1 : bool; r_St_9_Noite : bool; s_St_9_Noite_1 : bool;
    r_St_9_Dia : bool; s_St_9_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_10_1 = s_1;
  night_St_9_Dia = false;
  nr_St_9_Dia = false;
  ns_St_9_Dia_1 = true;
  night_St_9_Noite = true;
  nr_St_9_Noite = false;
  ns_St_9_Noite_1 = false;
  night = merge ck_10_1 (true -> night_St_9_Dia)(false -> night_St_9_Noite);
  ns_1 = merge ck_10_1 (true -> ns_St_9_Dia_1)(false -> ns_St_9_Noite_1);
  nr = merge ck_10_1 (true -> nr_St_9_Dia)(false -> nr_St_9_Noite);
  ck_1 = true fby ns_1;
  r_St_9_Dia =
    if (change when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_9_Dia_1 = if (change when true(ck_1)) then false else true;
  r_St_9_Noite =
    if (change when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_9_Noite_1 = if (change when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_9_Dia_1)(false -> s_St_9_Noite_1);
  r = merge ck_1 (true -> r_St_9_Dia)(false -> r_St_9_Noite)
tel

node fail(failed_recovered : bool) returns (failed : bool)
var nr_St_10_Falha : bool; ns_St_10_Falha_1 : bool;
    failed_St_10_Falha : bool; nr_St_10_Funcionando : bool;
    ns_St_10_Funcionando_1 : bool; failed_St_10_Funcionando : bool;
    ck_11_1 : bool; r_St_10_Falha : bool; s_St_10_Falha_1 : bool;
    r_St_10_Funcionando : bool; s_St_10_Funcionando_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_11_1 = s_1;
  failed_St_10_Funcionando = false;
  nr_St_10_Funcionando = false;
  ns_St_10_Funcionando_1 = false;
  failed_St_10_Falha = true;
  nr_St_10_Falha = false;
  ns_St_10_Falha_1 = true;
  failed =
    merge ck_11_1
      (true -> failed_St_10_Falha)(false -> failed_St_10_Funcionando);
  ns_1 =
    merge ck_11_1 (true -> ns_St_10_Falha_1)(false -> ns_St_10_Funcionando_1);
  nr = merge ck_11_1 (true -> nr_St_10_Falha)(false -> nr_St_10_Funcionando);
  ck_1 = false fby ns_1;
  r_St_10_Funcionando =
    if (failed_recovered when false(ck_1))
    then true
    else (pnr when false(ck_1));
  s_St_10_Funcionando_1 =
    if (failed_recovered when false(ck_1)) then true else false;
  r_St_10_Falha =
    if (failed_recovered when true(ck_1))
    then true
    else (pnr when true(ck_1));
  s_St_10_Falha_1 =
    if (failed_recovered when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_10_Falha_1)(false -> s_St_10_Funcionando_1);
  r = merge ck_1 (true -> r_St_10_Falha)(false -> r_St_10_Funcionando)
tel

node air_fail(c1 : bool; c2 : bool; failed_recovered : bool)
returns (out : int)
var nr_St_11_Falha : bool; ns_St_11_Falha_1 : bool;
    failed_1_St_11_Falha : bool; nr_St_11_Funcionando : bool;
    ns_St_11_Funcionando_1 : bool; failed_1_St_11_Funcionando : bool;
    ck_15_1 : bool; r_St_11_Falha : bool; s_St_11_Falha_1 : bool;
    r_St_11_Funcionando : bool; s_St_11_Funcionando_1 : bool; ck_14_1 : bool;
    v_317 : bool; v_316 : bool; v_315 : bool; v_314 : bool; v_313 : bool;
    v_312 : bool; v_311 : int; v_310 : int; ns_1_St_12_Max_2_0 : bool;
    ns_1_St_12_Max_2_1 : bool; ns_1_St_12_Min_2_0 : bool;
    ns_1_St_12_Min_2_1 : bool; ns_1_St_12_Off_2_0 : bool;
    ns_1_St_12_Off_2_1 : bool; ck_13_2_0 : bool; ck_13_2_1 : bool;
    nr_1_St_12_Max : bool; ns_1_St_12_Max_2 : bool; ns_1_St_12_Max_1 : bool;
    air_state_1_St_12_Max : int; nr_1_St_12_Min : bool;
    ns_1_St_12_Min_2 : bool; ns_1_St_12_Min_1 : bool;
    air_state_1_St_12_Min : int; nr_1_St_12_Off : bool;
    ns_1_St_12_Off_2 : bool; ns_1_St_12_Off_1 : bool;
    air_state_1_St_12_Off : int; ck_13_2 : bool; ck_13_1 : bool;
    v_69_2_0 : bool; v_69_2_1 : bool; v_70 : bool; v_69_2 : bool;
    v_69_1 : bool; v_68 : bool; v_66_2_0 : bool; v_66_2_1 : bool;
    v_67 : bool; v_66_2 : bool; v_66_1 : bool; v_65 : bool; v_64 : bool;
    v_62_2_0 : bool; v_62_2_1 : bool; v_63 : bool; v_62_2 : bool;
    v_62_1 : bool; v_61 : bool; v : bool; v_325 : bool; v_324 : bool;
    v_323 : bool; v_322 : bool; v_321 : bool; v_320 : bool; v_319 : bool;
    v_318 : bool; s_1_St_12_Max_2_0 : bool; s_1_St_12_Max_2_1 : bool;
    s_1_St_12_Min_2_0 : bool; s_1_St_12_Min_2_1 : bool;
    s_1_St_12_Off_2_0 : bool; s_1_St_12_Off_2_1 : bool; ck_12_2_0 : bool;
    ck_12_2_1 : bool; r_1_St_12_Max : bool; s_1_St_12_Max_2 : bool;
    s_1_St_12_Max_1 : bool; r_1_St_12_Min : bool; s_1_St_12_Min_2 : bool;
    s_1_St_12_Min_1 : bool; r_1_St_12_Off : bool; s_1_St_12_Off_2 : bool;
    s_1_St_12_Off_1 : bool; ck_12_2 : bool; ck_12_1 : bool; out_false : int;
    out_true : int; ck : bool; s_1_2_0 : bool; s_1_2_1 : bool;
    ns_1_2_0 : bool; ns_1_2_1 : bool; s_1_2 : bool; s_1_1 : bool;
    ns_1_2 : bool; ns_1_1 : bool; r_1 : bool; nr_1 : bool; pnr_1 : bool;
    s_1_3 : bool; ns_1_3 : bool; r : bool; nr : bool; pnr : bool;
    failed_recovered_1 : bool; failed_1 : bool; c1_1 : bool; c2_1 : bool;
    air_state_1 : int; air_state : int; failed : bool;
let
  failed_recovered_1 = failed_recovered;
  pnr = false fby nr;
  ck_15_1 = s_1_3;
  failed_1_St_11_Funcionando = false;
  nr_St_11_Funcionando = false;
  ns_St_11_Funcionando_1 = false;
  failed_1_St_11_Falha = true;
  nr_St_11_Falha = false;
  ns_St_11_Falha_1 = true;
  failed_1 =
    merge ck_15_1
      (true -> failed_1_St_11_Falha)(false -> failed_1_St_11_Funcionando);
  ns_1_3 =
    merge ck_15_1 (true -> ns_St_11_Falha_1)(false -> ns_St_11_Funcionando_1);
  nr = merge ck_15_1 (true -> nr_St_11_Falha)(false -> nr_St_11_Funcionando);
  ck_14_1 = false fby ns_1_3;
  r_St_11_Funcionando =
    if (failed_recovered_1 when false(ck_14_1))
    then true
    else (pnr when false(ck_14_1));
  s_St_11_Funcionando_1 =
    if (failed_recovered_1 when false(ck_14_1)) then true else false;
  r_St_11_Falha =
    if (failed_recovered_1 when true(ck_14_1))
    then true
    else (pnr when true(ck_14_1));
  s_St_11_Falha_1 =
    if (failed_recovered_1 when true(ck_14_1)) then false else true;
  s_1_3 =
    merge ck_14_1 (true -> s_St_11_Falha_1)(false -> s_St_11_Funcionando_1);
  r = merge ck_14_1 (true -> r_St_11_Falha)(false -> r_St_11_Funcionando);
  c1_1 = c1;
  c2_1 = c2;
  pnr_1 = false fby nr_1;
  ck_13_1 = s_1_1;
  ck_13_2 = s_1_2;
  air_state_1_St_12_Off = 0;
  nr_1_St_12_Off = false;
  ns_1_St_12_Off_1 = false;
  ns_1_St_12_Off_2 = false;
  air_state_1_St_12_Min = 1;
  nr_1_St_12_Min = false;
  ns_1_St_12_Min_1 = true;
  ns_1_St_12_Min_2 = false;
  air_state_1_St_12_Max = 2;
  nr_1_St_12_Max = false;
  ns_1_St_12_Max_1 = true;
  ns_1_St_12_Max_2 = true;
  v_310 =
    merge ck_13_2_1
      (true -> air_state_1_St_12_Max)(false -> air_state_1_St_12_Min);
  v_311 =
    merge ck_13_2_0
      (true -> ((0 when false(ck_13_1)) when true(ck_13_2_0)))
      (false -> air_state_1_St_12_Off);
  air_state_1 = merge ck_13_1 (true -> v_310)(false -> v_311);
  v_312 =
    merge ck_13_2_1 (true -> ns_1_St_12_Max_1)(false -> ns_1_St_12_Min_1);
  v_313 =
    merge ck_13_2_1 (true -> ns_1_St_12_Max_2)(false -> ns_1_St_12_Min_2);
  v_314 =
    merge ck_13_2_0
      (true -> ((true when false(ck_13_1)) when true(ck_13_2_0)))
      (false -> ns_1_St_12_Off_1);
  v_315 =
    merge ck_13_2_0
      (true -> ((true when false(ck_13_1)) when true(ck_13_2_0)))
      (false -> ns_1_St_12_Off_2);
  ns_1_1 = merge ck_13_1 (true -> v_312)(false -> v_314);
  ns_1_2 = merge ck_13_1 (true -> v_313)(false -> v_315);
  v_316 = merge ck_13_2_1 (true -> nr_1_St_12_Max)(false -> nr_1_St_12_Min);
  v_317 =
    merge ck_13_2_0
      (true -> ((true when false(ck_13_1)) when true(ck_13_2_0)))
      (false -> nr_1_St_12_Off);
  nr_1 = merge ck_13_1 (true -> v_316)(false -> v_317);
  ck_13_2_1 = (ck_13_2 when true(ck_13_1));
  ck_13_2_0 = (ck_13_2 when false(ck_13_1));
  ns_1_St_12_Off_2_1 = (ns_1_St_12_Off_2 when true(ns_1_St_12_Off_1));
  ns_1_St_12_Off_2_0 = (ns_1_St_12_Off_2 when false(ns_1_St_12_Off_1));
  ns_1_St_12_Min_2_1 = (ns_1_St_12_Min_2 when true(ns_1_St_12_Min_1));
  ns_1_St_12_Min_2_0 = (ns_1_St_12_Min_2 when false(ns_1_St_12_Min_1));
  ns_1_St_12_Max_2_1 = (ns_1_St_12_Max_2 when true(ns_1_St_12_Max_1));
  ns_1_St_12_Max_2_0 = (ns_1_St_12_Max_2 when false(ns_1_St_12_Max_1));
  v_318 = false fby ns_1_1;
  v_319 = false fby ns_1_2;
  ck_12_1 = v_318;
  ck_12_2 = v_319;
  r_1_St_12_Off =
    if ((c1_1 when false(ck_12_1)) when false(ck_12_2_0)) then true else v_70;
  s_1_St_12_Off_1 =
    if ((c1_1 when false(ck_12_1)) when false(ck_12_2_0))
    then true
    else v_69_1;
  s_1_St_12_Off_2 =
    if ((c1_1 when false(ck_12_1)) when false(ck_12_2_0))
    then false
    else v_69_2;
  v_70 =
    if v_68
    then true
    else ((pnr_1 when false(ck_12_1)) when false(ck_12_2_0));
  v_69_1 = if v_68 then true else false;
  v_69_2 = if v_68 then true else false;
  v_68 = not(((c2_1 when false(ck_12_1)) when false(ck_12_2_0)));
  v_69_2_1 = (v_69_2 when true(v_69_1));
  v_69_2_0 = (v_69_2 when false(v_69_1));
  r_1_St_12_Min = if v_64 then true else v_67;
  s_1_St_12_Min_1 = if v_64 then false else v_66_1;
  s_1_St_12_Min_2 = if v_64 then false else v_66_2;
  v_67 =
    if v_65 then true else ((pnr_1 when true(ck_12_1)) when false(ck_12_2_1));
  v_66_1 = if v_65 then true else true;
  v_66_2 = if v_65 then true else false;
  v_65 = not(((c2_1 when true(ck_12_1)) when false(ck_12_2_1)));
  v_64 = not(((c1_1 when true(ck_12_1)) when false(ck_12_2_1)));
  v_66_2_1 = (v_66_2 when true(v_66_1));
  v_66_2_0 = (v_66_2 when false(v_66_1));
  r_1_St_12_Max = if v then true else v_63;
  s_1_St_12_Max_1 = if v then true else v_62_1;
  s_1_St_12_Max_2 = if v then false else v_62_2;
  v_63 =
    if v_61 then true else ((pnr_1 when true(ck_12_1)) when true(ck_12_2_1));
  v_62_1 = if v_61 then false else true;
  v_62_2 = if v_61 then false else true;
  v_61 = not(((c2_1 when true(ck_12_1)) when true(ck_12_2_1)));
  v = not(((c1_1 when true(ck_12_1)) when true(ck_12_2_1)));
  v_62_2_1 = (v_62_2 when true(v_62_1));
  v_62_2_0 = (v_62_2 when false(v_62_1));
  v_320 = merge ck_12_2_1 (true -> s_1_St_12_Max_1)(false -> s_1_St_12_Min_1);
  v_321 = merge ck_12_2_1 (true -> s_1_St_12_Max_2)(false -> s_1_St_12_Min_2);
  v_322 =
    merge ck_12_2_0
      (true -> ((true when false(ck_12_1)) when true(ck_12_2_0)))
      (false -> s_1_St_12_Off_1);
  v_323 =
    merge ck_12_2_0
      (true -> ((true when false(ck_12_1)) when true(ck_12_2_0)))
      (false -> s_1_St_12_Off_2);
  s_1_1 = merge ck_12_1 (true -> v_320)(false -> v_322);
  s_1_2 = merge ck_12_1 (true -> v_321)(false -> v_323);
  v_324 = merge ck_12_2_1 (true -> r_1_St_12_Max)(false -> r_1_St_12_Min);
  v_325 =
    merge ck_12_2_0
      (true -> ((true when false(ck_12_1)) when true(ck_12_2_0)))
      (false -> r_1_St_12_Off);
  r_1 = merge ck_12_1 (true -> v_324)(false -> v_325);
  ck_12_2_1 = (ck_12_2 when true(ck_12_1));
  ck_12_2_0 = (ck_12_2 when false(ck_12_1));
  s_1_St_12_Off_2_1 = (s_1_St_12_Off_2 when true(s_1_St_12_Off_1));
  s_1_St_12_Off_2_0 = (s_1_St_12_Off_2 when false(s_1_St_12_Off_1));
  s_1_St_12_Min_2_1 = (s_1_St_12_Min_2 when true(s_1_St_12_Min_1));
  s_1_St_12_Min_2_0 = (s_1_St_12_Min_2 when false(s_1_St_12_Min_1));
  s_1_St_12_Max_2_1 = (s_1_St_12_Max_2 when true(s_1_St_12_Max_1));
  s_1_St_12_Max_2_0 = (s_1_St_12_Max_2 when false(s_1_St_12_Max_1));
  air_state = air_state_1;
  failed = failed_1;
  ck = failed;
  out_true = ((air_state when true(ck)) + 3);
  out_false = (air_state when false(ck));
  out = merge ck (false -> out_false)(true -> out_true);
  ns_1_2_1 = (ns_1_2 when true(ns_1_1));
  ns_1_2_0 = (ns_1_2 when false(ns_1_1));
  s_1_2_1 = (s_1_2 when true(s_1_1));
  s_1_2_0 = (s_1_2 when false(s_1_1))
tel

node lamp_fail(sw : bool; c1 : bool; c2 : bool; failed_recovered : bool)
returns (out : int)
var nr_St_13_Falha : bool; ns_St_13_Falha_1 : bool;
    failed_2_St_13_Falha : bool; nr_St_13_Funcionando : bool;
    ns_St_13_Funcionando_1 : bool; failed_2_St_13_Funcionando : bool;
    ck_19_1 : bool; r_St_13_Falha : bool; s_St_13_Falha_1 : bool;
    r_St_13_Funcionando : bool; s_St_13_Funcionando_1 : bool; ck_18_1 : bool;
    nr_2_St_14_On : bool; ns_2_St_14_On_1 : bool; lamp_on_St_14_On : int;
    nr_2_St_14_Off : bool; ns_2_St_14_Off_1 : bool; lamp_on_St_14_Off : int;
    ck_17_1 : bool; v_75 : bool; v_74 : bool; v_73 : bool; v_72 : bool;
    v_71 : bool; v : bool; r_2_St_14_On : bool; s_2_St_14_On_1 : bool;
    r_2_St_14_Off : bool; s_2_St_14_Off_1 : bool; ck_16_1 : bool;
    out_false : int; out_true : int; ck : bool; s_2_1 : bool; ns_2_1 : bool;
    r_2 : bool; nr_2 : bool; pnr_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool; failed_recovered_2 : bool; failed_2 : bool;
    c1_2 : bool; c2_2 : bool; sw_1 : bool; lamp_on : int; lamp : int;
    failed : bool;
let
  failed_recovered_2 = failed_recovered;
  pnr = false fby nr;
  ck_19_1 = s_1;
  failed_2_St_13_Funcionando = false;
  nr_St_13_Funcionando = false;
  ns_St_13_Funcionando_1 = false;
  failed_2_St_13_Falha = true;
  nr_St_13_Falha = false;
  ns_St_13_Falha_1 = true;
  failed_2 =
    merge ck_19_1
      (true -> failed_2_St_13_Falha)(false -> failed_2_St_13_Funcionando);
  ns_1 =
    merge ck_19_1 (true -> ns_St_13_Falha_1)(false -> ns_St_13_Funcionando_1);
  nr = merge ck_19_1 (true -> nr_St_13_Falha)(false -> nr_St_13_Funcionando);
  ck_18_1 = false fby ns_1;
  r_St_13_Funcionando =
    if (failed_recovered_2 when false(ck_18_1))
    then true
    else (pnr when false(ck_18_1));
  s_St_13_Funcionando_1 =
    if (failed_recovered_2 when false(ck_18_1)) then true else false;
  r_St_13_Falha =
    if (failed_recovered_2 when true(ck_18_1))
    then true
    else (pnr when true(ck_18_1));
  s_St_13_Falha_1 =
    if (failed_recovered_2 when true(ck_18_1)) then false else true;
  s_1 =
    merge ck_18_1 (true -> s_St_13_Falha_1)(false -> s_St_13_Funcionando_1);
  r = merge ck_18_1 (true -> r_St_13_Falha)(false -> r_St_13_Funcionando);
  c1_2 = sw;
  c2_2 = c1;
  sw_1 = c2;
  pnr_2 = false fby nr_2;
  ck_17_1 = s_2_1;
  lamp_on_St_14_Off = 0;
  nr_2_St_14_Off = false;
  ns_2_St_14_Off_1 = true;
  lamp_on_St_14_On = 1;
  nr_2_St_14_On = false;
  ns_2_St_14_On_1 = false;
  lamp_on =
    merge ck_17_1 (true -> lamp_on_St_14_Off)(false -> lamp_on_St_14_On);
  ns_2_1 = merge ck_17_1 (true -> ns_2_St_14_Off_1)(false -> ns_2_St_14_On_1);
  nr_2 = merge ck_17_1 (true -> nr_2_St_14_Off)(false -> nr_2_St_14_On);
  ck_16_1 = true fby ns_2_1;
  r_2_St_14_Off = if v_75 then true else (pnr_2 when true(ck_16_1));
  s_2_St_14_Off_1 = if v_75 then false else true;
  v_75 = (v_73 or v_74);
  v_74 = not((c2_2 when true(ck_16_1)));
  v_73 = ((c1_2 when true(ck_16_1)) & (sw_1 when true(ck_16_1)));
  r_2_St_14_On = if v_72 then true else (pnr_2 when false(ck_16_1));
  s_2_St_14_On_1 = if v_72 then true else false;
  v_72 = (v or v_71);
  v_71 = not((c2_2 when false(ck_16_1)));
  v = ((c1_2 when false(ck_16_1)) & (sw_1 when false(ck_16_1)));
  s_2_1 = merge ck_16_1 (true -> s_2_St_14_Off_1)(false -> s_2_St_14_On_1);
  r_2 = merge ck_16_1 (true -> r_2_St_14_Off)(false -> r_2_St_14_On);
  lamp = lamp_on;
  failed = failed_2;
  ck = failed;
  out_true = ((lamp when true(ck)) + 2);
  out_false = (lamp when false(ck));
  out = merge ck (false -> out_false)(true -> out_true)
tel

node blind_fail(sw : bool; c1 : bool; c2 : bool; failed_recovered : bool)
returns (blind : bool; failed : bool)
var nr_St_15_Falha : bool; ns_St_15_Falha_1 : bool;
    failed_3_St_15_Falha : bool; nr_St_15_Funcionando : bool;
    ns_St_15_Funcionando_1 : bool; failed_3_St_15_Funcionando : bool;
    ck_22_1 : bool; r_St_15_Falha : bool; s_St_15_Falha_1 : bool;
    r_St_15_Funcionando : bool; s_St_15_Funcionando_1 : bool; ck_21_1 : bool;
    nr_3_St_16_Up : bool; ns_3_St_16_Up_1 : bool; blind_open_St_16_Up : bool;
    nr_3_St_16_Down : bool; ns_3_St_16_Down_1 : bool;
    blind_open_St_16_Down : bool; ck_20_1 : bool; v_80 : bool; v_79 : bool;
    v_78 : bool; v_77 : bool; v_76 : bool; v : bool; r_3_St_16_Up : bool;
    s_3_St_16_Up_1 : bool; r_3_St_16_Down : bool; s_3_St_16_Down_1 : bool;
    ck_1 : bool; s_3_1 : bool; ns_3_1 : bool; r_3 : bool; nr_3 : bool;
    pnr_3 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
    failed_recovered_3 : bool; failed_3 : bool; c1_3 : bool; c2_3 : bool;
    sw_2 : bool; blind_open : bool;
let
  failed_recovered_3 = failed_recovered;
  pnr = false fby nr;
  ck_22_1 = s_1;
  failed_3_St_15_Funcionando = false;
  nr_St_15_Funcionando = false;
  ns_St_15_Funcionando_1 = false;
  failed_3_St_15_Falha = true;
  nr_St_15_Falha = false;
  ns_St_15_Falha_1 = true;
  failed_3 =
    merge ck_22_1
      (true -> failed_3_St_15_Falha)(false -> failed_3_St_15_Funcionando);
  ns_1 =
    merge ck_22_1 (true -> ns_St_15_Falha_1)(false -> ns_St_15_Funcionando_1);
  nr = merge ck_22_1 (true -> nr_St_15_Falha)(false -> nr_St_15_Funcionando);
  ck_21_1 = false fby ns_1;
  r_St_15_Funcionando =
    if (failed_recovered_3 when false(ck_21_1))
    then true
    else (pnr when false(ck_21_1));
  s_St_15_Funcionando_1 =
    if (failed_recovered_3 when false(ck_21_1)) then true else false;
  r_St_15_Falha =
    if (failed_recovered_3 when true(ck_21_1))
    then true
    else (pnr when true(ck_21_1));
  s_St_15_Falha_1 =
    if (failed_recovered_3 when true(ck_21_1)) then false else true;
  s_1 =
    merge ck_21_1 (true -> s_St_15_Falha_1)(false -> s_St_15_Funcionando_1);
  r = merge ck_21_1 (true -> r_St_15_Falha)(false -> r_St_15_Funcionando);
  c1_3 = sw;
  c2_3 = c1;
  sw_2 = c2;
  pnr_3 = false fby nr_3;
  ck_20_1 = s_3_1;
  blind_open_St_16_Down = false;
  nr_3_St_16_Down = false;
  ns_3_St_16_Down_1 = true;
  blind_open_St_16_Up = true;
  nr_3_St_16_Up = false;
  ns_3_St_16_Up_1 = false;
  blind_open =
    merge ck_20_1
      (true -> blind_open_St_16_Down)(false -> blind_open_St_16_Up);
  ns_3_1 =
    merge ck_20_1 (true -> ns_3_St_16_Down_1)(false -> ns_3_St_16_Up_1);
  nr_3 = merge ck_20_1 (true -> nr_3_St_16_Down)(false -> nr_3_St_16_Up);
  ck_1 = true fby ns_3_1;
  r_3_St_16_Down = if v_80 then true else (pnr_3 when true(ck_1));
  s_3_St_16_Down_1 = if v_80 then false else true;
  v_80 = (v_78 or v_79);
  v_79 = not((c2_3 when true(ck_1)));
  v_78 = ((c1_3 when true(ck_1)) & (sw_2 when true(ck_1)));
  r_3_St_16_Up = if v_77 then true else (pnr_3 when false(ck_1));
  s_3_St_16_Up_1 = if v_77 then true else false;
  v_77 = (v or v_76);
  v_76 = not((c2_3 when false(ck_1)));
  v = ((c1_3 when false(ck_1)) & (sw_2 when false(ck_1)));
  s_3_1 = merge ck_1 (true -> s_3_St_16_Down_1)(false -> s_3_St_16_Up_1);
  r_3 = merge ck_1 (true -> r_3_St_16_Down)(false -> r_3_St_16_Up);
  blind = blind_open;
  failed = failed_3
tel

node controller(change_shift : bool; worker : bool; cleaner : bool;
                 air_failed_recovered : bool; light_switch : bool;
                 light_failed_recovered : bool; blind_switch : bool;
                 blind_failed_recovered : bool)
returns (night : bool; door_open : bool; worker_presence : bool;
          cleaner_presence : bool; pc_on : bool; window_open : bool;
          closet_open : bool; blind_up : bool; blind_failed : bool;
          air_out : int; light_out : int)
contract
  var rule9 : bool; rule8 : bool; rule7 : bool; rule6 : bool; rule5_5 : bool;
      rule5 : bool; rule4 : bool; rule3 : bool; rule2_5 : bool; rule2 : bool;
      rule1_5 : bool; rule1 : bool; v : bool; v_81 : bool; v_82 : bool;
      v_83 : bool; v_84 : bool; v_85 : bool; v_86 : bool; v_87 : bool;
      v_88 : bool; v_89 : bool; v_90 : bool; v_91 : bool; v_92 : bool;
      v_93 : bool; v_94 : bool; v_95 : bool; v_96 : bool; v_97 : bool;
      v_98 : bool; v_99 : bool; v_100 : bool; v_101 : bool; v_102 : bool;
      v_103 : bool; v_104 : bool; v_105 : bool; v_106 : bool; v_107 : bool;
      v_108 : bool; v_109 : bool; v_110 : bool; v_111 : bool; v_112 : bool;
      v_113 : bool; v_114 : bool; v_115 : bool; v_116 : bool; v_117 : bool;
      v_118 : bool; v_119 : bool; v_120 : bool; v_121 : bool; v_122 : bool;
      v_123 : bool; v_124 : bool; v_125 : bool; v_126 : bool; v_127 : bool;
      v_128 : bool; v_129 : bool; v_130 : bool; v_131 : bool; v_132 : bool;
      v_133 : bool; v_134 : bool; v_135 : bool; v_136 : bool; v_137 : bool;
      v_138 : bool; v_139 : bool; v_140 : bool; v_141 : bool; v_142 : bool;
      v_143 : bool; v_144 : bool; v_145 : bool; v_146 : bool; v_147 : bool;
      v_148 : bool; v_149 : bool; v_150 : bool; v_151 : bool; v_152 : bool;
      v_153 : bool; v_154 : bool; v_155 : bool; v_156 : bool; v_157 : bool;
      v_158 : bool; v_159 : bool; v_160 : bool; v_161 : bool; v_162 : bool;
      v_163 : bool; v_164 : bool; v_165 : bool; v_166 : bool; v_167 : bool;
      v_168 : bool; v_169 : bool; v_170 : bool; v_171 : bool; v_172 : bool;
      v_173 : bool; v_174 : bool; v_175 : bool; v_176 : bool; v_177 : bool;
      v_178 : bool; v_179 : bool; v_180 : bool; v_181 : bool; v_182 : bool;
      v_183 : bool; v_184 : bool; v_185 : bool; v_186 : bool; v_187 : bool;
      v_188 : bool; v_189 : bool; v_190 : bool; v_191 : bool; v_192 : bool;
      v_193 : bool; v_194 : bool; v_195 : bool; v_196 : bool; v_197 : bool;
      v_198 : bool; v_199 : bool; v_200 : bool; v_201 : bool; v_202 : bool;
      v_203 : bool;
  let
    v = (worker_presence or cleaner_presence);
    v_81 = not(night);
    v_82 = (v & v_81);
    v_83 = not(v_82);
    v_84 = (light_out = 1);
    v_85 = (v_84 or blind_up);
    rule9 = (v_83 or v_85);
    v_86 = (worker_presence or cleaner_presence);
    v_87 = not(night);
    v_88 = (v_86 & v_87);
    v_89 = (air_out > 2);
    v_90 = (v_88 & v_89);
    v_91 = not(v_90);
    v_92 = (window_open & blind_up);
    v_93 = (v_92 & door_open);
    rule8 = (v_91 or v_93);
    v_94 = (worker_presence or cleaner_presence);
    v_95 = not(night);
    v_96 = (v_94 & v_95);
    v_97 = (light_out < 2);
    v_98 = (v_96 & v_97);
    v_99 = not(v_98);
    v_100 = (light_out = 1);
    rule7 = (v_99 or v_100);
    v_101 = (air_out < 3);
    v_102 = (cleaner_presence & v_101);
    v_103 = not(v_102);
    v_104 = not(pc_on);
    v_105 = (v_104 & closet_open);
    v_106 = (air_out = 1);
    v_107 = (v_105 & v_106);
    rule6 = (v_103 or v_107);
    v_108 = not(night);
    v_109 = (v_108 & pc_on);
    v_110 = (light_out = 1);
    v_111 = not(v_110);
    v_112 = (v_109 & v_111);
    v_113 = not(window_open);
    v_114 = (v_112 & v_113);
    v_115 = (air_out < 3);
    v_116 = (v_114 & v_115);
    v_117 = not(v_116);
    v_118 = (air_out = 1);
    rule5_5 = (v_117 or v_118);
    v_119 = not(night);
    v_120 = (v_119 & pc_on);
    v_121 = (light_out = 1);
    v_122 = (v_120 & v_121);
    v_123 = not(window_open);
    v_124 = (v_122 & v_123);
    v_125 = (air_out < 3);
    v_126 = (v_124 & v_125);
    v_127 = not(v_126);
    v_128 = (air_out = 2);
    rule5 = (v_127 or v_128);
    v_129 = not(worker_presence);
    v_130 = not(cleaner_presence);
    v_131 = (v_129 & v_130);
    v_132 = not(night);
    v_133 = (v_131 & v_132);
    v_134 = not(v_133);
    v_135 = not(pc_on);
    v_136 = not(window_open);
    v_137 = (v_135 & v_136);
    v_138 = (light_out = 1);
    v_139 = not(v_138);
    v_140 = (v_137 & v_139);
    v_141 = not(blind_up);
    v_142 = (v_140 & v_141);
    rule4 = (v_134 or v_142);
    v_143 = not(worker_presence);
    v_144 = not(cleaner_presence);
    v_145 = (v_143 & v_144);
    v_146 = (v_145 & night);
    v_147 = not(v_146);
    v_148 = not(pc_on);
    v_149 = not(window_open);
    v_150 = (v_148 & v_149);
    v_151 = (light_out = 1);
    v_152 = not(v_151);
    v_153 = (v_150 & v_152);
    v_154 = not(blind_up);
    v_155 = (v_153 & v_154);
    rule3 = (v_147 or v_155);
    v_156 = (worker_presence or cleaner_presence);
    v_157 = (v_156 & night);
    v_158 = (light_out > 1);
    v_159 = (v_157 & v_158);
    v_160 = (air_out > 2);
    v_161 = (v_159 & v_160);
    v_162 = not(v_161);
    v_163 = (window_open & blind_up);
    v_164 = (v_163 & door_open);
    rule2_5 = (v_162 or v_164);
    v_165 = (worker_presence or cleaner_presence);
    v_166 = (v_165 & night);
    v_167 = (light_out > 1);
    v_168 = (v_166 & v_167);
    v_169 = (air_out < 3);
    v_170 = (v_168 & v_169);
    v_171 = not(v_170);
    v_172 = (air_out = 1);
    v_173 = (blind_up & v_172);
    rule2 = (v_171 or v_173);
    v_174 = (worker_presence or cleaner_presence);
    v_175 = (v_174 & night);
    v_176 = (light_out < 2);
    v_177 = (v_175 & v_176);
    v_178 = (air_out > 2);
    v_179 = (v_177 & v_178);
    v_180 = not(v_179);
    v_181 = (window_open & blind_up);
    v_182 = (v_181 & door_open);
    rule1_5 = (v_180 or v_182);
    v_183 = (worker_presence or cleaner_presence);
    v_184 = (v_183 & night);
    v_185 = (light_out < 2);
    v_186 = (v_184 & v_185);
    v_187 = (air_out < 3);
    v_188 = (v_186 & v_187);
    v_189 = not(v_188);
    v_190 = (light_out = 1);
    v_191 = (air_out = 1);
    v_192 = (v_190 & v_191);
    rule1 = (v_189 or v_192);
    v_193 = (rule1 & rule1_5);
    v_194 = (v_193 & rule2);
    v_195 = (v_194 & rule2_5);
    v_196 = (v_195 & rule3);
    v_197 = (v_196 & rule4);
    v_198 = (v_197 & rule5);
    v_199 = (v_198 & rule5_5);
    v_200 = (v_199 & rule6);
    v_201 = (v_200 & rule7);
    v_202 = (v_201 & rule8);
    v_203 = (v_202 & rule9)
  tel
  assume true@ enforce v_203]
                 with (c_blind_2 : bool; c_blind_1 : bool; c_light_2 : bool;
                        c_light_1 : bool; c_closet : bool; c_air_2 : bool;
                        c_air_1 : bool; c_window : bool; c_pc : bool;
                        c_door_2 : bool; c_door_1 : bool)
                 var nr_St_17_Falha : bool; ns_St_17_Falha_1 : bool;
                     failed_3_St_17_Falha : bool;
                     nr_St_17_Funcionando : bool;
                     ns_St_17_Funcionando_1 : bool;
                     failed_3_St_17_Funcionando : bool; ck_49_1 : bool;
                     r_St_17_Falha : bool; s_St_17_Falha_1 : bool;
                     r_St_17_Funcionando : bool;
                     s_St_17_Funcionando_1 : bool; ck_48_1 : bool;
                     nr_4_St_18_Up : bool; ns_4_St_18_Up_1 : bool;
                     blind_open_St_18_Up : bool; nr_4_St_18_Down : bool;
                     ns_4_St_18_Down_1 : bool; blind_open_St_18_Down : bool;
                     ck_47_1 : bool; v_235 : bool; v_234 : bool;
                     v_233 : bool; v_232 : bool; v_231 : bool; v_230 : bool;
                     r_4_St_18_Up : bool; s_4_St_18_Up_1 : bool;
                     r_4_St_18_Down : bool; s_4_St_18_Down_1 : bool;
                     ck_46_1 : bool; nr_5_St_19_Falha : bool;
                     ns_5_St_19_Falha_1 : bool; failed_2_St_19_Falha : bool;
                     nr_5_St_19_Funcionando : bool;
                     ns_5_St_19_Funcionando_1 : bool;
                     failed_2_St_19_Funcionando : bool; ck_45_1 : bool;
                     r_5_St_19_Falha : bool; s_5_St_19_Falha_1 : bool;
                     r_5_St_19_Funcionando : bool;
                     s_5_St_19_Funcionando_1 : bool; ck_44_1 : bool;
                     nr_6_St_20_On : bool; ns_6_St_20_On_1 : bool;
                     lamp_on_St_20_On : int; nr_6_St_20_Off : bool;
                     ns_6_St_20_Off_1 : bool; lamp_on_St_20_Off : int;
                     ck_43_1 : bool; v_229 : bool; v_228 : bool;
                     v_227 : bool; v_226 : bool; v_225 : bool; v_224 : bool;
                     r_6_St_20_On : bool; s_6_St_20_On_1 : bool;
                     r_6_St_20_Off : bool; s_6_St_20_Off_1 : bool;
                     ck_42_1 : bool; out_1_false : int; out_1_true : int;
                     ck_41 : bool; nr_7_St_21_Falha : bool;
                     ns_7_St_21_Falha_1 : bool; failed_1_St_21_Falha : bool;
                     nr_7_St_21_Funcionando : bool;
                     ns_7_St_21_Funcionando_1 : bool;
                     failed_1_St_21_Funcionando : bool; ck_40_1 : bool;
                     r_7_St_21_Falha : bool; s_7_St_21_Falha_1 : bool;
                     r_7_St_21_Funcionando : bool;
                     s_7_St_21_Funcionando_1 : bool; ck_39_1 : bool;
                     v_333 : bool; v_332 : bool; v_331 : bool; v_330 : bool;
                     v_329 : bool; v_328 : bool; v_327 : int; v_326 : int;
                     ns_8_St_22_Max_2_0 : bool; ns_8_St_22_Max_2_1 : bool;
                     ns_8_St_22_Min_2_0 : bool; ns_8_St_22_Min_2_1 : bool;
                     ns_8_St_22_Off_2_0 : bool; ns_8_St_22_Off_2_1 : bool;
                     ck_38_2_0 : bool; ck_38_2_1 : bool;
                     nr_8_St_22_Max : bool; ns_8_St_22_Max_2 : bool;
                     ns_8_St_22_Max_1 : bool; air_state_1_St_22_Max : int;
                     nr_8_St_22_Min : bool; ns_8_St_22_Min_2 : bool;
                     ns_8_St_22_Min_1 : bool; air_state_1_St_22_Min : int;
                     nr_8_St_22_Off : bool; ns_8_St_22_Off_2 : bool;
                     ns_8_St_22_Off_1 : bool; air_state_1_St_22_Off : int;
                     ck_38_2 : bool; ck_38_1 : bool; v_222_2_0 : bool;
                     v_222_2_1 : bool; v_223 : bool; v_222_2 : bool;
                     v_222_1 : bool; v_221 : bool; v_219_2_0 : bool;
                     v_219_2_1 : bool; v_220 : bool; v_219_2 : bool;
                     v_219_1 : bool; v_218 : bool; v_217 : bool;
                     v_215_2_0 : bool; v_215_2_1 : bool; v_216 : bool;
                     v_215_2 : bool; v_215_1 : bool; v_214 : bool;
                     v_213 : bool; v_341 : bool; v_340 : bool; v_339 : bool;
                     v_338 : bool; v_337 : bool; v_336 : bool; v_335 : bool;
                     v_334 : bool; s_8_St_22_Max_2_0 : bool;
                     s_8_St_22_Max_2_1 : bool; s_8_St_22_Min_2_0 : bool;
                     s_8_St_22_Min_2_1 : bool; s_8_St_22_Off_2_0 : bool;
                     s_8_St_22_Off_2_1 : bool; ck_37_2_0 : bool;
                     ck_37_2_1 : bool; r_8_St_22_Max : bool;
                     s_8_St_22_Max_2 : bool; s_8_St_22_Max_1 : bool;
                     r_8_St_22_Min : bool; s_8_St_22_Min_2 : bool;
                     s_8_St_22_Min_1 : bool; r_8_St_22_Off : bool;
                     s_8_St_22_Off_2 : bool; s_8_St_22_Off_1 : bool;
                     ck_37_2 : bool; ck_37_1 : bool; out_false : int;
                     out_true : int; ck_36 : bool; nr_9_St_23_Open : bool;
                     ns_9_St_23_Open_1 : bool;
                     window_open_1_St_23_Open : bool;
                     nr_9_St_23_Closed : bool; ns_9_St_23_Closed_1 : bool;
                     window_open_1_St_23_Closed : bool; ck_35_1 : bool;
                     v_212 : bool; r_9_St_23_Open : bool;
                     s_9_St_23_Open_1 : bool; r_9_St_23_Closed : bool;
                     s_9_St_23_Closed_1 : bool; ck_34_1 : bool;
                     nr_10_St_24_On : bool; ns_10_St_24_On_1 : bool;
                     computer_on_St_24_On : bool; nr_10_St_24_Off : bool;
                     ns_10_St_24_Off_1 : bool; computer_on_St_24_Off : bool;
                     ck_33_1 : bool; v_211 : bool; r_10_St_24_On : bool;
                     s_10_St_24_On_1 : bool; r_10_St_24_Off : bool;
                     s_10_St_24_Off_1 : bool; ck_32_1 : bool;
                     nr_11_St_25_Present : bool;
                     ns_11_St_25_Present_1 : bool;
                     presence_1_St_25_Present : bool;
                     nr_11_St_25_Not_Present : bool;
                     ns_11_St_25_Not_Present_1 : bool;
                     presence_1_St_25_Not_Present : bool; ck_31_1 : bool;
                     r_11_St_25_Present : bool; s_11_St_25_Present_1 : bool;
                     r_11_St_25_Not_Present : bool;
                     s_11_St_25_Not_Present_1 : bool; ck_30_1 : bool;
                     nr_12_St_26_Present : bool;
                     ns_12_St_26_Present_1 : bool;
                     presence_St_26_Present : bool;
                     nr_12_St_26_Not_Present : bool;
                     ns_12_St_26_Not_Present_1 : bool;
                     presence_St_26_Not_Present : bool; ck_29_1 : bool;
                     r_12_St_26_Present : bool; s_12_St_26_Present_1 : bool;
                     r_12_St_26_Not_Present : bool;
                     s_12_St_26_Not_Present_1 : bool; ck_28_1 : bool;
                     nr_13_St_27_Open : bool; ns_13_St_27_Open_1 : bool;
                     closet_open_1_St_27_Open : bool;
                     nr_13_St_27_Locked : bool; ns_13_St_27_Locked_1 : bool;
                     closet_open_1_St_27_Locked : bool; ck_27_1 : bool;
                     v_210 : bool; r_13_St_27_Open : bool;
                     s_13_St_27_Open_1 : bool; r_13_St_27_Locked : bool;
                     s_13_St_27_Locked_1 : bool; ck_26_1 : bool;
                     nr_14_St_28_Open : bool; ns_14_St_28_Open_1 : bool;
                     door_open_1_St_28_Open : bool;
                     nr_14_St_28_Closed : bool; ns_14_St_28_Closed_1 : bool;
                     door_open_1_St_28_Closed : bool; ck_25_1 : bool;
                     v_209 : bool; v_208 : bool; v_207 : bool; v_206 : bool;
                     v_205 : bool; v_204 : bool; r_14_St_28_Open : bool;
                     s_14_St_28_Open_1 : bool; r_14_St_28_Closed : bool;
                     s_14_St_28_Closed_1 : bool; ck_24_1 : bool;
                     nr_15_St_29_Noite : bool; ns_15_St_29_Noite_1 : bool;
                     night_1_St_29_Noite : bool; nr_15_St_29_Dia : bool;
                     ns_15_St_29_Dia_1 : bool; night_1_St_29_Dia : bool;
                     ck_23_1 : bool; r_15_St_29_Noite : bool;
                     s_15_St_29_Noite_1 : bool; r_15_St_29_Dia : bool;
                     s_15_St_29_Dia_1 : bool; ck_1 : bool; s_8_2_0 : bool;
                     s_8_2_1 : bool; ns_8_2_0 : bool; ns_8_2_1 : bool;
                     s_15_1 : bool; ns_15_1 : bool; r_15 : bool;
                     nr_15 : bool; pnr_15 : bool; s_14_1 : bool;
                     ns_14_1 : bool; r_14 : bool; nr_14 : bool;
                     pnr_14 : bool; s_13_1 : bool; ns_13_1 : bool;
                     r_13 : bool; nr_13 : bool; pnr_13 : bool; s_12_1 : bool;
                     ns_12_1 : bool; r_12 : bool; nr_12 : bool;
                     pnr_12 : bool; s_11_1 : bool; ns_11_1 : bool;
                     r_11 : bool; nr_11 : bool; pnr_11 : bool; s_10_1 : bool;
                     ns_10_1 : bool; r_10 : bool; nr_10 : bool;
                     pnr_10 : bool; s_9_1 : bool; ns_9_1 : bool; r_9 : bool;
                     nr_9 : bool; pnr_9 : bool; s_8_2 : bool; s_8_1 : bool;
                     ns_8_2 : bool; ns_8_1 : bool; r_8 : bool; nr_8 : bool;
                     pnr_8 : bool; s_7_1 : bool; ns_7_1 : bool; r_7 : bool;
                     nr_7 : bool; pnr_7 : bool; s_6_1 : bool; ns_6_1 : bool;
                     r_6 : bool; nr_6 : bool; pnr_6 : bool; s_5_1 : bool;
                     ns_5_1 : bool; r_5 : bool; nr_5 : bool; pnr_5 : bool;
                     s_4_1 : bool; ns_4_1 : bool; r_4 : bool; nr_4 : bool;
                     pnr_4 : bool; s_1 : bool; ns_1 : bool; r : bool;
                     nr : bool; pnr : bool; sw_3 : bool; c1_6 : bool;
                     c2_6 : bool; failed_recovered_5 : bool;
                     failed_recovered_3 : bool; failed_3 : bool; c1_3 : bool;
                     c2_3 : bool; sw_2 : bool; blind_open : bool;
                     blind : bool; failed_5 : bool; sw : bool; c1_5 : bool;
                     c2_5 : bool; failed_recovered_4 : bool;
                     failed_recovered_2 : bool; failed_2 : bool; c1_2 : bool;
                     c2_2 : bool; sw_1 : bool; lamp_on : int; lamp : int;
                     failed_4 : bool; out_1 : int; c1_4 : bool; c2_4 : bool;
                     failed_recovered : bool; failed_recovered_1 : bool;
                     failed_1 : bool; c1_1 : bool; c2_1 : bool;
                     air_state_1 : int; air_state : int; failed : bool;
                     out : int; c_2 : bool; window_open_1 : bool; c_1 : bool;
                     computer_on : bool; arrived_1 : bool; presence_1 : bool;
                     arrived : bool; presence : bool; c : bool;
                     closet_open_1 : bool; push : bool; c1 : bool; c2 : bool;
                     door_open_1 : bool; change : bool; night_1 : bool;
  let
    sw_3 = blind_switch;
    c1_6 = c_blind_1;
    c2_6 = c_blind_2;
    failed_recovered_5 = blind_failed_recovered;
    failed_recovered_3 = failed_recovered_5;
    pnr = false fby nr;
    ck_49_1 = s_1;
    failed_3_St_17_Funcionando = false;
    nr_St_17_Funcionando = false;
    ns_St_17_Funcionando_1 = false;
    failed_3_St_17_Falha = true;
    nr_St_17_Falha = false;
    ns_St_17_Falha_1 = true;
    failed_3 =
      merge ck_49_1
        (true -> failed_3_St_17_Falha)(false -> failed_3_St_17_Funcionando);
    ns_1 =
      merge ck_49_1
        (true -> ns_St_17_Falha_1)(false -> ns_St_17_Funcionando_1);
    nr =
      merge ck_49_1 (true -> nr_St_17_Falha)(false -> nr_St_17_Funcionando);
    ck_48_1 = false fby ns_1;
    r_St_17_Funcionando =
      if (failed_recovered_3 when false(ck_48_1))
      then true
      else (pnr when false(ck_48_1));
    s_St_17_Funcionando_1 =
      if (failed_recovered_3 when false(ck_48_1)) then true else false;
    r_St_17_Falha =
      if (failed_recovered_3 when true(ck_48_1))
      then true
      else (pnr when true(ck_48_1));
    s_St_17_Falha_1 =
      if (failed_recovered_3 when true(ck_48_1)) then false else true;
    s_1 =
      merge ck_48_1 (true -> s_St_17_Falha_1)(false -> s_St_17_Funcionando_1);
    r = merge ck_48_1 (true -> r_St_17_Falha)(false -> r_St_17_Funcionando);
    c1_3 = sw_3;
    c2_3 = c1_6;
    sw_2 = c2_6;
    pnr_4 = false fby nr_4;
    ck_47_1 = s_4_1;
    blind_open_St_18_Down = false;
    nr_4_St_18_Down = false;
    ns_4_St_18_Down_1 = true;
    blind_open_St_18_Up = true;
    nr_4_St_18_Up = false;
    ns_4_St_18_Up_1 = false;
    blind_open =
      merge ck_47_1
        (true -> blind_open_St_18_Down)(false -> blind_open_St_18_Up);
    ns_4_1 =
      merge ck_47_1 (true -> ns_4_St_18_Down_1)(false -> ns_4_St_18_Up_1);
    nr_4 = merge ck_47_1 (true -> nr_4_St_18_Down)(false -> nr_4_St_18_Up);
    ck_46_1 = true fby ns_4_1;
    r_4_St_18_Down = if v_235 then true else (pnr_4 when true(ck_46_1));
    s_4_St_18_Down_1 = if v_235 then false else true;
    v_235 = (v_233 or v_234);
    v_234 = not((c2_3 when true(ck_46_1)));
    v_233 = ((c1_3 when true(ck_46_1)) & (sw_2 when true(ck_46_1)));
    r_4_St_18_Up = if v_232 then true else (pnr_4 when false(ck_46_1));
    s_4_St_18_Up_1 = if v_232 then true else false;
    v_232 = (v_230 or v_231);
    v_231 = not((c2_3 when false(ck_46_1)));
    v_230 = ((c1_3 when false(ck_46_1)) & (sw_2 when false(ck_46_1)));
    s_4_1 = merge ck_46_1 (true -> s_4_St_18_Down_1)(false -> s_4_St_18_Up_1);
    r_4 = merge ck_46_1 (true -> r_4_St_18_Down)(false -> r_4_St_18_Up);
    blind = blind_open;
    failed_5 = failed_3;
    sw = light_switch;
    c1_5 = c_light_1;
    c2_5 = c_light_2;
    failed_recovered_4 = light_failed_recovered;
    failed_recovered_2 = failed_recovered_4;
    pnr_5 = false fby nr_5;
    ck_45_1 = s_5_1;
    failed_2_St_19_Funcionando = false;
    nr_5_St_19_Funcionando = false;
    ns_5_St_19_Funcionando_1 = false;
    failed_2_St_19_Falha = true;
    nr_5_St_19_Falha = false;
    ns_5_St_19_Falha_1 = true;
    failed_2 =
      merge ck_45_1
        (true -> failed_2_St_19_Falha)(false -> failed_2_St_19_Funcionando);
    ns_5_1 =
      merge ck_45_1
        (true -> ns_5_St_19_Falha_1)(false -> ns_5_St_19_Funcionando_1);
    nr_5 =
      merge ck_45_1
        (true -> nr_5_St_19_Falha)(false -> nr_5_St_19_Funcionando);
    ck_44_1 = false fby ns_5_1;
    r_5_St_19_Funcionando =
      if (failed_recovered_2 when false(ck_44_1))
      then true
      else (pnr_5 when false(ck_44_1));
    s_5_St_19_Funcionando_1 =
      if (failed_recovered_2 when false(ck_44_1)) then true else false;
    r_5_St_19_Falha =
      if (failed_recovered_2 when true(ck_44_1))
      then true
      else (pnr_5 when true(ck_44_1));
    s_5_St_19_Falha_1 =
      if (failed_recovered_2 when true(ck_44_1)) then false else true;
    s_5_1 =
      merge ck_44_1
        (true -> s_5_St_19_Falha_1)(false -> s_5_St_19_Funcionando_1);
    r_5 =
      merge ck_44_1 (true -> r_5_St_19_Falha)(false -> r_5_St_19_Funcionando);
    c1_2 = sw;
    c2_2 = c1_5;
    sw_1 = c2_5;
    pnr_6 = false fby nr_6;
    ck_43_1 = s_6_1;
    lamp_on_St_20_Off = 0;
    nr_6_St_20_Off = false;
    ns_6_St_20_Off_1 = true;
    lamp_on_St_20_On = 1;
    nr_6_St_20_On = false;
    ns_6_St_20_On_1 = false;
    lamp_on =
      merge ck_43_1 (true -> lamp_on_St_20_Off)(false -> lamp_on_St_20_On);
    ns_6_1 =
      merge ck_43_1 (true -> ns_6_St_20_Off_1)(false -> ns_6_St_20_On_1);
    nr_6 = merge ck_43_1 (true -> nr_6_St_20_Off)(false -> nr_6_St_20_On);
    ck_42_1 = true fby ns_6_1;
    r_6_St_20_Off = if v_229 then true else (pnr_6 when true(ck_42_1));
    s_6_St_20_Off_1 = if v_229 then false else true;
    v_229 = (v_227 or v_228);
    v_228 = not((c2_2 when true(ck_42_1)));
    v_227 = ((c1_2 when true(ck_42_1)) & (sw_1 when true(ck_42_1)));
    r_6_St_20_On = if v_226 then true else (pnr_6 when false(ck_42_1));
    s_6_St_20_On_1 = if v_226 then true else false;
    v_226 = (v_224 or v_225);
    v_225 = not((c2_2 when false(ck_42_1)));
    v_224 = ((c1_2 when false(ck_42_1)) & (sw_1 when false(ck_42_1)));
    s_6_1 = merge ck_42_1 (true -> s_6_St_20_Off_1)(false -> s_6_St_20_On_1);
    r_6 = merge ck_42_1 (true -> r_6_St_20_Off)(false -> r_6_St_20_On);
    lamp = lamp_on;
    failed_4 = failed_2;
    ck_41 = failed_4;
    out_1_true = ((lamp when true(ck_41)) + 2);
    out_1_false = (lamp when false(ck_41));
    out_1 = merge ck_41 (false -> out_1_false)(true -> out_1_true);
    c1_4 = c_air_1;
    c2_4 = c_air_2;
    failed_recovered = air_failed_recovered;
    failed_recovered_1 = failed_recovered;
    pnr_7 = false fby nr_7;
    ck_40_1 = s_7_1;
    failed_1_St_21_Funcionando = false;
    nr_7_St_21_Funcionando = false;
    ns_7_St_21_Funcionando_1 = false;
    failed_1_St_21_Falha = true;
    nr_7_St_21_Falha = false;
    ns_7_St_21_Falha_1 = true;
    failed_1 =
      merge ck_40_1
        (true -> failed_1_St_21_Falha)(false -> failed_1_St_21_Funcionando);
    ns_7_1 =
      merge ck_40_1
        (true -> ns_7_St_21_Falha_1)(false -> ns_7_St_21_Funcionando_1);
    nr_7 =
      merge ck_40_1
        (true -> nr_7_St_21_Falha)(false -> nr_7_St_21_Funcionando);
    ck_39_1 = false fby ns_7_1;
    r_7_St_21_Funcionando =
      if (failed_recovered_1 when false(ck_39_1))
      then true
      else (pnr_7 when false(ck_39_1));
    s_7_St_21_Funcionando_1 =
      if (failed_recovered_1 when false(ck_39_1)) then true else false;
    r_7_St_21_Falha =
      if (failed_recovered_1 when true(ck_39_1))
      then true
      else (pnr_7 when true(ck_39_1));
    s_7_St_21_Falha_1 =
      if (failed_recovered_1 when true(ck_39_1)) then false else true;
    s_7_1 =
      merge ck_39_1
        (true -> s_7_St_21_Falha_1)(false -> s_7_St_21_Funcionando_1);
    r_7 =
      merge ck_39_1 (true -> r_7_St_21_Falha)(false -> r_7_St_21_Funcionando);
    c1_1 = c1_4;
    c2_1 = c2_4;
    pnr_8 = false fby nr_8;
    ck_38_1 = s_8_1;
    ck_38_2 = s_8_2;
    air_state_1_St_22_Off = 0;
    nr_8_St_22_Off = false;
    ns_8_St_22_Off_1 = false;
    ns_8_St_22_Off_2 = false;
    air_state_1_St_22_Min = 1;
    nr_8_St_22_Min = false;
    ns_8_St_22_Min_1 = true;
    ns_8_St_22_Min_2 = false;
    air_state_1_St_22_Max = 2;
    nr_8_St_22_Max = false;
    ns_8_St_22_Max_1 = true;
    ns_8_St_22_Max_2 = true;
    v_326 =
      merge ck_38_2_1
        (true -> air_state_1_St_22_Max)(false -> air_state_1_St_22_Min);
    v_327 =
      merge ck_38_2_0
        (true -> ((0 when false(ck_38_1)) when true(ck_38_2_0)))
        (false -> air_state_1_St_22_Off);
    air_state_1 = merge ck_38_1 (true -> v_326)(false -> v_327);
    v_328 =
      merge ck_38_2_1 (true -> ns_8_St_22_Max_1)(false -> ns_8_St_22_Min_1);
    v_329 =
      merge ck_38_2_1 (true -> ns_8_St_22_Max_2)(false -> ns_8_St_22_Min_2);
    v_330 =
      merge ck_38_2_0
        (true -> ((true when false(ck_38_1)) when true(ck_38_2_0)))
        (false -> ns_8_St_22_Off_1);
    v_331 =
      merge ck_38_2_0
        (true -> ((true when false(ck_38_1)) when true(ck_38_2_0)))
        (false -> ns_8_St_22_Off_2);
    ns_8_1 = merge ck_38_1 (true -> v_328)(false -> v_330);
    ns_8_2 = merge ck_38_1 (true -> v_329)(false -> v_331);
    v_332 = merge ck_38_2_1 (true -> nr_8_St_22_Max)(false -> nr_8_St_22_Min);
    v_333 =
      merge ck_38_2_0
        (true -> ((true when false(ck_38_1)) when true(ck_38_2_0)))
        (false -> nr_8_St_22_Off);
    nr_8 = merge ck_38_1 (true -> v_332)(false -> v_333);
    ck_38_2_1 = (ck_38_2 when true(ck_38_1));
    ck_38_2_0 = (ck_38_2 when false(ck_38_1));
    ns_8_St_22_Off_2_1 = (ns_8_St_22_Off_2 when true(ns_8_St_22_Off_1));
    ns_8_St_22_Off_2_0 = (ns_8_St_22_Off_2 when false(ns_8_St_22_Off_1));
    ns_8_St_22_Min_2_1 = (ns_8_St_22_Min_2 when true(ns_8_St_22_Min_1));
    ns_8_St_22_Min_2_0 = (ns_8_St_22_Min_2 when false(ns_8_St_22_Min_1));
    ns_8_St_22_Max_2_1 = (ns_8_St_22_Max_2 when true(ns_8_St_22_Max_1));
    ns_8_St_22_Max_2_0 = (ns_8_St_22_Max_2 when false(ns_8_St_22_Max_1));
    v_334 = false fby ns_8_1;
    v_335 = false fby ns_8_2;
    ck_37_1 = v_334;
    ck_37_2 = v_335;
    r_8_St_22_Off =
      if ((c1_1 when false(ck_37_1)) when false(ck_37_2_0))
      then true
      else v_223;
    s_8_St_22_Off_1 =
      if ((c1_1 when false(ck_37_1)) when false(ck_37_2_0))
      then true
      else v_222_1;
    s_8_St_22_Off_2 =
      if ((c1_1 when false(ck_37_1)) when false(ck_37_2_0))
      then false
      else v_222_2;
    v_223 =
      if v_221
      then true
      else ((pnr_8 when false(ck_37_1)) when false(ck_37_2_0));
    v_222_1 = if v_221 then true else false;
    v_222_2 = if v_221 then true else false;
    v_221 = not(((c2_1 when false(ck_37_1)) when false(ck_37_2_0)));
    v_222_2_1 = (v_222_2 when true(v_222_1));
    v_222_2_0 = (v_222_2 when false(v_222_1));
    r_8_St_22_Min = if v_217 then true else v_220;
    s_8_St_22_Min_1 = if v_217 then false else v_219_1;
    s_8_St_22_Min_2 = if v_217 then false else v_219_2;
    v_220 =
      if v_218
      then true
      else ((pnr_8 when true(ck_37_1)) when false(ck_37_2_1));
    v_219_1 = if v_218 then true else true;
    v_219_2 = if v_218 then true else false;
    v_218 = not(((c2_1 when true(ck_37_1)) when false(ck_37_2_1)));
    v_217 = not(((c1_1 when true(ck_37_1)) when false(ck_37_2_1)));
    v_219_2_1 = (v_219_2 when true(v_219_1));
    v_219_2_0 = (v_219_2 when false(v_219_1));
    r_8_St_22_Max = if v_213 then true else v_216;
    s_8_St_22_Max_1 = if v_213 then true else v_215_1;
    s_8_St_22_Max_2 = if v_213 then false else v_215_2;
    v_216 =
      if v_214
      then true
      else ((pnr_8 when true(ck_37_1)) when true(ck_37_2_1));
    v_215_1 = if v_214 then false else true;
    v_215_2 = if v_214 then false else true;
    v_214 = not(((c2_1 when true(ck_37_1)) when true(ck_37_2_1)));
    v_213 = not(((c1_1 when true(ck_37_1)) when true(ck_37_2_1)));
    v_215_2_1 = (v_215_2 when true(v_215_1));
    v_215_2_0 = (v_215_2 when false(v_215_1));
    v_336 =
      merge ck_37_2_1 (true -> s_8_St_22_Max_1)(false -> s_8_St_22_Min_1);
    v_337 =
      merge ck_37_2_1 (true -> s_8_St_22_Max_2)(false -> s_8_St_22_Min_2);
    v_338 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> s_8_St_22_Off_1);
    v_339 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> s_8_St_22_Off_2);
    s_8_1 = merge ck_37_1 (true -> v_336)(false -> v_338);
    s_8_2 = merge ck_37_1 (true -> v_337)(false -> v_339);
    v_340 = merge ck_37_2_1 (true -> r_8_St_22_Max)(false -> r_8_St_22_Min);
    v_341 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> r_8_St_22_Off);
    r_8 = merge ck_37_1 (true -> v_340)(false -> v_341);
    ck_37_2_1 = (ck_37_2 when true(ck_37_1));
    ck_37_2_0 = (ck_37_2 when false(ck_37_1));
    s_8_St_22_Off_2_1 = (s_8_St_22_Off_2 when true(s_8_St_22_Off_1));
    s_8_St_22_Off_2_0 = (s_8_St_22_Off_2 when false(s_8_St_22_Off_1));
    s_8_St_22_Min_2_1 = (s_8_St_22_Min_2 when true(s_8_St_22_Min_1));
    s_8_St_22_Min_2_0 = (s_8_St_22_Min_2 when false(s_8_St_22_Min_1));
    s_8_St_22_Max_2_1 = (s_8_St_22_Max_2 when true(s_8_St_22_Max_1));
    s_8_St_22_Max_2_0 = (s_8_St_22_Max_2 when false(s_8_St_22_Max_1));
    air_state = air_state_1;
    failed = failed_1;
    ck_36 = failed;
    out_true = ((air_state when true(ck_36)) + 3);
    out_false = (air_state when false(ck_36));
    out = merge ck_36 (false -> out_false)(true -> out_true);
    c_2 = c_window;
    pnr_9 = false fby nr_9;
    ck_35_1 = s_9_1;
    window_open_1_St_23_Closed = false;
    nr_9_St_23_Closed = false;
    ns_9_St_23_Closed_1 = true;
    window_open_1_St_23_Open = true;
    nr_9_St_23_Open = false;
    ns_9_St_23_Open_1 = false;
    window_open_1 =
      merge ck_35_1
        (true -> window_open_1_St_23_Closed)
        (false -> window_open_1_St_23_Open);
    ns_9_1 =
      merge ck_35_1 (true -> ns_9_St_23_Closed_1)(false -> ns_9_St_23_Open_1);
    nr_9 =
      merge ck_35_1 (true -> nr_9_St_23_Closed)(false -> nr_9_St_23_Open);
    ck_34_1 = true fby ns_9_1;
    r_9_St_23_Closed = if v_212 then true else (pnr_9 when true(ck_34_1));
    s_9_St_23_Closed_1 = if v_212 then false else true;
    v_212 = not((c_2 when true(ck_34_1)));
    r_9_St_23_Open =
      if (c_2 when false(ck_34_1)) then true else (pnr_9 when false(ck_34_1));
    s_9_St_23_Open_1 = if (c_2 when false(ck_34_1)) then true else false;
    s_9_1 =
      merge ck_34_1 (true -> s_9_St_23_Closed_1)(false -> s_9_St_23_Open_1);
    r_9 = merge ck_34_1 (true -> r_9_St_23_Closed)(false -> r_9_St_23_Open);
    c_1 = c_pc;
    pnr_10 = false fby nr_10;
    ck_33_1 = s_10_1;
    computer_on_St_24_Off = false;
    nr_10_St_24_Off = false;
    ns_10_St_24_Off_1 = true;
    computer_on_St_24_On = true;
    nr_10_St_24_On = false;
    ns_10_St_24_On_1 = false;
    computer_on =
      merge ck_33_1
        (true -> computer_on_St_24_Off)(false -> computer_on_St_24_On);
    ns_10_1 =
      merge ck_33_1 (true -> ns_10_St_24_Off_1)(false -> ns_10_St_24_On_1);
    nr_10 = merge ck_33_1 (true -> nr_10_St_24_Off)(false -> nr_10_St_24_On);
    ck_32_1 = true fby ns_10_1;
    r_10_St_24_Off =
      if (c_1 when true(ck_32_1)) then true else (pnr_10 when true(ck_32_1));
    s_10_St_24_Off_1 = if (c_1 when true(ck_32_1)) then false else true;
    r_10_St_24_On = if v_211 then true else (pnr_10 when false(ck_32_1));
    s_10_St_24_On_1 = if v_211 then true else false;
    v_211 = not((c_1 when false(ck_32_1)));
    s_10_1 =
      merge ck_32_1 (true -> s_10_St_24_Off_1)(false -> s_10_St_24_On_1);
    r_10 = merge ck_32_1 (true -> r_10_St_24_Off)(false -> r_10_St_24_On);
    arrived_1 = cleaner;
    pnr_11 = false fby nr_11;
    ck_31_1 = s_11_1;
    presence_1_St_25_Not_Present = false;
    nr_11_St_25_Not_Present = false;
    ns_11_St_25_Not_Present_1 = true;
    presence_1_St_25_Present = true;
    nr_11_St_25_Present = false;
    ns_11_St_25_Present_1 = false;
    presence_1 =
      merge ck_31_1
        (true -> presence_1_St_25_Not_Present)
        (false -> presence_1_St_25_Present);
    ns_11_1 =
      merge ck_31_1
        (true -> ns_11_St_25_Not_Present_1)(false -> ns_11_St_25_Present_1);
    nr_11 =
      merge ck_31_1
        (true -> nr_11_St_25_Not_Present)(false -> nr_11_St_25_Present);
    ck_30_1 = true fby ns_11_1;
    r_11_St_25_Not_Present =
      if (arrived_1 when true(ck_30_1))
      then true
      else (pnr_11 when true(ck_30_1));
    s_11_St_25_Not_Present_1 =
      if (arrived_1 when true(ck_30_1)) then false else true;
    r_11_St_25_Present =
      if (arrived_1 when false(ck_30_1))
      then true
      else (pnr_11 when false(ck_30_1));
    s_11_St_25_Present_1 =
      if (arrived_1 when false(ck_30_1)) then true else false;
    s_11_1 =
      merge ck_30_1
        (true -> s_11_St_25_Not_Present_1)(false -> s_11_St_25_Present_1);
    r_11 =
      merge ck_30_1
        (true -> r_11_St_25_Not_Present)(false -> r_11_St_25_Present);
    arrived = worker;
    pnr_12 = false fby nr_12;
    ck_29_1 = s_12_1;
    presence_St_26_Not_Present = false;
    nr_12_St_26_Not_Present = false;
    ns_12_St_26_Not_Present_1 = true;
    presence_St_26_Present = true;
    nr_12_St_26_Present = false;
    ns_12_St_26_Present_1 = false;
    presence =
      merge ck_29_1
        (true -> presence_St_26_Not_Present)(false -> presence_St_26_Present);
    ns_12_1 =
      merge ck_29_1
        (true -> ns_12_St_26_Not_Present_1)(false -> ns_12_St_26_Present_1);
    nr_12 =
      merge ck_29_1
        (true -> nr_12_St_26_Not_Present)(false -> nr_12_St_26_Present);
    ck_28_1 = true fby ns_12_1;
    r_12_St_26_Not_Present =
      if (arrived when true(ck_28_1))
      then true
      else (pnr_12 when true(ck_28_1));
    s_12_St_26_Not_Present_1 =
      if (arrived when true(ck_28_1)) then false else true;
    r_12_St_26_Present =
      if (arrived when false(ck_28_1))
      then true
      else (pnr_12 when false(ck_28_1));
    s_12_St_26_Present_1 =
      if (arrived when false(ck_28_1)) then true else false;
    s_12_1 =
      merge ck_28_1
        (true -> s_12_St_26_Not_Present_1)(false -> s_12_St_26_Present_1);
    r_12 =
      merge ck_28_1
        (true -> r_12_St_26_Not_Present)(false -> r_12_St_26_Present);
    c = c_closet;
    pnr_13 = false fby nr_13;
    ck_27_1 = s_13_1;
    closet_open_1_St_27_Locked = false;
    nr_13_St_27_Locked = false;
    ns_13_St_27_Locked_1 = true;
    closet_open_1_St_27_Open = true;
    nr_13_St_27_Open = false;
    ns_13_St_27_Open_1 = false;
    closet_open_1 =
      merge ck_27_1
        (true -> closet_open_1_St_27_Locked)
        (false -> closet_open_1_St_27_Open);
    ns_13_1 =
      merge ck_27_1
        (true -> ns_13_St_27_Locked_1)(false -> ns_13_St_27_Open_1);
    nr_13 =
      merge ck_27_1 (true -> nr_13_St_27_Locked)(false -> nr_13_St_27_Open);
    ck_26_1 = true fby ns_13_1;
    r_13_St_27_Locked = if v_210 then true else (pnr_13 when true(ck_26_1));
    s_13_St_27_Locked_1 = if v_210 then false else true;
    v_210 = not((c when true(ck_26_1)));
    r_13_St_27_Open =
      if (c when false(ck_26_1)) then true else (pnr_13 when false(ck_26_1));
    s_13_St_27_Open_1 = if (c when false(ck_26_1)) then true else false;
    s_13_1 =
      merge ck_26_1 (true -> s_13_St_27_Locked_1)(false -> s_13_St_27_Open_1);
    r_13 =
      merge ck_26_1 (true -> r_13_St_27_Locked)(false -> r_13_St_27_Open);
    push = false;
    c1 = c_door_1;
    c2 = c_door_2;
    pnr_14 = false fby nr_14;
    ck_25_1 = s_14_1;
    door_open_1_St_28_Closed = false;
    nr_14_St_28_Closed = false;
    ns_14_St_28_Closed_1 = true;
    door_open_1_St_28_Open = true;
    nr_14_St_28_Open = false;
    ns_14_St_28_Open_1 = false;
    door_open_1 =
      merge ck_25_1
        (true -> door_open_1_St_28_Closed)(false -> door_open_1_St_28_Open);
    ns_14_1 =
      merge ck_25_1
        (true -> ns_14_St_28_Closed_1)(false -> ns_14_St_28_Open_1);
    nr_14 =
      merge ck_25_1 (true -> nr_14_St_28_Closed)(false -> nr_14_St_28_Open);
    ck_24_1 = true fby ns_14_1;
    r_14_St_28_Closed = if v_209 then true else (pnr_14 when true(ck_24_1));
    s_14_St_28_Closed_1 = if v_209 then false else true;
    v_209 = (v_207 or v_208);
    v_208 = not((c1 when true(ck_24_1)));
    v_207 = ((push when true(ck_24_1)) & (c2 when true(ck_24_1)));
    r_14_St_28_Open = if v_206 then true else (pnr_14 when false(ck_24_1));
    s_14_St_28_Open_1 = if v_206 then true else false;
    v_206 = (v_204 or v_205);
    v_205 = not((c1 when false(ck_24_1)));
    v_204 = ((push when false(ck_24_1)) & (c2 when false(ck_24_1)));
    s_14_1 =
      merge ck_24_1 (true -> s_14_St_28_Closed_1)(false -> s_14_St_28_Open_1);
    r_14 =
      merge ck_24_1 (true -> r_14_St_28_Closed)(false -> r_14_St_28_Open);
    change = change_shift;
    pnr_15 = false fby nr_15;
    ck_23_1 = s_15_1;
    night_1_St_29_Dia = false;
    nr_15_St_29_Dia = false;
    ns_15_St_29_Dia_1 = true;
    night_1_St_29_Noite = true;
    nr_15_St_29_Noite = false;
    ns_15_St_29_Noite_1 = false;
    night_1 =
      merge ck_23_1 (true -> night_1_St_29_Dia)(false -> night_1_St_29_Noite);
    ns_15_1 =
      merge ck_23_1 (true -> ns_15_St_29_Dia_1)(false -> ns_15_St_29_Noite_1);
    nr_15 =
      merge ck_23_1 (true -> nr_15_St_29_Dia)(false -> nr_15_St_29_Noite);
    ck_1 = true fby ns_15_1;
    r_15_St_29_Dia =
      if (change when true(ck_1)) then true else (pnr_15 when true(ck_1));
    s_15_St_29_Dia_1 = if (change when true(ck_1)) then false else true;
    r_15_St_29_Noite =
      if (change when false(ck_1)) then true else (pnr_15 when false(ck_1));
    s_15_St_29_Noite_1 = if (change when false(ck_1)) then true else false;
    s_15_1 =
      merge ck_1 (true -> s_15_St_29_Dia_1)(false -> s_15_St_29_Noite_1);
    r_15 = merge ck_1 (true -> r_15_St_29_Dia)(false -> r_15_St_29_Noite);
    night = night_1;
    door_open = door_open_1;
    closet_open = closet_open_1;
    worker_presence = presence;
    cleaner_presence = presence_1;
    pc_on = computer_on;
    window_open = window_open_1;
    air_out = out;
    light_out = out_1;
    blind_failed = failed_5;
    blind_up = blind;
    ns_8_2_1 = (ns_8_2 when true(ns_8_1));
    ns_8_2_0 = (ns_8_2 when false(ns_8_1));
    s_8_2_1 = (s_8_2 when true(s_8_1));
    s_8_2_0 = (s_8_2 when false(s_8_1))
  tel

