type st_21 = St_21_Noite|St_21_Dia
type st_20 = St_20_Open|St_20_Closed
type st_19 = St_19_On|St_19_Off
type st_18 = St_18_Open|St_18_Locked
type st_17 = St_17_Preent|St_17_Not_Present
type st_16 = St_16_Preent|St_16_Not_Present
type st_15 = St_15_On|St_15_Off
type st_14 = St_14_Open|St_14_Closed
type st_13 = St_13_Off|St_13_Min|St_13_Max
type st_12 = St_12_Natural|St_12_Half|St_12_Artificial
type st_11 = St_11_Noite|St_11_Dia
type st_10 = St_10_Off|St_10_Min|St_10_Max
type st_9 = St_9_Up|St_9_Mid|St_9_Down
type st_8 = St_8_Some|St_8_None|St_8_All
type st_7 = St_7_Open|St_7_Closed
type st_6 = St_6_On|St_6_Off
type st_5 = St_5_Preent|St_5_Not_Present
type st_4 = St_4_Open|St_4_Locked
type st_3 = St_3_On|St_3_Off
type st_2 = St_2_Open|St_2_Closed
type st_1 = St_1_Natural|St_1_Half|St_1_Artificial
type st = St_Minimal_safety|St_Eco|St_Comfort
type modes = Minimal|Eco|Confort
node management_policy(eco_input : bool; comfort_input : bool)
returns (mode_2 : bool; mode_1 : bool)
var v_140 : bool; v_139 : bool; v_138 : bool; v_137 : bool; v_136 : bool;
    v_135 : bool; v_134 : bool; v_133 : bool; v_132 : bool; v_131 : bool;
    ns_St_Comfort_2_0 : bool; ns_St_Comfort_2_1 : bool;
    mode_St_Comfort_2_0 : bool; mode_St_Comfort_2_1 : bool;
    ns_St_Eco_2_0 : bool; ns_St_Eco_2_1 : bool; mode_St_Eco_2_0 : bool;
    mode_St_Eco_2_1 : bool; ns_St_Minimal_safety_2_0 : bool;
    ns_St_Minimal_safety_2_1 : bool; mode_St_Minimal_safety_2_0 : bool;
    mode_St_Minimal_safety_2_1 : bool; ck_1_2_0 : bool; ck_1_2_1 : bool;
    nr_St_Comfort : bool; ns_St_Comfort_2 : bool; ns_St_Comfort_1 : bool;
    mode_St_Comfort_2 : bool; mode_St_Comfort_1 : bool; nr_St_Eco : bool;
    ns_St_Eco_2 : bool; ns_St_Eco_1 : bool; mode_St_Eco_2 : bool;
    mode_St_Eco_1 : bool; nr_St_Minimal_safety : bool;
    ns_St_Minimal_safety_2 : bool; ns_St_Minimal_safety_1 : bool;
    mode_St_Minimal_safety_2 : bool; mode_St_Minimal_safety_1 : bool;
    ck_1_2 : bool; ck_1_1 : bool; v_4_2_0 : bool; v_4_2_1 : bool; v_5 : bool;
    v_4_2 : bool; v_4_1 : bool; v_2_2_0 : bool; v_2_2_1 : bool; v_3 : bool;
    v_2_2 : bool; v_2_1 : bool; v_2_3_0 : bool; v_2_3_1 : bool; v_1 : bool;
    v_2_3 : bool; v_1_1 : bool; v_148 : bool; v_147 : bool; v_146 : bool;
    v_145 : bool; v_144 : bool; v_143 : bool; v_142 : bool; v_141 : bool;
    s_St_Comfort_2_0 : bool; s_St_Comfort_2_1 : bool; s_St_Eco_2_0 : bool;
    s_St_Eco_2_1 : bool; s_St_Minimal_safety_2_0 : bool;
    s_St_Minimal_safety_2_1 : bool; ck_2_0 : bool; ck_2_1 : bool;
    r_St_Comfort : bool; s_St_Comfort_2 : bool; s_St_Comfort_1 : bool;
    r_St_Eco : bool; s_St_Eco_2 : bool; s_St_Eco_1 : bool;
    r_St_Minimal_safety : bool; s_St_Minimal_safety_2 : bool;
    s_St_Minimal_safety_1 : bool; ck_2 : bool; ck_1_3 : bool;
    mode_2_0 : bool; mode_2_1 : bool; s_2_0 : bool; s_2_1 : bool;
    ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool; ns_2 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  ck_1_2 = s_2;
  mode_St_Minimal_safety_1 = false;
  mode_St_Minimal_safety_2 = false;
  nr_St_Minimal_safety = false;
  ns_St_Minimal_safety_1 = false;
  ns_St_Minimal_safety_2 = false;
  mode_St_Eco_1 = true;
  mode_St_Eco_2 = false;
  nr_St_Eco = false;
  ns_St_Eco_1 = true;
  ns_St_Eco_2 = false;
  mode_St_Comfort_1 = true;
  mode_St_Comfort_2 = true;
  nr_St_Comfort = false;
  ns_St_Comfort_1 = true;
  ns_St_Comfort_2 = true;
  v_131 = merge ck_1_2_1 (true -> mode_St_Comfort_1)(false -> mode_St_Eco_1);
  v_132 = merge ck_1_2_1 (true -> mode_St_Comfort_2)(false -> mode_St_Eco_2);
  v_133 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> mode_St_Minimal_safety_1);
  v_134 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> mode_St_Minimal_safety_2);
  mode_1 = merge ck_1_1 (true -> v_131)(false -> v_133);
  mode_2 = merge ck_1_1 (true -> v_132)(false -> v_134);
  v_135 = merge ck_1_2_1 (true -> ns_St_Comfort_1)(false -> ns_St_Eco_1);
  v_136 = merge ck_1_2_1 (true -> ns_St_Comfort_2)(false -> ns_St_Eco_2);
  v_137 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> ns_St_Minimal_safety_1);
  v_138 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> ns_St_Minimal_safety_2);
  ns_1 = merge ck_1_1 (true -> v_135)(false -> v_137);
  ns_2 = merge ck_1_1 (true -> v_136)(false -> v_138);
  v_139 = merge ck_1_2_1 (true -> nr_St_Comfort)(false -> nr_St_Eco);
  v_140 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> nr_St_Minimal_safety);
  nr = merge ck_1_1 (true -> v_139)(false -> v_140);
  ck_1_2_1 = (ck_1_2 when true(ck_1_1));
  ck_1_2_0 = (ck_1_2 when false(ck_1_1));
  mode_St_Minimal_safety_2_1 =
    (mode_St_Minimal_safety_2 when true(mode_St_Minimal_safety_1));
  mode_St_Minimal_safety_2_0 =
    (mode_St_Minimal_safety_2 when false(mode_St_Minimal_safety_1));
  ns_St_Minimal_safety_2_1 =
    (ns_St_Minimal_safety_2 when true(ns_St_Minimal_safety_1));
  ns_St_Minimal_safety_2_0 =
    (ns_St_Minimal_safety_2 when false(ns_St_Minimal_safety_1));
  mode_St_Eco_2_1 = (mode_St_Eco_2 when true(mode_St_Eco_1));
  mode_St_Eco_2_0 = (mode_St_Eco_2 when false(mode_St_Eco_1));
  ns_St_Eco_2_1 = (ns_St_Eco_2 when true(ns_St_Eco_1));
  ns_St_Eco_2_0 = (ns_St_Eco_2 when false(ns_St_Eco_1));
  mode_St_Comfort_2_1 = (mode_St_Comfort_2 when true(mode_St_Comfort_1));
  mode_St_Comfort_2_0 = (mode_St_Comfort_2 when false(mode_St_Comfort_1));
  ns_St_Comfort_2_1 = (ns_St_Comfort_2 when true(ns_St_Comfort_1));
  ns_St_Comfort_2_0 = (ns_St_Comfort_2 when false(ns_St_Comfort_1));
  v_141 = false fby ns_1;
  v_142 = false fby ns_2;
  ck_1_3 = v_141;
  ck_2 = v_142;
  r_St_Minimal_safety =
    if ((eco_input when false(ck_1_3)) when false(ck_2_0)) then true else v_5;
  s_St_Minimal_safety_1 =
    if ((eco_input when false(ck_1_3)) when false(ck_2_0))
    then true
    else v_4_1;
  s_St_Minimal_safety_2 =
    if ((eco_input when false(ck_1_3)) when false(ck_2_0))
    then false
    else v_4_2;
  v_5 =
    if ((comfort_input when false(ck_1_3)) when false(ck_2_0))
    then true
    else ((pnr when false(ck_1_3)) when false(ck_2_0));
  v_4_1 =
    if ((comfort_input when false(ck_1_3)) when false(ck_2_0))
    then true
    else false;
  v_4_2 =
    if ((comfort_input when false(ck_1_3)) when false(ck_2_0))
    then true
    else false;
  v_4_2_1 = (v_4_2 when true(v_4_1));
  v_4_2_0 = (v_4_2 when false(v_4_1));
  r_St_Eco =
    if ((eco_input when true(ck_1_3)) when false(ck_2_1)) then true else v_3;
  s_St_Eco_1 =
    if ((eco_input when true(ck_1_3)) when false(ck_2_1))
    then false
    else v_2_1;
  s_St_Eco_2 =
    if ((eco_input when true(ck_1_3)) when false(ck_2_1))
    then false
    else v_2_2;
  v_3 =
    if ((comfort_input when true(ck_1_3)) when false(ck_2_1))
    then true
    else ((pnr when true(ck_1_3)) when false(ck_2_1));
  v_2_1 =
    if ((comfort_input when true(ck_1_3)) when false(ck_2_1))
    then true
    else true;
  v_2_2 =
    if ((comfort_input when true(ck_1_3)) when false(ck_2_1))
    then true
    else false;
  v_2_2_1 = (v_2_2 when true(v_2_1));
  v_2_2_0 = (v_2_2 when false(v_2_1));
  r_St_Comfort =
    if ((eco_input when true(ck_1_3)) when true(ck_2_1)) then true else v_1;
  s_St_Comfort_1 =
    if ((eco_input when true(ck_1_3)) when true(ck_2_1)) then true else v_1_1;
  s_St_Comfort_2 =
    if ((eco_input when true(ck_1_3)) when true(ck_2_1))
    then false
    else v_2_3;
  v_1 =
    if ((comfort_input when true(ck_1_3)) when true(ck_2_1))
    then true
    else ((pnr when true(ck_1_3)) when true(ck_2_1));
  v_1_1 =
    if ((comfort_input when true(ck_1_3)) when true(ck_2_1))
    then false
    else true;
  v_2_3 =
    if ((comfort_input when true(ck_1_3)) when true(ck_2_1))
    then false
    else true;
  v_2_3_1 = (v_2_3 when true(v_1_1));
  v_2_3_0 = (v_2_3 when false(v_1_1));
  v_143 = merge ck_2_1 (true -> s_St_Comfort_1)(false -> s_St_Eco_1);
  v_144 = merge ck_2_1 (true -> s_St_Comfort_2)(false -> s_St_Eco_2);
  v_145 =
    merge ck_2_0
      (true -> ((true when false(ck_1_3)) when true(ck_2_0)))
      (false -> s_St_Minimal_safety_1);
  v_146 =
    merge ck_2_0
      (true -> ((true when false(ck_1_3)) when true(ck_2_0)))
      (false -> s_St_Minimal_safety_2);
  s_1 = merge ck_1_3 (true -> v_143)(false -> v_145);
  s_2 = merge ck_1_3 (true -> v_144)(false -> v_146);
  v_147 = merge ck_2_1 (true -> r_St_Comfort)(false -> r_St_Eco);
  v_148 =
    merge ck_2_0
      (true -> ((true when false(ck_1_3)) when true(ck_2_0)))
      (false -> r_St_Minimal_safety);
  r = merge ck_1_3 (true -> v_147)(false -> v_148);
  ck_2_1 = (ck_2 when true(ck_1_3));
  ck_2_0 = (ck_2 when false(ck_1_3));
  s_St_Minimal_safety_2_1 =
    (s_St_Minimal_safety_2 when true(s_St_Minimal_safety_1));
  s_St_Minimal_safety_2_0 =
    (s_St_Minimal_safety_2 when false(s_St_Minimal_safety_1));
  s_St_Eco_2_1 = (s_St_Eco_2 when true(s_St_Eco_1));
  s_St_Eco_2_0 = (s_St_Eco_2 when false(s_St_Eco_1));
  s_St_Comfort_2_1 = (s_St_Comfort_2 when true(s_St_Comfort_1));
  s_St_Comfort_2_0 = (s_St_Comfort_2 when false(s_St_Comfort_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1));
  mode_2_1 = (mode_2 when true(mode_1));
  mode_2_0 = (mode_2 when false(mode_1))
tel

node ilumination_policy(up : bool; down : bool; night : bool)
returns (l_state : int; p_state : int; policy : int)
var v_160 : bool; v_159 : bool; v_158 : bool; v_157 : bool; v_156 : bool;
    v_155 : bool; v_154 : int; v_153 : int; v_152 : int; v_151 : int;
    v_150 : int; v_149 : int; ns_St_1_Artificial_2_0 : bool;
    ns_St_1_Artificial_2_1 : bool; ns_St_1_Half_2_0 : bool;
    ns_St_1_Half_2_1 : bool; ns_St_1_Natural_2_0 : bool;
    ns_St_1_Natural_2_1 : bool; ck_2_2_0 : bool; ck_2_2_1 : bool;
    nr_St_1_Artificial : bool; ns_St_1_Artificial_2 : bool;
    ns_St_1_Artificial_1 : bool; policy_St_1_Artificial : int;
    p_state_St_1_Artificial : int; l_state_St_1_Artificial : int;
    nr_St_1_Half : bool; ns_St_1_Half_2 : bool; ns_St_1_Half_1 : bool;
    policy_St_1_Half : int; p_state_St_1_Half : int; l_state_St_1_Half : int;
    nr_St_1_Natural : bool; ns_St_1_Natural_2 : bool;
    ns_St_1_Natural_1 : bool; policy_St_1_Natural : int;
    p_state_St_1_Natural : int; l_state_St_1_Natural : int; ck_2_2 : bool;
    ck_2_1 : bool; v_18_2_0 : bool; v_18_2_1 : bool; v_19 : bool;
    v_18_2 : bool; v_18_1 : bool; v_17 : bool; v_16 : bool; v_14_2_0 : bool;
    v_14_2_1 : bool; v_12_2_0 : bool; v_12_2_1 : bool; v_15 : bool;
    v_14_2 : bool; v_14_1 : bool; v_13 : bool; v_12_2 : bool; v_12_1 : bool;
    v_11 : bool; v_10 : bool; v_9 : bool; v_7_2_0 : bool; v_7_2_1 : bool;
    v_8 : bool; v_7_2 : bool; v_7_1 : bool; v_6 : bool; v : bool;
    v_168 : bool; v_167 : bool; v_166 : bool; v_165 : bool; v_164 : bool;
    v_163 : bool; v_162 : bool; v_161 : bool; s_St_1_Artificial_2_0 : bool;
    s_St_1_Artificial_2_1 : bool; s_St_1_Half_2_0 : bool;
    s_St_1_Half_2_1 : bool; s_St_1_Natural_2_0 : bool;
    s_St_1_Natural_2_1 : bool; ck_2_3_0 : bool; ck_2_3_1 : bool;
    r_St_1_Artificial : bool; s_St_1_Artificial_2 : bool;
    s_St_1_Artificial_1 : bool; r_St_1_Half : bool; s_St_1_Half_2 : bool;
    s_St_1_Half_1 : bool; r_St_1_Natural : bool; s_St_1_Natural_2 : bool;
    s_St_1_Natural_1 : bool; ck_2_3 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  ck_2_2 = s_2;
  l_state_St_1_Natural = 0;
  p_state_St_1_Natural = 0;
  policy_St_1_Natural = 1;
  nr_St_1_Natural = false;
  ns_St_1_Natural_1 = false;
  ns_St_1_Natural_2 = false;
  l_state_St_1_Half = 1;
  p_state_St_1_Half = 1;
  policy_St_1_Half = 2;
  nr_St_1_Half = false;
  ns_St_1_Half_1 = true;
  ns_St_1_Half_2 = false;
  l_state_St_1_Artificial = 2;
  p_state_St_1_Artificial = 2;
  policy_St_1_Artificial = 3;
  nr_St_1_Artificial = false;
  ns_St_1_Artificial_1 = true;
  ns_St_1_Artificial_2 = true;
  v_149 =
    merge ck_2_2_1
      (true -> l_state_St_1_Artificial)(false -> l_state_St_1_Half);
  v_150 =
    merge ck_2_2_0
      (true -> ((0 when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> l_state_St_1_Natural);
  l_state = merge ck_2_1 (true -> v_149)(false -> v_150);
  v_151 =
    merge ck_2_2_1
      (true -> p_state_St_1_Artificial)(false -> p_state_St_1_Half);
  v_152 =
    merge ck_2_2_0
      (true -> ((0 when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> p_state_St_1_Natural);
  p_state = merge ck_2_1 (true -> v_151)(false -> v_152);
  v_153 =
    merge ck_2_2_1
      (true -> policy_St_1_Artificial)(false -> policy_St_1_Half);
  v_154 =
    merge ck_2_2_0
      (true -> ((0 when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> policy_St_1_Natural);
  policy = merge ck_2_1 (true -> v_153)(false -> v_154);
  v_155 =
    merge ck_2_2_1 (true -> ns_St_1_Artificial_1)(false -> ns_St_1_Half_1);
  v_156 =
    merge ck_2_2_1 (true -> ns_St_1_Artificial_2)(false -> ns_St_1_Half_2);
  v_157 =
    merge ck_2_2_0
      (true -> ((true when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> ns_St_1_Natural_1);
  v_158 =
    merge ck_2_2_0
      (true -> ((true when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> ns_St_1_Natural_2);
  ns_1 = merge ck_2_1 (true -> v_155)(false -> v_157);
  ns_2 = merge ck_2_1 (true -> v_156)(false -> v_158);
  v_159 = merge ck_2_2_1 (true -> nr_St_1_Artificial)(false -> nr_St_1_Half);
  v_160 =
    merge ck_2_2_0
      (true -> ((true when false(ck_2_1)) when true(ck_2_2_0)))
      (false -> nr_St_1_Natural);
  nr = merge ck_2_1 (true -> v_159)(false -> v_160);
  ck_2_2_1 = (ck_2_2 when true(ck_2_1));
  ck_2_2_0 = (ck_2_2 when false(ck_2_1));
  ns_St_1_Natural_2_1 = (ns_St_1_Natural_2 when true(ns_St_1_Natural_1));
  ns_St_1_Natural_2_0 = (ns_St_1_Natural_2 when false(ns_St_1_Natural_1));
  ns_St_1_Half_2_1 = (ns_St_1_Half_2 when true(ns_St_1_Half_1));
  ns_St_1_Half_2_0 = (ns_St_1_Half_2 when false(ns_St_1_Half_1));
  ns_St_1_Artificial_2_1 =
    (ns_St_1_Artificial_2 when true(ns_St_1_Artificial_1));
  ns_St_1_Artificial_2_0 =
    (ns_St_1_Artificial_2 when false(ns_St_1_Artificial_1));
  v_161 = false fby ns_1;
  v_162 = false fby ns_2;
  ck_1 = v_161;
  ck_2_3 = v_162;
  r_St_1_Natural = if v_16 then true else v_19;
  s_St_1_Natural_1 = if v_16 then true else v_18_1;
  s_St_1_Natural_2 = if v_16 then false else v_18_2;
  v_19 = if v_17 then true else ((pnr when false(ck_1)) when false(ck_2_3_0));
  v_18_1 = if v_17 then true else false;
  v_18_2 = if v_17 then true else false;
  v_17 = not(((night when false(ck_1)) when false(ck_2_3_0)));
  v_16 =
    (((up when false(ck_1)) when false(ck_2_3_0)) &
     ((night when false(ck_1)) when false(ck_2_3_0)));
  v_18_2_1 = (v_18_2 when true(v_18_1));
  v_18_2_0 = (v_18_2 when false(v_18_1));
  r_St_1_Half = if v_9 then true else v_15;
  s_St_1_Half_1 = if v_9 then true else v_14_1;
  s_St_1_Half_2 = if v_9 then true else v_14_2;
  v_15 = if v_10 then true else v_13;
  v_14_1 = if v_10 then true else v_12_1;
  v_14_2 = if v_10 then true else v_12_2;
  v_13 = if v_11 then true else ((pnr when true(ck_1)) when false(ck_2_3_1));
  v_12_1 = if v_11 then false else true;
  v_12_2 = if v_11 then false else false;
  v_11 =
    (((down when true(ck_1)) when false(ck_2_3_1)) &
     ((night when true(ck_1)) when false(ck_2_3_1)));
  v_10 = not(((night when true(ck_1)) when false(ck_2_3_1)));
  v_9 =
    (((up when true(ck_1)) when false(ck_2_3_1)) &
     ((night when true(ck_1)) when false(ck_2_3_1)));
  v_12_2_1 = (v_12_2 when true(v_12_1));
  v_12_2_0 = (v_12_2 when false(v_12_1));
  v_14_2_1 = (v_14_2 when true(v_14_1));
  v_14_2_0 = (v_14_2 when false(v_14_1));
  r_St_1_Artificial = if v then true else v_8;
  s_St_1_Artificial_1 = if v then true else v_7_1;
  s_St_1_Artificial_2 = if v then false else v_7_2;
  v_8 = if v_6 then true else ((pnr when true(ck_1)) when true(ck_2_3_1));
  v_7_1 = if v_6 then false else true;
  v_7_2 = if v_6 then false else true;
  v_6 = not(((night when true(ck_1)) when true(ck_2_3_1)));
  v =
    (((down when true(ck_1)) when true(ck_2_3_1)) &
     ((night when true(ck_1)) when true(ck_2_3_1)));
  v_7_2_1 = (v_7_2 when true(v_7_1));
  v_7_2_0 = (v_7_2 when false(v_7_1));
  v_163 =
    merge ck_2_3_1 (true -> s_St_1_Artificial_1)(false -> s_St_1_Half_1);
  v_164 =
    merge ck_2_3_1 (true -> s_St_1_Artificial_2)(false -> s_St_1_Half_2);
  v_165 =
    merge ck_2_3_0
      (true -> ((true when false(ck_1)) when true(ck_2_3_0)))
      (false -> s_St_1_Natural_1);
  v_166 =
    merge ck_2_3_0
      (true -> ((true when false(ck_1)) when true(ck_2_3_0)))
      (false -> s_St_1_Natural_2);
  s_1 = merge ck_1 (true -> v_163)(false -> v_165);
  s_2 = merge ck_1 (true -> v_164)(false -> v_166);
  v_167 = merge ck_2_3_1 (true -> r_St_1_Artificial)(false -> r_St_1_Half);
  v_168 =
    merge ck_2_3_0
      (true -> ((true when false(ck_1)) when true(ck_2_3_0)))
      (false -> r_St_1_Natural);
  r = merge ck_1 (true -> v_167)(false -> v_168);
  ck_2_3_1 = (ck_2_3 when true(ck_1));
  ck_2_3_0 = (ck_2_3 when false(ck_1));
  s_St_1_Natural_2_1 = (s_St_1_Natural_2 when true(s_St_1_Natural_1));
  s_St_1_Natural_2_0 = (s_St_1_Natural_2 when false(s_St_1_Natural_1));
  s_St_1_Half_2_1 = (s_St_1_Half_2 when true(s_St_1_Half_1));
  s_St_1_Half_2_0 = (s_St_1_Half_2 when false(s_St_1_Half_1));
  s_St_1_Artificial_2_1 =
    (s_St_1_Artificial_2 when true(s_St_1_Artificial_1));
  s_St_1_Artificial_2_0 =
    (s_St_1_Artificial_2 when false(s_St_1_Artificial_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node porta(push : bool; c_porta : bool) returns (porta_open : bool)
var nr_St_2_Open : bool; ns_St_2_Open_1 : bool; porta_open_St_2_Open : bool;
    nr_St_2_Closed : bool; ns_St_2_Closed_1 : bool;
    porta_open_St_2_Closed : bool; ck_3_1 : bool; v : bool;
    r_St_2_Open : bool; s_St_2_Open_1 : bool; r_St_2_Closed : bool;
    s_St_2_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  porta_open_St_2_Closed = false;
  nr_St_2_Closed = false;
  ns_St_2_Closed_1 = true;
  porta_open_St_2_Open = true;
  nr_St_2_Open = false;
  ns_St_2_Open_1 = false;
  porta_open =
    merge ck_3_1
      (true -> porta_open_St_2_Closed)(false -> porta_open_St_2_Open);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Closed_1)(false -> ns_St_2_Open_1);
  nr = merge ck_3_1 (true -> nr_St_2_Closed)(false -> nr_St_2_Open);
  ck_1 = true fby ns_1;
  r_St_2_Closed = if v then true else (pnr when true(ck_1));
  s_St_2_Closed_1 = if v then false else true;
  v = not((c_porta when true(ck_1)));
  r_St_2_Open =
    if (c_porta when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_2_Open_1 = if (c_porta when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_2_Closed_1)(false -> s_St_2_Open_1);
  r = merge ck_1 (true -> r_St_2_Closed)(false -> r_St_2_Open)
tel

node roteador(c : bool) returns (r_on : bool)
var nr_St_3_On : bool; ns_St_3_On_1 : bool; r_on_St_3_On : bool;
    nr_St_3_Off : bool; ns_St_3_Off_1 : bool; r_on_St_3_Off : bool;
    ck_4_1 : bool; v : bool; r_St_3_On : bool; s_St_3_On_1 : bool;
    r_St_3_Off : bool; s_St_3_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  r_on_St_3_Off = false;
  nr_St_3_Off = false;
  ns_St_3_Off_1 = true;
  r_on_St_3_On = true;
  nr_St_3_On = false;
  ns_St_3_On_1 = false;
  r_on = merge ck_4_1 (true -> r_on_St_3_Off)(false -> r_on_St_3_On);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Off_1)(false -> ns_St_3_On_1);
  nr = merge ck_4_1 (true -> nr_St_3_Off)(false -> nr_St_3_On);
  ck_1 = true fby ns_1;
  r_St_3_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_3_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_3_On = if v then true else (pnr when false(ck_1));
  s_St_3_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_3_Off_1)(false -> s_St_3_On_1);
  r = merge ck_1 (true -> r_St_3_Off)(false -> r_St_3_On)
tel

node armario_de_servico(c : bool) returns (arm_open : bool)
var nr_St_4_Open : bool; ns_St_4_Open_1 : bool; arm_open_St_4_Open : bool;
    nr_St_4_Locked : bool; ns_St_4_Locked_1 : bool;
    arm_open_St_4_Locked : bool; ck_5_1 : bool; v : bool; r_St_4_Open : bool;
    s_St_4_Open_1 : bool; r_St_4_Locked : bool; s_St_4_Locked_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  arm_open_St_4_Locked = false;
  nr_St_4_Locked = false;
  ns_St_4_Locked_1 = true;
  arm_open_St_4_Open = true;
  nr_St_4_Open = false;
  ns_St_4_Open_1 = false;
  arm_open =
    merge ck_5_1 (true -> arm_open_St_4_Locked)(false -> arm_open_St_4_Open);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Locked_1)(false -> ns_St_4_Open_1);
  nr = merge ck_5_1 (true -> nr_St_4_Locked)(false -> nr_St_4_Open);
  ck_1 = true fby ns_1;
  r_St_4_Locked = if v then true else (pnr when true(ck_1));
  s_St_4_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_4_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_4_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_4_Locked_1)(false -> s_St_4_Open_1);
  r = merge ck_1 (true -> r_St_4_Locked)(false -> r_St_4_Open)
tel

node pessoas(arrived : bool) returns (presence : bool)
var nr_St_5_Preent : bool; ns_St_5_Preent_1 : bool;
    presence_St_5_Preent : bool; nr_St_5_Not_Present : bool;
    ns_St_5_Not_Present_1 : bool; presence_St_5_Not_Present : bool;
    ck_6_1 : bool; r_St_5_Preent : bool; s_St_5_Preent_1 : bool;
    r_St_5_Not_Present : bool; s_St_5_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  presence_St_5_Not_Present = false;
  nr_St_5_Not_Present = false;
  ns_St_5_Not_Present_1 = true;
  presence_St_5_Preent = true;
  nr_St_5_Preent = false;
  ns_St_5_Preent_1 = false;
  presence =
    merge ck_6_1
      (true -> presence_St_5_Not_Present)(false -> presence_St_5_Preent);
  ns_1 =
    merge ck_6_1 (true -> ns_St_5_Not_Present_1)(false -> ns_St_5_Preent_1);
  nr = merge ck_6_1 (true -> nr_St_5_Not_Present)(false -> nr_St_5_Preent);
  ck_1 = true fby ns_1;
  r_St_5_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_5_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_5_Preent =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_5_Preent_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_5_Not_Present_1)(false -> s_St_5_Preent_1);
  r = merge ck_1 (true -> r_St_5_Not_Present)(false -> r_St_5_Preent)
tel

node computadores(c : bool) returns (pc_on : bool)
var nr_St_6_On : bool; ns_St_6_On_1 : bool; pc_on_St_6_On : bool;
    nr_St_6_Off : bool; ns_St_6_Off_1 : bool; pc_on_St_6_Off : bool;
    ck_7_1 : bool; v : bool; r_St_6_On : bool; s_St_6_On_1 : bool;
    r_St_6_Off : bool; s_St_6_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  pc_on_St_6_Off = false;
  nr_St_6_Off = false;
  ns_St_6_Off_1 = true;
  pc_on_St_6_On = true;
  nr_St_6_On = false;
  ns_St_6_On_1 = false;
  pc_on = merge ck_7_1 (true -> pc_on_St_6_Off)(false -> pc_on_St_6_On);
  ns_1 = merge ck_7_1 (true -> ns_St_6_Off_1)(false -> ns_St_6_On_1);
  nr = merge ck_7_1 (true -> nr_St_6_Off)(false -> nr_St_6_On);
  ck_1 = true fby ns_1;
  r_St_6_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_6_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_6_On = if v then true else (pnr when false(ck_1));
  s_St_6_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_6_Off_1)(false -> s_St_6_On_1);
  r = merge ck_1 (true -> r_St_6_Off)(false -> r_St_6_On)
tel

node janelas(c : bool) returns (w_open : bool)
var nr_St_7_Open : bool; ns_St_7_Open_1 : bool; w_open_St_7_Open : bool;
    nr_St_7_Closed : bool; ns_St_7_Closed_1 : bool;
    w_open_St_7_Closed : bool; ck_1 : bool; ns_1 : bool; r : bool; nr : bool;
    pnr : bool;
let
  r = pnr;
  pnr = false fby nr;
  ck_1 = true fby ns_1;
  w_open_St_7_Closed = false;
  nr_St_7_Closed = false;
  ns_St_7_Closed_1 = true;
  w_open_St_7_Open = true;
  nr_St_7_Open = false;
  ns_St_7_Open_1 = false;
  w_open = merge ck_1 (true -> w_open_St_7_Closed)(false -> w_open_St_7_Open);
  ns_1 = merge ck_1 (true -> ns_St_7_Closed_1)(false -> ns_St_7_Open_1);
  nr = merge ck_1 (true -> nr_St_7_Closed)(false -> nr_St_7_Open)
tel

node luzes(c1 : bool; c2 : bool) returns (l_state : int)
var v_176 : bool; v_175 : bool; v_174 : bool; v_173 : bool; v_172 : bool;
    v_171 : bool; v_170 : int; v_169 : int; ns_St_8_All_2_0 : bool;
    ns_St_8_All_2_1 : bool; ns_St_8_Some_2_0 : bool; ns_St_8_Some_2_1 : bool;
    ns_St_8_None_2_0 : bool; ns_St_8_None_2_1 : bool; ck_8_2_0 : bool;
    ck_8_2_1 : bool; nr_St_8_All : bool; ns_St_8_All_2 : bool;
    ns_St_8_All_1 : bool; l_state_St_8_All : int; nr_St_8_Some : bool;
    ns_St_8_Some_2 : bool; ns_St_8_Some_1 : bool; l_state_St_8_Some : int;
    nr_St_8_None : bool; ns_St_8_None_2 : bool; ns_St_8_None_1 : bool;
    l_state_St_8_None : int; ck_8_2 : bool; ck_8_1 : bool; v_26_2_0 : bool;
    v_26_2_1 : bool; v_27 : bool; v_26_2 : bool; v_26_1 : bool;
    v_24_2_0 : bool; v_24_2_1 : bool; v_25 : bool; v_24_2 : bool;
    v_24_1 : bool; v_23 : bool; v_21_2_0 : bool; v_21_2_1 : bool;
    v_22 : bool; v_21_2 : bool; v_21_1 : bool; v_20 : bool; v : bool;
    v_184 : bool; v_183 : bool; v_182 : bool; v_181 : bool; v_180 : bool;
    v_179 : bool; v_178 : bool; v_177 : bool; s_St_8_All_2_0 : bool;
    s_St_8_All_2_1 : bool; s_St_8_Some_2_0 : bool; s_St_8_Some_2_1 : bool;
    s_St_8_None_2_0 : bool; s_St_8_None_2_1 : bool; ck_2_0 : bool;
    ck_2_1 : bool; r_St_8_All : bool; s_St_8_All_2 : bool;
    s_St_8_All_1 : bool; r_St_8_Some : bool; s_St_8_Some_2 : bool;
    s_St_8_Some_1 : bool; r_St_8_None : bool; s_St_8_None_2 : bool;
    s_St_8_None_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  ck_8_2 = s_2;
  l_state_St_8_None = 0;
  nr_St_8_None = false;
  ns_St_8_None_1 = true;
  ns_St_8_None_2 = false;
  l_state_St_8_Some = 1;
  nr_St_8_Some = false;
  ns_St_8_Some_1 = false;
  ns_St_8_Some_2 = false;
  l_state_St_8_All = 2;
  nr_St_8_All = false;
  ns_St_8_All_1 = true;
  ns_St_8_All_2 = true;
  v_169 =
    merge ck_8_2_1 (true -> l_state_St_8_All)(false -> l_state_St_8_None);
  v_170 =
    merge ck_8_2_0
      (true -> ((0 when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> l_state_St_8_Some);
  l_state = merge ck_8_1 (true -> v_169)(false -> v_170);
  v_171 = merge ck_8_2_1 (true -> ns_St_8_All_1)(false -> ns_St_8_None_1);
  v_172 = merge ck_8_2_1 (true -> ns_St_8_All_2)(false -> ns_St_8_None_2);
  v_173 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_8_Some_1);
  v_174 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_8_Some_2);
  ns_1 = merge ck_8_1 (true -> v_171)(false -> v_173);
  ns_2 = merge ck_8_1 (true -> v_172)(false -> v_174);
  v_175 = merge ck_8_2_1 (true -> nr_St_8_All)(false -> nr_St_8_None);
  v_176 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> nr_St_8_Some);
  nr = merge ck_8_1 (true -> v_175)(false -> v_176);
  ck_8_2_1 = (ck_8_2 when true(ck_8_1));
  ck_8_2_0 = (ck_8_2 when false(ck_8_1));
  ns_St_8_None_2_1 = (ns_St_8_None_2 when true(ns_St_8_None_1));
  ns_St_8_None_2_0 = (ns_St_8_None_2 when false(ns_St_8_None_1));
  ns_St_8_Some_2_1 = (ns_St_8_Some_2 when true(ns_St_8_Some_1));
  ns_St_8_Some_2_0 = (ns_St_8_Some_2 when false(ns_St_8_Some_1));
  ns_St_8_All_2_1 = (ns_St_8_All_2 when true(ns_St_8_All_1));
  ns_St_8_All_2_0 = (ns_St_8_All_2 when false(ns_St_8_All_1));
  v_177 = true fby ns_1;
  v_178 = false fby ns_2;
  ck_1 = v_177;
  ck_2 = v_178;
  r_St_8_None =
    if ((c1 when true(ck_1)) when false(ck_2_1)) then true else v_27;
  s_St_8_None_1 =
    if ((c1 when true(ck_1)) when false(ck_2_1)) then false else v_26_1;
  s_St_8_None_2 =
    if ((c1 when true(ck_1)) when false(ck_2_1)) then false else v_26_2;
  v_27 =
    if ((c2 when true(ck_1)) when false(ck_2_1))
    then true
    else ((pnr when true(ck_1)) when false(ck_2_1));
  v_26_1 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else true;
  v_26_2 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else false;
  v_26_2_1 = (v_26_2 when true(v_26_1));
  v_26_2_0 = (v_26_2 when false(v_26_1));
  r_St_8_Some = if v_23 then true else v_25;
  s_St_8_Some_1 = if v_23 then true else v_24_1;
  s_St_8_Some_2 = if v_23 then false else v_24_2;
  v_25 =
    if ((c2 when false(ck_1)) when false(ck_2_0))
    then true
    else ((pnr when false(ck_1)) when false(ck_2_0));
  v_24_1 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_24_2 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_23 = not(((c1 when false(ck_1)) when false(ck_2_0)));
  v_24_2_1 = (v_24_2 when true(v_24_1));
  v_24_2_0 = (v_24_2 when false(v_24_1));
  r_St_8_All = if v then true else v_22;
  s_St_8_All_1 = if v then false else v_21_1;
  s_St_8_All_2 = if v then false else v_21_2;
  v_22 = if v_20 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_21_1 = if v_20 then true else true;
  v_21_2 = if v_20 then false else true;
  v_20 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_21_2_1 = (v_21_2 when true(v_21_1));
  v_21_2_0 = (v_21_2 when false(v_21_1));
  v_179 = merge ck_2_1 (true -> s_St_8_All_1)(false -> s_St_8_None_1);
  v_180 = merge ck_2_1 (true -> s_St_8_All_2)(false -> s_St_8_None_2);
  v_181 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_8_Some_1);
  v_182 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_8_Some_2);
  s_1 = merge ck_1 (true -> v_179)(false -> v_181);
  s_2 = merge ck_1 (true -> v_180)(false -> v_182);
  v_183 = merge ck_2_1 (true -> r_St_8_All)(false -> r_St_8_None);
  v_184 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_8_Some);
  r = merge ck_1 (true -> v_183)(false -> v_184);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_8_None_2_1 = (s_St_8_None_2 when true(s_St_8_None_1));
  s_St_8_None_2_0 = (s_St_8_None_2 when false(s_St_8_None_1));
  s_St_8_Some_2_1 = (s_St_8_Some_2 when true(s_St_8_Some_1));
  s_St_8_Some_2_0 = (s_St_8_Some_2 when false(s_St_8_Some_1));
  s_St_8_All_2_1 = (s_St_8_All_2 when true(s_St_8_All_1));
  s_St_8_All_2_0 = (s_St_8_All_2 when false(s_St_8_All_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node persianas(policy : int) returns (p_state : int)
var v_192 : bool; v_191 : bool; v_190 : bool; v_189 : bool; v_188 : bool;
    v_187 : bool; v_186 : int; v_185 : int; ns_St_9_Down_2_0 : bool;
    ns_St_9_Down_2_1 : bool; ns_St_9_Mid_2_0 : bool; ns_St_9_Mid_2_1 : bool;
    ns_St_9_Up_2_0 : bool; ns_St_9_Up_2_1 : bool; ck_9_2_0 : bool;
    ck_9_2_1 : bool; nr_St_9_Down : bool; ns_St_9_Down_2 : bool;
    ns_St_9_Down_1 : bool; p_state_St_9_Down : int; nr_St_9_Mid : bool;
    ns_St_9_Mid_2 : bool; ns_St_9_Mid_1 : bool; p_state_St_9_Mid : int;
    nr_St_9_Up : bool; ns_St_9_Up_2 : bool; ns_St_9_Up_1 : bool;
    p_state_St_9_Up : int; ck_9_2 : bool; ck_9_1 : bool; v_37_2_0 : bool;
    v_37_2_1 : bool; v_38 : bool; v_37_2 : bool; v_37_1 : bool; v_36 : bool;
    v_35 : bool; v_33_2_0 : bool; v_33_2_1 : bool; v_34 : bool;
    v_33_2 : bool; v_33_1 : bool; v_32 : bool; v_31 : bool; v_29_2_0 : bool;
    v_29_2_1 : bool; v_30 : bool; v_29_2 : bool; v_29_1 : bool; v_28 : bool;
    v : bool; v_200 : bool; v_199 : bool; v_198 : bool; v_197 : bool;
    v_196 : bool; v_195 : bool; v_194 : bool; v_193 : bool;
    s_St_9_Down_2_0 : bool; s_St_9_Down_2_1 : bool; s_St_9_Mid_2_0 : bool;
    s_St_9_Mid_2_1 : bool; s_St_9_Up_2_0 : bool; s_St_9_Up_2_1 : bool;
    ck_2_0 : bool; ck_2_1 : bool; r_St_9_Down : bool; s_St_9_Down_2 : bool;
    s_St_9_Down_1 : bool; r_St_9_Mid : bool; s_St_9_Mid_2 : bool;
    s_St_9_Mid_1 : bool; r_St_9_Up : bool; s_St_9_Up_2 : bool;
    s_St_9_Up_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool; s_2_1 : bool;
    ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool; ns_2 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_9_1 = s_1;
  ck_9_2 = s_2;
  p_state_St_9_Up = 0;
  nr_St_9_Up = false;
  ns_St_9_Up_1 = false;
  ns_St_9_Up_2 = false;
  p_state_St_9_Mid = 1;
  nr_St_9_Mid = false;
  ns_St_9_Mid_1 = true;
  ns_St_9_Mid_2 = false;
  p_state_St_9_Down = 2;
  nr_St_9_Down = false;
  ns_St_9_Down_1 = true;
  ns_St_9_Down_2 = true;
  v_185 =
    merge ck_9_2_1 (true -> p_state_St_9_Down)(false -> p_state_St_9_Mid);
  v_186 =
    merge ck_9_2_0
      (true -> ((0 when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> p_state_St_9_Up);
  p_state = merge ck_9_1 (true -> v_185)(false -> v_186);
  v_187 = merge ck_9_2_1 (true -> ns_St_9_Down_1)(false -> ns_St_9_Mid_1);
  v_188 = merge ck_9_2_1 (true -> ns_St_9_Down_2)(false -> ns_St_9_Mid_2);
  v_189 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> ns_St_9_Up_1);
  v_190 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> ns_St_9_Up_2);
  ns_1 = merge ck_9_1 (true -> v_187)(false -> v_189);
  ns_2 = merge ck_9_1 (true -> v_188)(false -> v_190);
  v_191 = merge ck_9_2_1 (true -> nr_St_9_Down)(false -> nr_St_9_Mid);
  v_192 =
    merge ck_9_2_0
      (true -> ((true when false(ck_9_1)) when true(ck_9_2_0)))
      (false -> nr_St_9_Up);
  nr = merge ck_9_1 (true -> v_191)(false -> v_192);
  ck_9_2_1 = (ck_9_2 when true(ck_9_1));
  ck_9_2_0 = (ck_9_2 when false(ck_9_1));
  ns_St_9_Up_2_1 = (ns_St_9_Up_2 when true(ns_St_9_Up_1));
  ns_St_9_Up_2_0 = (ns_St_9_Up_2 when false(ns_St_9_Up_1));
  ns_St_9_Mid_2_1 = (ns_St_9_Mid_2 when true(ns_St_9_Mid_1));
  ns_St_9_Mid_2_0 = (ns_St_9_Mid_2 when false(ns_St_9_Mid_1));
  ns_St_9_Down_2_1 = (ns_St_9_Down_2 when true(ns_St_9_Down_1));
  ns_St_9_Down_2_0 = (ns_St_9_Down_2 when false(ns_St_9_Down_1));
  v_193 = false fby ns_1;
  v_194 = false fby ns_2;
  ck_1 = v_193;
  ck_2 = v_194;
  r_St_9_Up = if v_35 then true else v_38;
  s_St_9_Up_1 = if v_35 then true else v_37_1;
  s_St_9_Up_2 = if v_35 then false else v_37_2;
  v_38 = if v_36 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_37_1 = if v_36 then true else false;
  v_37_2 = if v_36 then true else false;
  v_36 = (((policy when false(ck_1)) when false(ck_2_0)) = 2);
  v_35 = (((policy when false(ck_1)) when false(ck_2_0)) = 1);
  v_37_2_1 = (v_37_2 when true(v_37_1));
  v_37_2_0 = (v_37_2 when false(v_37_1));
  r_St_9_Mid = if v_31 then true else v_34;
  s_St_9_Mid_1 = if v_31 then true else v_33_1;
  s_St_9_Mid_2 = if v_31 then true else v_33_2;
  v_34 = if v_32 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_33_1 = if v_32 then false else true;
  v_33_2 = if v_32 then false else false;
  v_32 = (((policy when true(ck_1)) when false(ck_2_1)) = 2);
  v_31 = (((policy when true(ck_1)) when false(ck_2_1)) = 0);
  v_33_2_1 = (v_33_2 when true(v_33_1));
  v_33_2_0 = (v_33_2 when false(v_33_1));
  r_St_9_Down = if v then true else v_30;
  s_St_9_Down_1 = if v then true else v_29_1;
  s_St_9_Down_2 = if v then false else v_29_2;
  v_30 = if v_28 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_29_1 = if v_28 then false else true;
  v_29_2 = if v_28 then false else true;
  v_28 = (((policy when true(ck_1)) when true(ck_2_1)) = 0);
  v = (((policy when true(ck_1)) when true(ck_2_1)) = 1);
  v_29_2_1 = (v_29_2 when true(v_29_1));
  v_29_2_0 = (v_29_2 when false(v_29_1));
  v_195 = merge ck_2_1 (true -> s_St_9_Down_1)(false -> s_St_9_Mid_1);
  v_196 = merge ck_2_1 (true -> s_St_9_Down_2)(false -> s_St_9_Mid_2);
  v_197 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_9_Up_1);
  v_198 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_9_Up_2);
  s_1 = merge ck_1 (true -> v_195)(false -> v_197);
  s_2 = merge ck_1 (true -> v_196)(false -> v_198);
  v_199 = merge ck_2_1 (true -> r_St_9_Down)(false -> r_St_9_Mid);
  v_200 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_9_Up);
  r = merge ck_1 (true -> v_199)(false -> v_200);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_9_Up_2_1 = (s_St_9_Up_2 when true(s_St_9_Up_1));
  s_St_9_Up_2_0 = (s_St_9_Up_2 when false(s_St_9_Up_1));
  s_St_9_Mid_2_1 = (s_St_9_Mid_2 when true(s_St_9_Mid_1));
  s_St_9_Mid_2_0 = (s_St_9_Mid_2 when false(s_St_9_Mid_1));
  s_St_9_Down_2_1 = (s_St_9_Down_2 when true(s_St_9_Down_1));
  s_St_9_Down_2_0 = (s_St_9_Down_2 when false(s_St_9_Down_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node ar_condicionado(c1 : bool; c2 : bool) returns (ar_state : int)
var v_208 : bool; v_207 : bool; v_206 : bool; v_205 : bool; v_204 : bool;
    v_203 : bool; v_202 : int; v_201 : int; ns_St_10_Max_2_0 : bool;
    ns_St_10_Max_2_1 : bool; ns_St_10_Min_2_0 : bool;
    ns_St_10_Min_2_1 : bool; ns_St_10_Off_2_0 : bool;
    ns_St_10_Off_2_1 : bool; ck_10_2_0 : bool; ck_10_2_1 : bool;
    nr_St_10_Max : bool; ns_St_10_Max_2 : bool; ns_St_10_Max_1 : bool;
    ar_state_St_10_Max : int; nr_St_10_Min : bool; ns_St_10_Min_2 : bool;
    ns_St_10_Min_1 : bool; ar_state_St_10_Min : int; nr_St_10_Off : bool;
    ns_St_10_Off_2 : bool; ns_St_10_Off_1 : bool; ar_state_St_10_Off : int;
    ck_10_2 : bool; ck_10_1 : bool; v_45_2_0 : bool; v_45_2_1 : bool;
    v_46 : bool; v_45_2 : bool; v_45_1 : bool; v_43_2_0 : bool;
    v_43_2_1 : bool; v_44 : bool; v_43_2 : bool; v_43_1 : bool; v_42 : bool;
    v_40_2_0 : bool; v_40_2_1 : bool; v_41 : bool; v_40_2 : bool;
    v_40_1 : bool; v_39 : bool; v : bool; v_216 : bool; v_215 : bool;
    v_214 : bool; v_213 : bool; v_212 : bool; v_211 : bool; v_210 : bool;
    v_209 : bool; s_St_10_Max_2_0 : bool; s_St_10_Max_2_1 : bool;
    s_St_10_Min_2_0 : bool; s_St_10_Min_2_1 : bool; s_St_10_Off_2_0 : bool;
    s_St_10_Off_2_1 : bool; ck_2_0 : bool; ck_2_1 : bool; r_St_10_Max : bool;
    s_St_10_Max_2 : bool; s_St_10_Max_1 : bool; r_St_10_Min : bool;
    s_St_10_Min_2 : bool; s_St_10_Min_1 : bool; r_St_10_Off : bool;
    s_St_10_Off_2 : bool; s_St_10_Off_1 : bool; ck_2 : bool; ck_1 : bool;
    s_2_0 : bool; s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool;
    s_1 : bool; ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_10_1 = s_1;
  ck_10_2 = s_2;
  ar_state_St_10_Off = 0;
  nr_St_10_Off = false;
  ns_St_10_Off_1 = false;
  ns_St_10_Off_2 = false;
  ar_state_St_10_Min = 1;
  nr_St_10_Min = false;
  ns_St_10_Min_1 = true;
  ns_St_10_Min_2 = false;
  ar_state_St_10_Max = 2;
  nr_St_10_Max = false;
  ns_St_10_Max_1 = true;
  ns_St_10_Max_2 = true;
  v_201 =
    merge ck_10_2_1 (true -> ar_state_St_10_Max)(false -> ar_state_St_10_Min);
  v_202 =
    merge ck_10_2_0
      (true -> ((0 when false(ck_10_1)) when true(ck_10_2_0)))
      (false -> ar_state_St_10_Off);
  ar_state = merge ck_10_1 (true -> v_201)(false -> v_202);
  v_203 = merge ck_10_2_1 (true -> ns_St_10_Max_1)(false -> ns_St_10_Min_1);
  v_204 = merge ck_10_2_1 (true -> ns_St_10_Max_2)(false -> ns_St_10_Min_2);
  v_205 =
    merge ck_10_2_0
      (true -> ((true when false(ck_10_1)) when true(ck_10_2_0)))
      (false -> ns_St_10_Off_1);
  v_206 =
    merge ck_10_2_0
      (true -> ((true when false(ck_10_1)) when true(ck_10_2_0)))
      (false -> ns_St_10_Off_2);
  ns_1 = merge ck_10_1 (true -> v_203)(false -> v_205);
  ns_2 = merge ck_10_1 (true -> v_204)(false -> v_206);
  v_207 = merge ck_10_2_1 (true -> nr_St_10_Max)(false -> nr_St_10_Min);
  v_208 =
    merge ck_10_2_0
      (true -> ((true when false(ck_10_1)) when true(ck_10_2_0)))
      (false -> nr_St_10_Off);
  nr = merge ck_10_1 (true -> v_207)(false -> v_208);
  ck_10_2_1 = (ck_10_2 when true(ck_10_1));
  ck_10_2_0 = (ck_10_2 when false(ck_10_1));
  ns_St_10_Off_2_1 = (ns_St_10_Off_2 when true(ns_St_10_Off_1));
  ns_St_10_Off_2_0 = (ns_St_10_Off_2 when false(ns_St_10_Off_1));
  ns_St_10_Min_2_1 = (ns_St_10_Min_2 when true(ns_St_10_Min_1));
  ns_St_10_Min_2_0 = (ns_St_10_Min_2 when false(ns_St_10_Min_1));
  ns_St_10_Max_2_1 = (ns_St_10_Max_2 when true(ns_St_10_Max_1));
  ns_St_10_Max_2_0 = (ns_St_10_Max_2 when false(ns_St_10_Max_1));
  v_209 = false fby ns_1;
  v_210 = false fby ns_2;
  ck_1 = v_209;
  ck_2 = v_210;
  r_St_10_Off =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_46;
  s_St_10_Off_1 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_45_1;
  s_St_10_Off_2 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then false else v_45_2;
  v_46 =
    if ((c2 when false(ck_1)) when false(ck_2_0))
    then true
    else ((pnr when false(ck_1)) when false(ck_2_0));
  v_45_1 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_45_2 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_45_2_1 = (v_45_2 when true(v_45_1));
  v_45_2_0 = (v_45_2 when false(v_45_1));
  r_St_10_Min = if v_42 then true else v_44;
  s_St_10_Min_1 = if v_42 then false else v_43_1;
  s_St_10_Min_2 = if v_42 then false else v_43_2;
  v_44 =
    if ((c2 when true(ck_1)) when false(ck_2_1))
    then true
    else ((pnr when true(ck_1)) when false(ck_2_1));
  v_43_1 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else true;
  v_43_2 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else false;
  v_42 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_43_2_1 = (v_43_2 when true(v_43_1));
  v_43_2_0 = (v_43_2 when false(v_43_1));
  r_St_10_Max = if v then true else v_41;
  s_St_10_Max_1 = if v then true else v_40_1;
  s_St_10_Max_2 = if v then false else v_40_2;
  v_41 = if v_39 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_40_1 = if v_39 then false else true;
  v_40_2 = if v_39 then false else true;
  v_39 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_40_2_1 = (v_40_2 when true(v_40_1));
  v_40_2_0 = (v_40_2 when false(v_40_1));
  v_211 = merge ck_2_1 (true -> s_St_10_Max_1)(false -> s_St_10_Min_1);
  v_212 = merge ck_2_1 (true -> s_St_10_Max_2)(false -> s_St_10_Min_2);
  v_213 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_10_Off_1);
  v_214 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_10_Off_2);
  s_1 = merge ck_1 (true -> v_211)(false -> v_213);
  s_2 = merge ck_1 (true -> v_212)(false -> v_214);
  v_215 = merge ck_2_1 (true -> r_St_10_Max)(false -> r_St_10_Min);
  v_216 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_10_Off);
  r = merge ck_1 (true -> v_215)(false -> v_216);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_10_Off_2_1 = (s_St_10_Off_2 when true(s_St_10_Off_1));
  s_St_10_Off_2_0 = (s_St_10_Off_2 when false(s_St_10_Off_1));
  s_St_10_Min_2_1 = (s_St_10_Min_2 when true(s_St_10_Min_1));
  s_St_10_Min_2_0 = (s_St_10_Min_2 when false(s_St_10_Min_1));
  s_St_10_Max_2_1 = (s_St_10_Max_2 when true(s_St_10_Max_1));
  s_St_10_Max_2_0 = (s_St_10_Max_2 when false(s_St_10_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node turno(shift : bool) returns (turno : bool)
var nr_St_11_Noite : bool; ns_St_11_Noite_1 : bool; turno_St_11_Noite : bool;
    nr_St_11_Dia : bool; ns_St_11_Dia_1 : bool; turno_St_11_Dia : bool;
    ck_11_1 : bool; r_St_11_Noite : bool; s_St_11_Noite_1 : bool;
    r_St_11_Dia : bool; s_St_11_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_11_1 = s_1;
  turno_St_11_Dia = false;
  nr_St_11_Dia = false;
  ns_St_11_Dia_1 = true;
  turno_St_11_Noite = true;
  nr_St_11_Noite = false;
  ns_St_11_Noite_1 = false;
  turno = merge ck_11_1 (true -> turno_St_11_Dia)(false -> turno_St_11_Noite);
  ns_1 = merge ck_11_1 (true -> ns_St_11_Dia_1)(false -> ns_St_11_Noite_1);
  nr = merge ck_11_1 (true -> nr_St_11_Dia)(false -> nr_St_11_Noite);
  ck_1 = true fby ns_1;
  r_St_11_Dia =
    if (shift when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_11_Dia_1 = if (shift when true(ck_1)) then false else true;
  r_St_11_Noite =
    if (shift when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_11_Noite_1 = if (shift when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_11_Dia_1)(false -> s_St_11_Noite_1);
  r = merge ck_1 (true -> r_St_11_Dia)(false -> r_St_11_Noite)
tel

node controller(shift_turno : bool; abre_porta : bool; p_arrived : bool;
                 p1_arrived : bool; ilumination_up : bool;
                 ilumination_down : bool)
returns (night : bool; p_open : bool; r_on1 : bool; presence : bool;
          presence_t : bool; pc_on : bool; w_open : bool; arm_open : bool;
          lampada : int; persiana : int; ar_state : int; policy : int)
contract
  var rule6 : bool; rule5 : bool; rule4 : bool; rule3 : bool; rule2 : bool;
      rule1 : bool; v : bool; v_47 : bool; v_48 : bool; v_49 : bool;
      v_50 : bool; v_51 : bool; v_52 : bool; v_53 : bool; v_54 : bool;
      v_55 : bool; v_56 : bool; v_57 : bool; v_58 : bool; v_59 : bool;
      v_60 : bool; v_61 : bool; v_62 : bool; v_63 : bool; v_64 : bool;
      v_65 : bool; v_66 : bool; v_67 : bool; v_68 : bool; v_69 : bool;
      v_70 : bool; v_71 : bool; v_72 : bool; v_73 : bool; v_74 : bool;
      v_75 : bool; v_76 : bool; v_77 : bool; v_78 : bool; v_79 : bool;
      v_80 : bool; v_81 : bool; v_82 : bool; v_83 : bool; v_84 : bool;
      v_85 : bool; v_86 : bool; v_87 : bool; v_88 : bool; v_89 : bool;
      v_90 : bool; v_91 : bool; v_92 : bool; v_93 : bool; v_94 : bool;
      v_95 : bool; v_96 : bool; v_97 : bool; v_98 : bool; v_99 : bool;
      v_100 : bool; v_101 : bool; v_102 : bool;
  let
    v = not(presence_t);
    v_47 = not(r_on1);
    v_48 = not(pc_on);
    v_49 = (v_47 & v_48);
    v_50 = (p_open & v_49);
    v_51 = (v_50 & arm_open);
    v_52 = (ar_state = 1);
    v_53 = (v_51 & v_52);
    rule6 = (v or v_53);
    v_54 = not(night);
    v_55 = (presence & v_54);
    v_56 = (v_55 & pc_on);
    v_57 = not(w_open);
    v_58 = (v_56 & v_57);
    v_59 = not(v_58);
    v_60 = (ar_state = 2);
    rule5 = (v_59 or v_60);
    v_61 = not(presence);
    v_62 = not(presence_t);
    v_63 = (v_61 & v_62);
    v_64 = not(night);
    v_65 = (v_63 & v_64);
    v_66 = not(v_65);
    v_67 = not(r_on1);
    v_68 = not(pc_on);
    v_69 = (v_67 & v_68);
    v_70 = not(w_open);
    v_71 = (v_69 & v_70);
    v_72 = (ar_state = 0);
    v_73 = (v_71 & v_72);
    v_74 = (p_open & v_73);
    rule4 = (v_66 or v_74);
    v_75 = not(presence);
    v_76 = not(presence_t);
    v_77 = (v_75 & v_76);
    v_78 = (v_77 & night);
    v_79 = not(v_78);
    v_80 = not(p_open);
    v_81 = not(r_on1);
    v_82 = not(pc_on);
    v_83 = (v_81 & v_82);
    v_84 = not(w_open);
    v_85 = (v_83 & v_84);
    v_86 = (ar_state = 0);
    v_87 = (v_85 & v_86);
    v_88 = (v_80 & v_87);
    rule3 = (v_79 or v_88);
    v_89 = (presence or presence_t);
    v_90 = not(night);
    v_91 = (v_89 & v_90);
    v_92 = not(v_91);
    rule2 = (v_92 or p_open);
    v_93 = (presence or presence_t);
    v_94 = (v_93 & night);
    v_95 = not(v_94);
    v_96 = (policy = 3);
    v_97 = (v_96 & p_open);
    rule1 = (v_95 or v_97);
    v_98 = (rule1 & rule2);
    v_99 = (v_98 & rule3);
    v_100 = (v_99 & rule4);
    v_101 = (v_100 & rule5);
    v_102 = (v_101 & rule6)
  tel
  assume true@ enforce v_102]
                 with (c_policy : bool; c_arm : bool; c_ar2 : bool;
                        c_ar1 : bool; c_luz2 : bool; c_luz1 : bool;
                        c_jan : bool; c_pc : bool; c_rot : bool;
                        c_porta : bool)
                 var v_228 : bool; v_227 : bool; v_226 : bool; v_225 : bool;
                     v_224 : bool; v_223 : bool; v_222 : int; v_221 : int;
                     v_220 : int; v_219 : int; v_218 : int; v_217 : int;
                     ns_St_12_Artificial_2_0 : bool;
                     ns_St_12_Artificial_2_1 : bool;
                     ns_St_12_Half_2_0 : bool; ns_St_12_Half_2_1 : bool;
                     ns_St_12_Natural_2_0 : bool;
                     ns_St_12_Natural_2_1 : bool; ck_29_2_0 : bool;
                     ck_29_2_1 : bool; nr_St_12_Artificial : bool;
                     ns_St_12_Artificial_2 : bool;
                     ns_St_12_Artificial_1 : bool;
                     policy_1_St_12_Artificial : int;
                     p_state_St_12_Artificial : int;
                     l_state_St_12_Artificial : int; nr_St_12_Half : bool;
                     ns_St_12_Half_2 : bool; ns_St_12_Half_1 : bool;
                     policy_1_St_12_Half : int; p_state_St_12_Half : int;
                     l_state_St_12_Half : int; nr_St_12_Natural : bool;
                     ns_St_12_Natural_2 : bool; ns_St_12_Natural_1 : bool;
                     policy_1_St_12_Natural : int;
                     p_state_St_12_Natural : int;
                     l_state_St_12_Natural : int; ck_29_2 : bool;
                     ck_29_1 : bool; v_129_2_0 : bool; v_129_2_1 : bool;
                     v_130 : bool; v_129_2 : bool; v_129_1 : bool;
                     v_128 : bool; v_127 : bool; v_125_2_0 : bool;
                     v_125_2_1 : bool; v_123_2_0 : bool; v_123_2_1 : bool;
                     v_126 : bool; v_125_2 : bool; v_125_1 : bool;
                     v_124 : bool; v_123_2 : bool; v_123_1 : bool;
                     v_122 : bool; v_121 : bool; v_120 : bool;
                     v_118_2_0 : bool; v_118_2_1 : bool; v_119 : bool;
                     v_118_2 : bool; v_118_1 : bool; v_117 : bool;
                     v_116 : bool; v_236 : bool; v_235 : bool; v_234 : bool;
                     v_233 : bool; v_232 : bool; v_231 : bool; v_230 : bool;
                     v_229 : bool; s_St_12_Artificial_2_0 : bool;
                     s_St_12_Artificial_2_1 : bool; s_St_12_Half_2_0 : bool;
                     s_St_12_Half_2_1 : bool; s_St_12_Natural_2_0 : bool;
                     s_St_12_Natural_2_1 : bool; ck_28_2_0 : bool;
                     ck_28_2_1 : bool; r_St_12_Artificial : bool;
                     s_St_12_Artificial_2 : bool;
                     s_St_12_Artificial_1 : bool; r_St_12_Half : bool;
                     s_St_12_Half_2 : bool; s_St_12_Half_1 : bool;
                     r_St_12_Natural : bool; s_St_12_Natural_2 : bool;
                     s_St_12_Natural_1 : bool; ck_28_2 : bool;
                     ck_28_1 : bool; v_244 : bool; v_243 : bool;
                     v_242 : bool; v_241 : bool; v_240 : bool; v_239 : bool;
                     v_238 : int; v_237 : int; ns_1_St_13_Max_2_0 : bool;
                     ns_1_St_13_Max_2_1 : bool; ns_1_St_13_Min_2_0 : bool;
                     ns_1_St_13_Min_2_1 : bool; ns_1_St_13_Off_2_0 : bool;
                     ns_1_St_13_Off_2_1 : bool; ck_27_2_0 : bool;
                     ck_27_2_1 : bool; nr_1_St_13_Max : bool;
                     ns_1_St_13_Max_2 : bool; ns_1_St_13_Max_1 : bool;
                     ar_state_1_St_13_Max : int; nr_1_St_13_Min : bool;
                     ns_1_St_13_Min_2 : bool; ns_1_St_13_Min_1 : bool;
                     ar_state_1_St_13_Min : int; nr_1_St_13_Off : bool;
                     ns_1_St_13_Off_2 : bool; ns_1_St_13_Off_1 : bool;
                     ar_state_1_St_13_Off : int; ck_27_2 : bool;
                     ck_27_1 : bool; v_114_2_0 : bool; v_114_2_1 : bool;
                     v_115 : bool; v_114_2 : bool; v_114_1 : bool;
                     v_112_2_0 : bool; v_112_2_1 : bool; v_113 : bool;
                     v_112_2 : bool; v_112_1 : bool; v_111 : bool;
                     v_109_2_0 : bool; v_109_2_1 : bool; v_110 : bool;
                     v_109_2 : bool; v_109_1 : bool; v_108 : bool;
                     v_107 : bool; v_252 : bool; v_251 : bool; v_250 : bool;
                     v_249 : bool; v_248 : bool; v_247 : bool; v_246 : bool;
                     v_245 : bool; s_1_St_13_Max_2_0 : bool;
                     s_1_St_13_Max_2_1 : bool; s_1_St_13_Min_2_0 : bool;
                     s_1_St_13_Min_2_1 : bool; s_1_St_13_Off_2_0 : bool;
                     s_1_St_13_Off_2_1 : bool; ck_26_2_0 : bool;
                     ck_26_2_1 : bool; r_1_St_13_Max : bool;
                     s_1_St_13_Max_2 : bool; s_1_St_13_Max_1 : bool;
                     r_1_St_13_Min : bool; s_1_St_13_Min_2 : bool;
                     s_1_St_13_Min_1 : bool; r_1_St_13_Off : bool;
                     s_1_St_13_Off_2 : bool; s_1_St_13_Off_1 : bool;
                     ck_26_2 : bool; ck_26_1 : bool; nr_2_St_14_Open : bool;
                     ns_2_St_14_Open_1 : bool; w_open_1_St_14_Open : bool;
                     nr_2_St_14_Closed : bool; ns_2_St_14_Closed_1 : bool;
                     w_open_1_St_14_Closed : bool; ck_25_1 : bool;
                     nr_3_St_15_On : bool; ns_3_St_15_On_1 : bool;
                     pc_on_1_St_15_On : bool; nr_3_St_15_Off : bool;
                     ns_3_St_15_Off_1 : bool; pc_on_1_St_15_Off : bool;
                     ck_24_1 : bool; v_106 : bool; r_3_St_15_On : bool;
                     s_3_St_15_On_1 : bool; r_3_St_15_Off : bool;
                     s_3_St_15_Off_1 : bool; ck_23_1 : bool;
                     nr_4_St_16_Preent : bool; ns_4_St_16_Preent_1 : bool;
                     presence_2_St_16_Preent : bool;
                     nr_4_St_16_Not_Present : bool;
                     ns_4_St_16_Not_Present_1 : bool;
                     presence_2_St_16_Not_Present : bool; ck_22_1 : bool;
                     r_4_St_16_Preent : bool; s_4_St_16_Preent_1 : bool;
                     r_4_St_16_Not_Present : bool;
                     s_4_St_16_Not_Present_1 : bool; ck_21_1 : bool;
                     nr_5_St_17_Preent : bool; ns_5_St_17_Preent_1 : bool;
                     presence_1_St_17_Preent : bool;
                     nr_5_St_17_Not_Present : bool;
                     ns_5_St_17_Not_Present_1 : bool;
                     presence_1_St_17_Not_Present : bool; ck_20_1 : bool;
                     r_5_St_17_Preent : bool; s_5_St_17_Preent_1 : bool;
                     r_5_St_17_Not_Present : bool;
                     s_5_St_17_Not_Present_1 : bool; ck_19_1 : bool;
                     nr_6_St_18_Open : bool; ns_6_St_18_Open_1 : bool;
                     arm_open_1_St_18_Open : bool; nr_6_St_18_Locked : bool;
                     ns_6_St_18_Locked_1 : bool;
                     arm_open_1_St_18_Locked : bool; ck_18_1 : bool;
                     v_105 : bool; r_6_St_18_Open : bool;
                     s_6_St_18_Open_1 : bool; r_6_St_18_Locked : bool;
                     s_6_St_18_Locked_1 : bool; ck_17_1 : bool;
                     nr_7_St_19_On : bool; ns_7_St_19_On_1 : bool;
                     r_on_St_19_On : bool; nr_7_St_19_Off : bool;
                     ns_7_St_19_Off_1 : bool; r_on_St_19_Off : bool;
                     ck_16_1 : bool; v_104 : bool; r_7_St_19_On : bool;
                     s_7_St_19_On_1 : bool; r_7_St_19_Off : bool;
                     s_7_St_19_Off_1 : bool; ck_15_1 : bool;
                     nr_8_St_20_Open : bool; ns_8_St_20_Open_1 : bool;
                     porta_open_St_20_Open : bool; nr_8_St_20_Closed : bool;
                     ns_8_St_20_Closed_1 : bool;
                     porta_open_St_20_Closed : bool; ck_14_1 : bool;
                     v_103 : bool; r_8_St_20_Open : bool;
                     s_8_St_20_Open_1 : bool; r_8_St_20_Closed : bool;
                     s_8_St_20_Closed_1 : bool; ck_13_1 : bool;
                     nr_9_St_21_Noite : bool; ns_9_St_21_Noite_1 : bool;
                     turno_St_21_Noite : bool; nr_9_St_21_Dia : bool;
                     ns_9_St_21_Dia_1 : bool; turno_St_21_Dia : bool;
                     ck_12_1 : bool; r_9_St_21_Noite : bool;
                     s_9_St_21_Noite_1 : bool; r_9_St_21_Dia : bool;
                     s_9_St_21_Dia_1 : bool; ck_1 : bool; s_1_2_0 : bool;
                     s_1_2_1 : bool; ns_1_2_0 : bool; ns_1_2_1 : bool;
                     s_2_1_0 : bool; s_2_1_1 : bool; ns_2_2_0 : bool;
                     ns_2_2_1 : bool; s_9_1 : bool; ns_9_1 : bool;
                     r_9 : bool; nr_9 : bool; pnr_9 : bool; s_8_1 : bool;
                     ns_8_1 : bool; r_8 : bool; nr_8 : bool; pnr_8 : bool;
                     s_7_1 : bool; ns_7_1 : bool; r_7 : bool; nr_7 : bool;
                     pnr_7 : bool; s_6_1 : bool; ns_6_1 : bool; r_6 : bool;
                     nr_6 : bool; pnr_6 : bool; s_5_1 : bool; ns_5_1 : bool;
                     r_5 : bool; nr_5 : bool; pnr_5 : bool; s_4_1 : bool;
                     ns_4_1 : bool; r_4 : bool; nr_4 : bool; pnr_4 : bool;
                     s_3_1 : bool; ns_3_1 : bool; r_3 : bool; nr_3 : bool;
                     pnr_3 : bool; ns_2_1 : bool; r_2 : bool; nr_2 : bool;
                     pnr_2 : bool; s_1_2 : bool; s_1_1 : bool; ns_1_2 : bool;
                     ns_1_1 : bool; r_1 : bool; nr_1 : bool; pnr_1 : bool;
                     s_2_1 : bool; s_1_3 : bool; ns_2_2 : bool;
                     ns_1_3 : bool; r : bool; nr : bool; pnr : bool;
                     up : bool; down : bool; night_1 : bool; l_state : int;
                     p_state : int; policy_1 : int; c1 : bool; c2 : bool;
                     ar_state_1 : int; c_3 : bool; w_open_1 : bool;
                     c_2 : bool; pc_on_1 : bool; arrived_1 : bool;
                     presence_2 : bool; arrived : bool; presence_1 : bool;
                     c_1 : bool; arm_open_1 : bool; c : bool; r_on : bool;
                     push : bool; c_porta_1 : bool; porta_open : bool;
                     shift : bool; turno : bool;
  let
    up = ilumination_up;
    down = ilumination_down;
    night_1 = c_policy;
    pnr = false fby nr;
    ck_29_1 = s_1_3;
    ck_29_2 = s_2_1;
    l_state_St_12_Natural = 0;
    p_state_St_12_Natural = 0;
    policy_1_St_12_Natural = 1;
    nr_St_12_Natural = false;
    ns_St_12_Natural_1 = false;
    ns_St_12_Natural_2 = false;
    l_state_St_12_Half = 1;
    p_state_St_12_Half = 1;
    policy_1_St_12_Half = 2;
    nr_St_12_Half = false;
    ns_St_12_Half_1 = true;
    ns_St_12_Half_2 = false;
    l_state_St_12_Artificial = 2;
    p_state_St_12_Artificial = 2;
    policy_1_St_12_Artificial = 3;
    nr_St_12_Artificial = false;
    ns_St_12_Artificial_1 = true;
    ns_St_12_Artificial_2 = true;
    v_217 =
      merge ck_29_2_1
        (true -> l_state_St_12_Artificial)(false -> l_state_St_12_Half);
    v_218 =
      merge ck_29_2_0
        (true -> ((0 when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> l_state_St_12_Natural);
    l_state = merge ck_29_1 (true -> v_217)(false -> v_218);
    v_219 =
      merge ck_29_2_1
        (true -> p_state_St_12_Artificial)(false -> p_state_St_12_Half);
    v_220 =
      merge ck_29_2_0
        (true -> ((0 when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> p_state_St_12_Natural);
    p_state = merge ck_29_1 (true -> v_219)(false -> v_220);
    v_221 =
      merge ck_29_2_1
        (true -> policy_1_St_12_Artificial)(false -> policy_1_St_12_Half);
    v_222 =
      merge ck_29_2_0
        (true -> ((0 when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> policy_1_St_12_Natural);
    policy_1 = merge ck_29_1 (true -> v_221)(false -> v_222);
    v_223 =
      merge ck_29_2_1
        (true -> ns_St_12_Artificial_1)(false -> ns_St_12_Half_1);
    v_224 =
      merge ck_29_2_1
        (true -> ns_St_12_Artificial_2)(false -> ns_St_12_Half_2);
    v_225 =
      merge ck_29_2_0
        (true -> ((true when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> ns_St_12_Natural_1);
    v_226 =
      merge ck_29_2_0
        (true -> ((true when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> ns_St_12_Natural_2);
    ns_1_3 = merge ck_29_1 (true -> v_223)(false -> v_225);
    ns_2_2 = merge ck_29_1 (true -> v_224)(false -> v_226);
    v_227 =
      merge ck_29_2_1 (true -> nr_St_12_Artificial)(false -> nr_St_12_Half);
    v_228 =
      merge ck_29_2_0
        (true -> ((true when false(ck_29_1)) when true(ck_29_2_0)))
        (false -> nr_St_12_Natural);
    nr = merge ck_29_1 (true -> v_227)(false -> v_228);
    ck_29_2_1 = (ck_29_2 when true(ck_29_1));
    ck_29_2_0 = (ck_29_2 when false(ck_29_1));
    ns_St_12_Natural_2_1 = (ns_St_12_Natural_2 when true(ns_St_12_Natural_1));
    ns_St_12_Natural_2_0 =
      (ns_St_12_Natural_2 when false(ns_St_12_Natural_1));
    ns_St_12_Half_2_1 = (ns_St_12_Half_2 when true(ns_St_12_Half_1));
    ns_St_12_Half_2_0 = (ns_St_12_Half_2 when false(ns_St_12_Half_1));
    ns_St_12_Artificial_2_1 =
      (ns_St_12_Artificial_2 when true(ns_St_12_Artificial_1));
    ns_St_12_Artificial_2_0 =
      (ns_St_12_Artificial_2 when false(ns_St_12_Artificial_1));
    v_229 = false fby ns_1_3;
    v_230 = false fby ns_2_2;
    ck_28_1 = v_229;
    ck_28_2 = v_230;
    r_St_12_Natural = if v_127 then true else v_130;
    s_St_12_Natural_1 = if v_127 then true else v_129_1;
    s_St_12_Natural_2 = if v_127 then false else v_129_2;
    v_130 =
      if v_128
      then true
      else ((pnr when false(ck_28_1)) when false(ck_28_2_0));
    v_129_1 = if v_128 then true else false;
    v_129_2 = if v_128 then true else false;
    v_128 = not(((night_1 when false(ck_28_1)) when false(ck_28_2_0)));
    v_127 =
      (((up when false(ck_28_1)) when false(ck_28_2_0)) &
       ((night_1 when false(ck_28_1)) when false(ck_28_2_0)));
    v_129_2_1 = (v_129_2 when true(v_129_1));
    v_129_2_0 = (v_129_2 when false(v_129_1));
    r_St_12_Half = if v_120 then true else v_126;
    s_St_12_Half_1 = if v_120 then true else v_125_1;
    s_St_12_Half_2 = if v_120 then true else v_125_2;
    v_126 = if v_121 then true else v_124;
    v_125_1 = if v_121 then true else v_123_1;
    v_125_2 = if v_121 then true else v_123_2;
    v_124 =
      if v_122
      then true
      else ((pnr when true(ck_28_1)) when false(ck_28_2_1));
    v_123_1 = if v_122 then false else true;
    v_123_2 = if v_122 then false else false;
    v_122 =
      (((down when true(ck_28_1)) when false(ck_28_2_1)) &
       ((night_1 when true(ck_28_1)) when false(ck_28_2_1)));
    v_121 = not(((night_1 when true(ck_28_1)) when false(ck_28_2_1)));
    v_120 =
      (((up when true(ck_28_1)) when false(ck_28_2_1)) &
       ((night_1 when true(ck_28_1)) when false(ck_28_2_1)));
    v_123_2_1 = (v_123_2 when true(v_123_1));
    v_123_2_0 = (v_123_2 when false(v_123_1));
    v_125_2_1 = (v_125_2 when true(v_125_1));
    v_125_2_0 = (v_125_2 when false(v_125_1));
    r_St_12_Artificial = if v_116 then true else v_119;
    s_St_12_Artificial_1 = if v_116 then true else v_118_1;
    s_St_12_Artificial_2 = if v_116 then false else v_118_2;
    v_119 =
      if v_117 then true else ((pnr when true(ck_28_1)) when true(ck_28_2_1));
    v_118_1 = if v_117 then false else true;
    v_118_2 = if v_117 then false else true;
    v_117 = not(((night_1 when true(ck_28_1)) when true(ck_28_2_1)));
    v_116 =
      (((down when true(ck_28_1)) when true(ck_28_2_1)) &
       ((night_1 when true(ck_28_1)) when true(ck_28_2_1)));
    v_118_2_1 = (v_118_2 when true(v_118_1));
    v_118_2_0 = (v_118_2 when false(v_118_1));
    v_231 =
      merge ck_28_2_1 (true -> s_St_12_Artificial_1)(false -> s_St_12_Half_1);
    v_232 =
      merge ck_28_2_1 (true -> s_St_12_Artificial_2)(false -> s_St_12_Half_2);
    v_233 =
      merge ck_28_2_0
        (true -> ((true when false(ck_28_1)) when true(ck_28_2_0)))
        (false -> s_St_12_Natural_1);
    v_234 =
      merge ck_28_2_0
        (true -> ((true when false(ck_28_1)) when true(ck_28_2_0)))
        (false -> s_St_12_Natural_2);
    s_1_3 = merge ck_28_1 (true -> v_231)(false -> v_233);
    s_2_1 = merge ck_28_1 (true -> v_232)(false -> v_234);
    v_235 =
      merge ck_28_2_1 (true -> r_St_12_Artificial)(false -> r_St_12_Half);
    v_236 =
      merge ck_28_2_0
        (true -> ((true when false(ck_28_1)) when true(ck_28_2_0)))
        (false -> r_St_12_Natural);
    r = merge ck_28_1 (true -> v_235)(false -> v_236);
    ck_28_2_1 = (ck_28_2 when true(ck_28_1));
    ck_28_2_0 = (ck_28_2 when false(ck_28_1));
    s_St_12_Natural_2_1 = (s_St_12_Natural_2 when true(s_St_12_Natural_1));
    s_St_12_Natural_2_0 = (s_St_12_Natural_2 when false(s_St_12_Natural_1));
    s_St_12_Half_2_1 = (s_St_12_Half_2 when true(s_St_12_Half_1));
    s_St_12_Half_2_0 = (s_St_12_Half_2 when false(s_St_12_Half_1));
    s_St_12_Artificial_2_1 =
      (s_St_12_Artificial_2 when true(s_St_12_Artificial_1));
    s_St_12_Artificial_2_0 =
      (s_St_12_Artificial_2 when false(s_St_12_Artificial_1));
    c1 = c_ar1;
    c2 = c_ar2;
    pnr_1 = false fby nr_1;
    ck_27_1 = s_1_1;
    ck_27_2 = s_1_2;
    ar_state_1_St_13_Off = 0;
    nr_1_St_13_Off = false;
    ns_1_St_13_Off_1 = false;
    ns_1_St_13_Off_2 = false;
    ar_state_1_St_13_Min = 1;
    nr_1_St_13_Min = false;
    ns_1_St_13_Min_1 = true;
    ns_1_St_13_Min_2 = false;
    ar_state_1_St_13_Max = 2;
    nr_1_St_13_Max = false;
    ns_1_St_13_Max_1 = true;
    ns_1_St_13_Max_2 = true;
    v_237 =
      merge ck_27_2_1
        (true -> ar_state_1_St_13_Max)(false -> ar_state_1_St_13_Min);
    v_238 =
      merge ck_27_2_0
        (true -> ((0 when false(ck_27_1)) when true(ck_27_2_0)))
        (false -> ar_state_1_St_13_Off);
    ar_state_1 = merge ck_27_1 (true -> v_237)(false -> v_238);
    v_239 =
      merge ck_27_2_1 (true -> ns_1_St_13_Max_1)(false -> ns_1_St_13_Min_1);
    v_240 =
      merge ck_27_2_1 (true -> ns_1_St_13_Max_2)(false -> ns_1_St_13_Min_2);
    v_241 =
      merge ck_27_2_0
        (true -> ((true when false(ck_27_1)) when true(ck_27_2_0)))
        (false -> ns_1_St_13_Off_1);
    v_242 =
      merge ck_27_2_0
        (true -> ((true when false(ck_27_1)) when true(ck_27_2_0)))
        (false -> ns_1_St_13_Off_2);
    ns_1_1 = merge ck_27_1 (true -> v_239)(false -> v_241);
    ns_1_2 = merge ck_27_1 (true -> v_240)(false -> v_242);
    v_243 = merge ck_27_2_1 (true -> nr_1_St_13_Max)(false -> nr_1_St_13_Min);
    v_244 =
      merge ck_27_2_0
        (true -> ((true when false(ck_27_1)) when true(ck_27_2_0)))
        (false -> nr_1_St_13_Off);
    nr_1 = merge ck_27_1 (true -> v_243)(false -> v_244);
    ck_27_2_1 = (ck_27_2 when true(ck_27_1));
    ck_27_2_0 = (ck_27_2 when false(ck_27_1));
    ns_1_St_13_Off_2_1 = (ns_1_St_13_Off_2 when true(ns_1_St_13_Off_1));
    ns_1_St_13_Off_2_0 = (ns_1_St_13_Off_2 when false(ns_1_St_13_Off_1));
    ns_1_St_13_Min_2_1 = (ns_1_St_13_Min_2 when true(ns_1_St_13_Min_1));
    ns_1_St_13_Min_2_0 = (ns_1_St_13_Min_2 when false(ns_1_St_13_Min_1));
    ns_1_St_13_Max_2_1 = (ns_1_St_13_Max_2 when true(ns_1_St_13_Max_1));
    ns_1_St_13_Max_2_0 = (ns_1_St_13_Max_2 when false(ns_1_St_13_Max_1));
    v_245 = false fby ns_1_1;
    v_246 = false fby ns_1_2;
    ck_26_1 = v_245;
    ck_26_2 = v_246;
    r_1_St_13_Off =
      if ((c1 when false(ck_26_1)) when false(ck_26_2_0))
      then true
      else v_115;
    s_1_St_13_Off_1 =
      if ((c1 when false(ck_26_1)) when false(ck_26_2_0))
      then true
      else v_114_1;
    s_1_St_13_Off_2 =
      if ((c1 when false(ck_26_1)) when false(ck_26_2_0))
      then false
      else v_114_2;
    v_115 =
      if ((c2 when false(ck_26_1)) when false(ck_26_2_0))
      then true
      else ((pnr_1 when false(ck_26_1)) when false(ck_26_2_0));
    v_114_1 =
      if ((c2 when false(ck_26_1)) when false(ck_26_2_0))
      then true
      else false;
    v_114_2 =
      if ((c2 when false(ck_26_1)) when false(ck_26_2_0))
      then true
      else false;
    v_114_2_1 = (v_114_2 when true(v_114_1));
    v_114_2_0 = (v_114_2 when false(v_114_1));
    r_1_St_13_Min = if v_111 then true else v_113;
    s_1_St_13_Min_1 = if v_111 then false else v_112_1;
    s_1_St_13_Min_2 = if v_111 then false else v_112_2;
    v_113 =
      if ((c2 when true(ck_26_1)) when false(ck_26_2_1))
      then true
      else ((pnr_1 when true(ck_26_1)) when false(ck_26_2_1));
    v_112_1 =
      if ((c2 when true(ck_26_1)) when false(ck_26_2_1)) then true else true;
    v_112_2 =
      if ((c2 when true(ck_26_1)) when false(ck_26_2_1)) then true else false;
    v_111 = not(((c1 when true(ck_26_1)) when false(ck_26_2_1)));
    v_112_2_1 = (v_112_2 when true(v_112_1));
    v_112_2_0 = (v_112_2 when false(v_112_1));
    r_1_St_13_Max = if v_107 then true else v_110;
    s_1_St_13_Max_1 = if v_107 then true else v_109_1;
    s_1_St_13_Max_2 = if v_107 then false else v_109_2;
    v_110 =
      if v_108
      then true
      else ((pnr_1 when true(ck_26_1)) when true(ck_26_2_1));
    v_109_1 = if v_108 then false else true;
    v_109_2 = if v_108 then false else true;
    v_108 = not(((c2 when true(ck_26_1)) when true(ck_26_2_1)));
    v_107 = not(((c1 when true(ck_26_1)) when true(ck_26_2_1)));
    v_109_2_1 = (v_109_2 when true(v_109_1));
    v_109_2_0 = (v_109_2 when false(v_109_1));
    v_247 =
      merge ck_26_2_1 (true -> s_1_St_13_Max_1)(false -> s_1_St_13_Min_1);
    v_248 =
      merge ck_26_2_1 (true -> s_1_St_13_Max_2)(false -> s_1_St_13_Min_2);
    v_249 =
      merge ck_26_2_0
        (true -> ((true when false(ck_26_1)) when true(ck_26_2_0)))
        (false -> s_1_St_13_Off_1);
    v_250 =
      merge ck_26_2_0
        (true -> ((true when false(ck_26_1)) when true(ck_26_2_0)))
        (false -> s_1_St_13_Off_2);
    s_1_1 = merge ck_26_1 (true -> v_247)(false -> v_249);
    s_1_2 = merge ck_26_1 (true -> v_248)(false -> v_250);
    v_251 = merge ck_26_2_1 (true -> r_1_St_13_Max)(false -> r_1_St_13_Min);
    v_252 =
      merge ck_26_2_0
        (true -> ((true when false(ck_26_1)) when true(ck_26_2_0)))
        (false -> r_1_St_13_Off);
    r_1 = merge ck_26_1 (true -> v_251)(false -> v_252);
    ck_26_2_1 = (ck_26_2 when true(ck_26_1));
    ck_26_2_0 = (ck_26_2 when false(ck_26_1));
    s_1_St_13_Off_2_1 = (s_1_St_13_Off_2 when true(s_1_St_13_Off_1));
    s_1_St_13_Off_2_0 = (s_1_St_13_Off_2 when false(s_1_St_13_Off_1));
    s_1_St_13_Min_2_1 = (s_1_St_13_Min_2 when true(s_1_St_13_Min_1));
    s_1_St_13_Min_2_0 = (s_1_St_13_Min_2 when false(s_1_St_13_Min_1));
    s_1_St_13_Max_2_1 = (s_1_St_13_Max_2 when true(s_1_St_13_Max_1));
    s_1_St_13_Max_2_0 = (s_1_St_13_Max_2 when false(s_1_St_13_Max_1));
    c_3 = c_jan;
    r_2 = pnr_2;
    pnr_2 = false fby nr_2;
    ck_25_1 = true fby ns_2_1;
    w_open_1_St_14_Closed = false;
    nr_2_St_14_Closed = false;
    ns_2_St_14_Closed_1 = true;
    w_open_1_St_14_Open = true;
    nr_2_St_14_Open = false;
    ns_2_St_14_Open_1 = false;
    w_open_1 =
      merge ck_25_1
        (true -> w_open_1_St_14_Closed)(false -> w_open_1_St_14_Open);
    ns_2_1 =
      merge ck_25_1 (true -> ns_2_St_14_Closed_1)(false -> ns_2_St_14_Open_1);
    nr_2 =
      merge ck_25_1 (true -> nr_2_St_14_Closed)(false -> nr_2_St_14_Open);
    c_2 = c_pc;
    pnr_3 = false fby nr_3;
    ck_24_1 = s_3_1;
    pc_on_1_St_15_Off = false;
    nr_3_St_15_Off = false;
    ns_3_St_15_Off_1 = true;
    pc_on_1_St_15_On = true;
    nr_3_St_15_On = false;
    ns_3_St_15_On_1 = false;
    pc_on_1 =
      merge ck_24_1 (true -> pc_on_1_St_15_Off)(false -> pc_on_1_St_15_On);
    ns_3_1 =
      merge ck_24_1 (true -> ns_3_St_15_Off_1)(false -> ns_3_St_15_On_1);
    nr_3 = merge ck_24_1 (true -> nr_3_St_15_Off)(false -> nr_3_St_15_On);
    ck_23_1 = true fby ns_3_1;
    r_3_St_15_Off =
      if (c_2 when true(ck_23_1)) then true else (pnr_3 when true(ck_23_1));
    s_3_St_15_Off_1 = if (c_2 when true(ck_23_1)) then false else true;
    r_3_St_15_On = if v_106 then true else (pnr_3 when false(ck_23_1));
    s_3_St_15_On_1 = if v_106 then true else false;
    v_106 = not((c_2 when false(ck_23_1)));
    s_3_1 = merge ck_23_1 (true -> s_3_St_15_Off_1)(false -> s_3_St_15_On_1);
    r_3 = merge ck_23_1 (true -> r_3_St_15_Off)(false -> r_3_St_15_On);
    arrived_1 = p1_arrived;
    pnr_4 = false fby nr_4;
    ck_22_1 = s_4_1;
    presence_2_St_16_Not_Present = false;
    nr_4_St_16_Not_Present = false;
    ns_4_St_16_Not_Present_1 = true;
    presence_2_St_16_Preent = true;
    nr_4_St_16_Preent = false;
    ns_4_St_16_Preent_1 = false;
    presence_2 =
      merge ck_22_1
        (true -> presence_2_St_16_Not_Present)
        (false -> presence_2_St_16_Preent);
    ns_4_1 =
      merge ck_22_1
        (true -> ns_4_St_16_Not_Present_1)(false -> ns_4_St_16_Preent_1);
    nr_4 =
      merge ck_22_1
        (true -> nr_4_St_16_Not_Present)(false -> nr_4_St_16_Preent);
    ck_21_1 = true fby ns_4_1;
    r_4_St_16_Not_Present =
      if (arrived_1 when true(ck_21_1))
      then true
      else (pnr_4 when true(ck_21_1));
    s_4_St_16_Not_Present_1 =
      if (arrived_1 when true(ck_21_1)) then false else true;
    r_4_St_16_Preent =
      if (arrived_1 when false(ck_21_1))
      then true
      else (pnr_4 when false(ck_21_1));
    s_4_St_16_Preent_1 =
      if (arrived_1 when false(ck_21_1)) then true else false;
    s_4_1 =
      merge ck_21_1
        (true -> s_4_St_16_Not_Present_1)(false -> s_4_St_16_Preent_1);
    r_4 =
      merge ck_21_1
        (true -> r_4_St_16_Not_Present)(false -> r_4_St_16_Preent);
    arrived = p_arrived;
    pnr_5 = false fby nr_5;
    ck_20_1 = s_5_1;
    presence_1_St_17_Not_Present = false;
    nr_5_St_17_Not_Present = false;
    ns_5_St_17_Not_Present_1 = true;
    presence_1_St_17_Preent = true;
    nr_5_St_17_Preent = false;
    ns_5_St_17_Preent_1 = false;
    presence_1 =
      merge ck_20_1
        (true -> presence_1_St_17_Not_Present)
        (false -> presence_1_St_17_Preent);
    ns_5_1 =
      merge ck_20_1
        (true -> ns_5_St_17_Not_Present_1)(false -> ns_5_St_17_Preent_1);
    nr_5 =
      merge ck_20_1
        (true -> nr_5_St_17_Not_Present)(false -> nr_5_St_17_Preent);
    ck_19_1 = true fby ns_5_1;
    r_5_St_17_Not_Present =
      if (arrived when true(ck_19_1))
      then true
      else (pnr_5 when true(ck_19_1));
    s_5_St_17_Not_Present_1 =
      if (arrived when true(ck_19_1)) then false else true;
    r_5_St_17_Preent =
      if (arrived when false(ck_19_1))
      then true
      else (pnr_5 when false(ck_19_1));
    s_5_St_17_Preent_1 =
      if (arrived when false(ck_19_1)) then true else false;
    s_5_1 =
      merge ck_19_1
        (true -> s_5_St_17_Not_Present_1)(false -> s_5_St_17_Preent_1);
    r_5 =
      merge ck_19_1
        (true -> r_5_St_17_Not_Present)(false -> r_5_St_17_Preent);
    c_1 = c_arm;
    pnr_6 = false fby nr_6;
    ck_18_1 = s_6_1;
    arm_open_1_St_18_Locked = false;
    nr_6_St_18_Locked = false;
    ns_6_St_18_Locked_1 = true;
    arm_open_1_St_18_Open = true;
    nr_6_St_18_Open = false;
    ns_6_St_18_Open_1 = false;
    arm_open_1 =
      merge ck_18_1
        (true -> arm_open_1_St_18_Locked)(false -> arm_open_1_St_18_Open);
    ns_6_1 =
      merge ck_18_1 (true -> ns_6_St_18_Locked_1)(false -> ns_6_St_18_Open_1);
    nr_6 =
      merge ck_18_1 (true -> nr_6_St_18_Locked)(false -> nr_6_St_18_Open);
    ck_17_1 = true fby ns_6_1;
    r_6_St_18_Locked = if v_105 then true else (pnr_6 when true(ck_17_1));
    s_6_St_18_Locked_1 = if v_105 then false else true;
    v_105 = not((c_1 when true(ck_17_1)));
    r_6_St_18_Open =
      if (c_1 when false(ck_17_1)) then true else (pnr_6 when false(ck_17_1));
    s_6_St_18_Open_1 = if (c_1 when false(ck_17_1)) then true else false;
    s_6_1 =
      merge ck_17_1 (true -> s_6_St_18_Locked_1)(false -> s_6_St_18_Open_1);
    r_6 = merge ck_17_1 (true -> r_6_St_18_Locked)(false -> r_6_St_18_Open);
    c = c_rot;
    pnr_7 = false fby nr_7;
    ck_16_1 = s_7_1;
    r_on_St_19_Off = false;
    nr_7_St_19_Off = false;
    ns_7_St_19_Off_1 = true;
    r_on_St_19_On = true;
    nr_7_St_19_On = false;
    ns_7_St_19_On_1 = false;
    r_on = merge ck_16_1 (true -> r_on_St_19_Off)(false -> r_on_St_19_On);
    ns_7_1 =
      merge ck_16_1 (true -> ns_7_St_19_Off_1)(false -> ns_7_St_19_On_1);
    nr_7 = merge ck_16_1 (true -> nr_7_St_19_Off)(false -> nr_7_St_19_On);
    ck_15_1 = true fby ns_7_1;
    r_7_St_19_Off =
      if (c when true(ck_15_1)) then true else (pnr_7 when true(ck_15_1));
    s_7_St_19_Off_1 = if (c when true(ck_15_1)) then false else true;
    r_7_St_19_On = if v_104 then true else (pnr_7 when false(ck_15_1));
    s_7_St_19_On_1 = if v_104 then true else false;
    v_104 = not((c when false(ck_15_1)));
    s_7_1 = merge ck_15_1 (true -> s_7_St_19_Off_1)(false -> s_7_St_19_On_1);
    r_7 = merge ck_15_1 (true -> r_7_St_19_Off)(false -> r_7_St_19_On);
    push = abre_porta;
    c_porta_1 = c_porta;
    pnr_8 = false fby nr_8;
    ck_14_1 = s_8_1;
    porta_open_St_20_Closed = false;
    nr_8_St_20_Closed = false;
    ns_8_St_20_Closed_1 = true;
    porta_open_St_20_Open = true;
    nr_8_St_20_Open = false;
    ns_8_St_20_Open_1 = false;
    porta_open =
      merge ck_14_1
        (true -> porta_open_St_20_Closed)(false -> porta_open_St_20_Open);
    ns_8_1 =
      merge ck_14_1 (true -> ns_8_St_20_Closed_1)(false -> ns_8_St_20_Open_1);
    nr_8 =
      merge ck_14_1 (true -> nr_8_St_20_Closed)(false -> nr_8_St_20_Open);
    ck_13_1 = true fby ns_8_1;
    r_8_St_20_Closed = if v_103 then true else (pnr_8 when true(ck_13_1));
    s_8_St_20_Closed_1 = if v_103 then false else true;
    v_103 = not((c_porta_1 when true(ck_13_1)));
    r_8_St_20_Open =
      if (c_porta_1 when false(ck_13_1))
      then true
      else (pnr_8 when false(ck_13_1));
    s_8_St_20_Open_1 =
      if (c_porta_1 when false(ck_13_1)) then true else false;
    s_8_1 =
      merge ck_13_1 (true -> s_8_St_20_Closed_1)(false -> s_8_St_20_Open_1);
    r_8 = merge ck_13_1 (true -> r_8_St_20_Closed)(false -> r_8_St_20_Open);
    shift = shift_turno;
    pnr_9 = false fby nr_9;
    ck_12_1 = s_9_1;
    turno_St_21_Dia = false;
    nr_9_St_21_Dia = false;
    ns_9_St_21_Dia_1 = true;
    turno_St_21_Noite = true;
    nr_9_St_21_Noite = false;
    ns_9_St_21_Noite_1 = false;
    turno =
      merge ck_12_1 (true -> turno_St_21_Dia)(false -> turno_St_21_Noite);
    ns_9_1 =
      merge ck_12_1 (true -> ns_9_St_21_Dia_1)(false -> ns_9_St_21_Noite_1);
    nr_9 = merge ck_12_1 (true -> nr_9_St_21_Dia)(false -> nr_9_St_21_Noite);
    ck_1 = true fby ns_9_1;
    r_9_St_21_Dia =
      if (shift when true(ck_1)) then true else (pnr_9 when true(ck_1));
    s_9_St_21_Dia_1 = if (shift when true(ck_1)) then false else true;
    r_9_St_21_Noite =
      if (shift when false(ck_1)) then true else (pnr_9 when false(ck_1));
    s_9_St_21_Noite_1 = if (shift when false(ck_1)) then true else false;
    s_9_1 = merge ck_1 (true -> s_9_St_21_Dia_1)(false -> s_9_St_21_Noite_1);
    r_9 = merge ck_1 (true -> r_9_St_21_Dia)(false -> r_9_St_21_Noite);
    night = turno;
    p_open = porta_open;
    r_on1 = r_on;
    arm_open = arm_open_1;
    presence = presence_1;
    presence_t = presence_2;
    pc_on = pc_on_1;
    w_open = w_open_1;
    ar_state = ar_state_1;
    policy = policy_1;
    persiana = p_state;
    lampada = l_state;
    ns_2_2_1 = (ns_2_2 when true(ns_1_3));
    ns_2_2_0 = (ns_2_2 when false(ns_1_3));
    s_2_1_1 = (s_2_1 when true(s_1_3));
    s_2_1_0 = (s_2_1 when false(s_1_3));
    ns_1_2_1 = (ns_1_2 when true(ns_1_1));
    ns_1_2_0 = (ns_1_2 when false(ns_1_1));
    s_1_2_1 = (s_1_2 when true(s_1_1));
    s_1_2_0 = (s_1_2 when false(s_1_1))
  tel

