type st_17 = St_17_Noite|St_17_Dia
type st_16 = St_16_Open|St_16_Closed
type st_15 = St_15_Open|St_15_Locked
type st_14 = St_14_Present|St_14_Not_Present
type st_13 = St_13_Present|St_13_Not_Present
type st_12 = St_12_On|St_12_Off
type st_11 = St_11_Open|St_11_Closed
type st_10 = St_10_Off|St_10_Min|St_10_Max
type st_9 = St_9_On|St_9_Off
type st_8 = St_8_On|St_8_Off
type st_7 = St_7_Noite|St_7_Dia
type st_6 = St_6_Off|St_6_Min|St_6_Max
type st_5 = St_5_Open|St_5_Closed
type st_4 = St_4_On|St_4_Off
type st_3 = St_3_Present|St_3_Not_Present
type st_2 = St_2_Open|St_2_Locked
type st_1 = St_1_Open|St_1_Closed
type st = St_On|St_Off
node light_source(c1 : bool; c2 : bool; sw : bool)
returns (light_source_on : int)
var nr_St_On : bool; ns_St_On_1 : bool; light_source_on_St_On : int;
    nr_St_Off : bool; ns_St_Off_1 : bool; light_source_on_St_Off : int;
    ck_1_1 : bool; v_5 : bool; v_4 : bool; v_3 : bool; v_2 : bool;
    v_1 : bool; v : bool; r_St_On : bool; s_St_On_1 : bool; r_St_Off : bool;
    s_St_Off_1 : bool; ck_1_2 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  light_source_on_St_Off = 0;
  nr_St_Off = false;
  ns_St_Off_1 = true;
  light_source_on_St_On = 1;
  nr_St_On = false;
  ns_St_On_1 = false;
  light_source_on =
    merge ck_1_1
      (true -> light_source_on_St_Off)(false -> light_source_on_St_On);
  ns_1 = merge ck_1_1 (true -> ns_St_Off_1)(false -> ns_St_On_1);
  nr = merge ck_1_1 (true -> nr_St_Off)(false -> nr_St_On);
  ck_1_2 = true fby ns_1;
  r_St_Off = if v_5 then true else (pnr when true(ck_1_2));
  s_St_Off_1 = if v_5 then false else true;
  v_5 = (v_3 or v_4);
  v_4 = not((c2 when true(ck_1_2)));
  v_3 = ((c1 when true(ck_1_2)) & (sw when true(ck_1_2)));
  r_St_On = if v_2 then true else (pnr when false(ck_1_2));
  s_St_On_1 = if v_2 then true else false;
  v_2 = (v or v_1);
  v_1 = not((c2 when false(ck_1_2)));
  v = ((c1 when false(ck_1_2)) & (sw when false(ck_1_2)));
  s_1 = merge ck_1_2 (true -> s_St_Off_1)(false -> s_St_On_1);
  r = merge ck_1_2 (true -> r_St_Off)(false -> r_St_On)
tel

node door(c : bool) returns (door_open : bool)
var nr_St_1_Open : bool; ns_St_1_Open_1 : bool; door_open_St_1_Open : bool;
    nr_St_1_Closed : bool; ns_St_1_Closed_1 : bool;
    door_open_St_1_Closed : bool; ck_2_1 : bool; v_6 : bool; v : bool;
    r_St_1_Open : bool; s_St_1_Open_1 : bool; r_St_1_Closed : bool;
    s_St_1_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  door_open_St_1_Closed = false;
  nr_St_1_Closed = false;
  ns_St_1_Closed_1 = true;
  door_open_St_1_Open = true;
  nr_St_1_Open = false;
  ns_St_1_Open_1 = false;
  door_open =
    merge ck_2_1
      (true -> door_open_St_1_Closed)(false -> door_open_St_1_Open);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Closed_1)(false -> ns_St_1_Open_1);
  nr = merge ck_2_1 (true -> nr_St_1_Closed)(false -> nr_St_1_Open);
  ck_1 = true fby ns_1;
  r_St_1_Closed = if v_6 then true else (pnr when true(ck_1));
  s_St_1_Closed_1 = if v_6 then false else true;
  v_6 = not((c when true(ck_1)));
  r_St_1_Open = if v then true else (pnr when false(ck_1));
  s_St_1_Open_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_1_Closed_1)(false -> s_St_1_Open_1);
  r = merge ck_1 (true -> r_St_1_Closed)(false -> r_St_1_Open)
tel

node closet(c : bool) returns (closet_open : bool)
var nr_St_2_Open : bool; ns_St_2_Open_1 : bool; closet_open_St_2_Open : bool;
    nr_St_2_Locked : bool; ns_St_2_Locked_1 : bool;
    closet_open_St_2_Locked : bool; ck_3_1 : bool; v : bool;
    r_St_2_Open : bool; s_St_2_Open_1 : bool; r_St_2_Locked : bool;
    s_St_2_Locked_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  closet_open_St_2_Locked = false;
  nr_St_2_Locked = false;
  ns_St_2_Locked_1 = true;
  closet_open_St_2_Open = true;
  nr_St_2_Open = false;
  ns_St_2_Open_1 = false;
  closet_open =
    merge ck_3_1
      (true -> closet_open_St_2_Locked)(false -> closet_open_St_2_Open);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Locked_1)(false -> ns_St_2_Open_1);
  nr = merge ck_3_1 (true -> nr_St_2_Locked)(false -> nr_St_2_Open);
  ck_1 = true fby ns_1;
  r_St_2_Locked = if v then true else (pnr when true(ck_1));
  s_St_2_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_2_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_2_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_2_Locked_1)(false -> s_St_2_Open_1);
  r = merge ck_1 (true -> r_St_2_Locked)(false -> r_St_2_Open)
tel

node person(arrived : bool) returns (presence : bool)
var nr_St_3_Present : bool; ns_St_3_Present_1 : bool;
    presence_St_3_Present : bool; nr_St_3_Not_Present : bool;
    ns_St_3_Not_Present_1 : bool; presence_St_3_Not_Present : bool;
    ck_4_1 : bool; r_St_3_Present : bool; s_St_3_Present_1 : bool;
    r_St_3_Not_Present : bool; s_St_3_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  presence_St_3_Not_Present = false;
  nr_St_3_Not_Present = false;
  ns_St_3_Not_Present_1 = true;
  presence_St_3_Present = true;
  nr_St_3_Present = false;
  ns_St_3_Present_1 = false;
  presence =
    merge ck_4_1
      (true -> presence_St_3_Not_Present)(false -> presence_St_3_Present);
  ns_1 =
    merge ck_4_1 (true -> ns_St_3_Not_Present_1)(false -> ns_St_3_Present_1);
  nr = merge ck_4_1 (true -> nr_St_3_Not_Present)(false -> nr_St_3_Present);
  ck_1 = true fby ns_1;
  r_St_3_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_3_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_3_Present =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_3_Present_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_3_Not_Present_1)(false -> s_St_3_Present_1);
  r = merge ck_1 (true -> r_St_3_Not_Present)(false -> r_St_3_Present)
tel

node computer(c : bool) returns (computer_on : bool)
var nr_St_4_On : bool; ns_St_4_On_1 : bool; computer_on_St_4_On : bool;
    nr_St_4_Off : bool; ns_St_4_Off_1 : bool; computer_on_St_4_Off : bool;
    ck_5_1 : bool; v_7 : bool; v : bool; r_St_4_On : bool;
    s_St_4_On_1 : bool; r_St_4_Off : bool; s_St_4_Off_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  computer_on_St_4_Off = false;
  nr_St_4_Off = false;
  ns_St_4_Off_1 = true;
  computer_on_St_4_On = true;
  nr_St_4_On = false;
  ns_St_4_On_1 = false;
  computer_on =
    merge ck_5_1 (true -> computer_on_St_4_Off)(false -> computer_on_St_4_On);
  ns_1 = merge ck_5_1 (true -> ns_St_4_Off_1)(false -> ns_St_4_On_1);
  nr = merge ck_5_1 (true -> nr_St_4_Off)(false -> nr_St_4_On);
  ck_1 = true fby ns_1;
  r_St_4_Off = if v_7 then true else (pnr when true(ck_1));
  s_St_4_Off_1 = if v_7 then false else true;
  v_7 = not((c when true(ck_1)));
  r_St_4_On = if v then true else (pnr when false(ck_1));
  s_St_4_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_4_Off_1)(false -> s_St_4_On_1);
  r = merge ck_1 (true -> r_St_4_Off)(false -> r_St_4_On)
tel

node window(c : bool) returns (window_open : bool)
var nr_St_5_Open : bool; ns_St_5_Open_1 : bool; window_open_St_5_Open : bool;
    nr_St_5_Closed : bool; ns_St_5_Closed_1 : bool;
    window_open_St_5_Closed : bool; ck_6_1 : bool; v : bool;
    r_St_5_Open : bool; s_St_5_Open_1 : bool; r_St_5_Closed : bool;
    s_St_5_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  window_open_St_5_Closed = false;
  nr_St_5_Closed = false;
  ns_St_5_Closed_1 = true;
  window_open_St_5_Open = true;
  nr_St_5_Open = false;
  ns_St_5_Open_1 = false;
  window_open =
    merge ck_6_1
      (true -> window_open_St_5_Closed)(false -> window_open_St_5_Open);
  ns_1 = merge ck_6_1 (true -> ns_St_5_Closed_1)(false -> ns_St_5_Open_1);
  nr = merge ck_6_1 (true -> nr_St_5_Closed)(false -> nr_St_5_Open);
  ck_1 = true fby ns_1;
  r_St_5_Closed = if v then true else (pnr when true(ck_1));
  s_St_5_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_5_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_5_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_5_Closed_1)(false -> s_St_5_Open_1);
  r = merge ck_1 (true -> r_St_5_Closed)(false -> r_St_5_Open)
tel

node air_conditioner(c1 : bool; c2 : bool) returns (air_state : int)
var v_105 : bool; v_104 : bool; v_103 : bool; v_102 : bool; v_101 : bool;
    v_100 : bool; v_99 : int; v_98 : int; ns_St_6_Max_2_0 : bool;
    ns_St_6_Max_2_1 : bool; ns_St_6_Min_2_0 : bool; ns_St_6_Min_2_1 : bool;
    ns_St_6_Off_2_0 : bool; ns_St_6_Off_2_1 : bool; ck_7_2_0 : bool;
    ck_7_2_1 : bool; nr_St_6_Max : bool; ns_St_6_Max_2 : bool;
    ns_St_6_Max_1 : bool; air_state_St_6_Max : int; nr_St_6_Min : bool;
    ns_St_6_Min_2 : bool; ns_St_6_Min_1 : bool; air_state_St_6_Min : int;
    nr_St_6_Off : bool; ns_St_6_Off_2 : bool; ns_St_6_Off_1 : bool;
    air_state_St_6_Off : int; ck_7_2 : bool; ck_7_1 : bool; v_16_2_0 : bool;
    v_16_2_1 : bool; v_17 : bool; v_16_2 : bool; v_16_1 : bool; v_15 : bool;
    v_13_2_0 : bool; v_13_2_1 : bool; v_14 : bool; v_13_2 : bool;
    v_13_1 : bool; v_12 : bool; v_11 : bool; v_9_2_0 : bool; v_9_2_1 : bool;
    v_10 : bool; v_9_2 : bool; v_9_1 : bool; v_8 : bool; v : bool;
    v_113 : bool; v_112 : bool; v_111 : bool; v_110 : bool; v_109 : bool;
    v_108 : bool; v_107 : bool; v_106 : bool; s_St_6_Max_2_0 : bool;
    s_St_6_Max_2_1 : bool; s_St_6_Min_2_0 : bool; s_St_6_Min_2_1 : bool;
    s_St_6_Off_2_0 : bool; s_St_6_Off_2_1 : bool; ck_2_0 : bool;
    ck_2_1 : bool; r_St_6_Max : bool; s_St_6_Max_2 : bool;
    s_St_6_Max_1 : bool; r_St_6_Min : bool; s_St_6_Min_2 : bool;
    s_St_6_Min_1 : bool; r_St_6_Off : bool; s_St_6_Off_2 : bool;
    s_St_6_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  ck_7_2 = s_2;
  air_state_St_6_Off = 0;
  nr_St_6_Off = false;
  ns_St_6_Off_1 = false;
  ns_St_6_Off_2 = false;
  air_state_St_6_Min = 1;
  nr_St_6_Min = false;
  ns_St_6_Min_1 = true;
  ns_St_6_Min_2 = false;
  air_state_St_6_Max = 2;
  nr_St_6_Max = false;
  ns_St_6_Max_1 = true;
  ns_St_6_Max_2 = true;
  v_98 =
    merge ck_7_2_1 (true -> air_state_St_6_Max)(false -> air_state_St_6_Min);
  v_99 =
    merge ck_7_2_0
      (true -> ((0 when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> air_state_St_6_Off);
  air_state = merge ck_7_1 (true -> v_98)(false -> v_99);
  v_100 = merge ck_7_2_1 (true -> ns_St_6_Max_1)(false -> ns_St_6_Min_1);
  v_101 = merge ck_7_2_1 (true -> ns_St_6_Max_2)(false -> ns_St_6_Min_2);
  v_102 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> ns_St_6_Off_1);
  v_103 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> ns_St_6_Off_2);
  ns_1 = merge ck_7_1 (true -> v_100)(false -> v_102);
  ns_2 = merge ck_7_1 (true -> v_101)(false -> v_103);
  v_104 = merge ck_7_2_1 (true -> nr_St_6_Max)(false -> nr_St_6_Min);
  v_105 =
    merge ck_7_2_0
      (true -> ((true when false(ck_7_1)) when true(ck_7_2_0)))
      (false -> nr_St_6_Off);
  nr = merge ck_7_1 (true -> v_104)(false -> v_105);
  ck_7_2_1 = (ck_7_2 when true(ck_7_1));
  ck_7_2_0 = (ck_7_2 when false(ck_7_1));
  ns_St_6_Off_2_1 = (ns_St_6_Off_2 when true(ns_St_6_Off_1));
  ns_St_6_Off_2_0 = (ns_St_6_Off_2 when false(ns_St_6_Off_1));
  ns_St_6_Min_2_1 = (ns_St_6_Min_2 when true(ns_St_6_Min_1));
  ns_St_6_Min_2_0 = (ns_St_6_Min_2 when false(ns_St_6_Min_1));
  ns_St_6_Max_2_1 = (ns_St_6_Max_2 when true(ns_St_6_Max_1));
  ns_St_6_Max_2_0 = (ns_St_6_Max_2 when false(ns_St_6_Max_1));
  v_106 = false fby ns_1;
  v_107 = false fby ns_2;
  ck_1 = v_106;
  ck_2 = v_107;
  r_St_6_Off =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_17;
  s_St_6_Off_1 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_16_1;
  s_St_6_Off_2 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then false else v_16_2;
  v_17 = if v_15 then true else ((pnr when false(ck_1)) when false(ck_2_0));
  v_16_1 = if v_15 then true else false;
  v_16_2 = if v_15 then true else false;
  v_15 = not(((c2 when false(ck_1)) when false(ck_2_0)));
  v_16_2_1 = (v_16_2 when true(v_16_1));
  v_16_2_0 = (v_16_2 when false(v_16_1));
  r_St_6_Min = if v_11 then true else v_14;
  s_St_6_Min_1 = if v_11 then false else v_13_1;
  s_St_6_Min_2 = if v_11 then false else v_13_2;
  v_14 = if v_12 then true else ((pnr when true(ck_1)) when false(ck_2_1));
  v_13_1 = if v_12 then true else true;
  v_13_2 = if v_12 then true else false;
  v_12 = not(((c2 when true(ck_1)) when false(ck_2_1)));
  v_11 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_13_2_1 = (v_13_2 when true(v_13_1));
  v_13_2_0 = (v_13_2 when false(v_13_1));
  r_St_6_Max = if v then true else v_10;
  s_St_6_Max_1 = if v then true else v_9_1;
  s_St_6_Max_2 = if v then false else v_9_2;
  v_10 = if v_8 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_9_1 = if v_8 then false else true;
  v_9_2 = if v_8 then false else true;
  v_8 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_9_2_1 = (v_9_2 when true(v_9_1));
  v_9_2_0 = (v_9_2 when false(v_9_1));
  v_108 = merge ck_2_1 (true -> s_St_6_Max_1)(false -> s_St_6_Min_1);
  v_109 = merge ck_2_1 (true -> s_St_6_Max_2)(false -> s_St_6_Min_2);
  v_110 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_6_Off_1);
  v_111 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_6_Off_2);
  s_1 = merge ck_1 (true -> v_108)(false -> v_110);
  s_2 = merge ck_1 (true -> v_109)(false -> v_111);
  v_112 = merge ck_2_1 (true -> r_St_6_Max)(false -> r_St_6_Min);
  v_113 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_6_Off);
  r = merge ck_1 (true -> v_112)(false -> v_113);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_6_Off_2_1 = (s_St_6_Off_2 when true(s_St_6_Off_1));
  s_St_6_Off_2_0 = (s_St_6_Off_2 when false(s_St_6_Off_1));
  s_St_6_Min_2_1 = (s_St_6_Min_2 when true(s_St_6_Min_1));
  s_St_6_Min_2_0 = (s_St_6_Min_2 when false(s_St_6_Min_1));
  s_St_6_Max_2_1 = (s_St_6_Max_2 when true(s_St_6_Max_1));
  s_St_6_Max_2_0 = (s_St_6_Max_2 when false(s_St_6_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node day_shift(change : bool) returns (night : bool)
var nr_St_7_Noite : bool; ns_St_7_Noite_1 : bool; night_St_7_Noite : bool;
    nr_St_7_Dia : bool; ns_St_7_Dia_1 : bool; night_St_7_Dia : bool;
    ck_8_1 : bool; r_St_7_Noite : bool; s_St_7_Noite_1 : bool;
    r_St_7_Dia : bool; s_St_7_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  night_St_7_Dia = false;
  nr_St_7_Dia = false;
  ns_St_7_Dia_1 = true;
  night_St_7_Noite = true;
  nr_St_7_Noite = false;
  ns_St_7_Noite_1 = false;
  night = merge ck_8_1 (true -> night_St_7_Dia)(false -> night_St_7_Noite);
  ns_1 = merge ck_8_1 (true -> ns_St_7_Dia_1)(false -> ns_St_7_Noite_1);
  nr = merge ck_8_1 (true -> nr_St_7_Dia)(false -> nr_St_7_Noite);
  ck_1 = true fby ns_1;
  r_St_7_Dia =
    if (change when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_7_Dia_1 = if (change when true(ck_1)) then false else true;
  r_St_7_Noite =
    if (change when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_7_Noite_1 = if (change when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_7_Dia_1)(false -> s_St_7_Noite_1);
  r = merge ck_1 (true -> r_St_7_Dia)(false -> r_St_7_Noite)
tel

node controller(change_shift : bool; worker : bool; cleaner : bool;
                 light_switch : bool; blind_switch : bool)
returns (night : bool; door_open : bool; worker_presence : bool;
          cleaner_presence : bool; pc_on : bool; window_open : bool;
          closet_open : bool; light_status : int; blind_status : int;
          air_status : int)
contract
  var rule7_5 : bool; rule7 : bool; rule6_5 : bool; rule6 : bool;
      rule5 : bool; rule4 : bool; rule3 : bool; rule2 : bool; rule1 : bool;
      v : bool; v_18 : bool; v_19 : bool; v_20 : bool; v_21 : bool;
      v_22 : bool; v_23 : bool; v_24 : bool; v_25 : bool; v_26 : bool;
      v_27 : bool; v_28 : bool; v_29 : bool; v_30 : bool; v_31 : bool;
      v_32 : bool; v_33 : bool; v_34 : bool; v_35 : bool; v_36 : bool;
      v_37 : bool; v_38 : bool; v_39 : bool; v_40 : bool; v_41 : bool;
      v_42 : bool; v_43 : bool; v_44 : bool; v_45 : bool; v_46 : bool;
      v_47 : bool; v_48 : bool; v_49 : bool; v_50 : bool; v_51 : bool;
      v_52 : bool; v_53 : bool; v_54 : bool; v_55 : bool; v_56 : bool;
      v_57 : bool; v_58 : bool; v_59 : bool; v_60 : bool; v_61 : bool;
      v_62 : bool; v_63 : bool; v_64 : bool; v_65 : bool; v_66 : bool;
      v_67 : bool; v_68 : bool;
  let
    v = not(cleaner_presence);
    v_18 = not(v);
    v_19 = not(closet_open);
    rule7_5 = (v_18 or v_19);
    v_20 = not(cleaner_presence);
    rule7 = (v_20 or closet_open);
    v_21 = not(worker_presence);
    v_22 = not(v_21);
    v_23 = not(pc_on);
    rule6_5 = (v_22 or v_23);
    v_24 = not(worker_presence);
    rule6 = (v_24 or pc_on);
    v_25 = not(cleaner_presence);
    v_26 = (worker_presence & v_25);
    v_27 = not(worker_presence);
    v_28 = (v_27 & cleaner_presence);
    v_29 = (v_26 or v_28);
    v_30 = not(v_29);
    v_31 = (air_status = 1);
    rule5 = (v_30 or v_31);
    v_32 = (worker_presence & cleaner_presence);
    v_33 = not(v_32);
    v_34 = (air_status = 2);
    rule4 = (v_33 or v_34);
    v_35 = not(worker_presence);
    v_36 = not(cleaner_presence);
    v_37 = (v_35 & v_36);
    v_38 = not(v_37);
    v_39 = not(pc_on);
    v_40 = (air_status = 0);
    v_41 = (v_39 & v_40);
    v_42 = (light_status = 0);
    v_43 = (v_41 & v_42);
    v_44 = (blind_status = 0);
    v_45 = (v_43 & v_44);
    v_46 = not(closet_open);
    v_47 = (v_45 & v_46);
    rule3 = (v_38 or v_47);
    v_48 = (worker_presence or cleaner_presence);
    v_49 = not(night);
    v_50 = (v_48 & v_49);
    v_51 = not(v_50);
    v_52 = (light_status = 1);
    v_53 = (blind_status = 1);
    v_54 = (v_52 or v_53);
    rule2 = (v_51 or v_54);
    v_55 = (worker_presence or cleaner_presence);
    v_56 = (v_55 & night);
    v_57 = not(v_56);
    v_58 = (light_status = 1);
    v_59 = (blind_status = 0);
    v_60 = (v_58 & v_59);
    rule1 = (v_57 or v_60);
    v_61 = (rule1 & rule2);
    v_62 = (v_61 & rule3);
    v_63 = (v_62 & rule4);
    v_64 = (v_63 & rule5);
    v_65 = (v_64 & rule6);
    v_66 = (v_65 & rule6_5);
    v_67 = (v_66 & rule7);
    v_68 = (v_67 & rule7_5)
  tel
  assume true@ enforce v_68]
                 with (c_blind_2 : bool; c_blind_1 : bool; c_light_2 : bool;
                        c_light_1 : bool; c_closet : bool; c_air_2 : bool;
                        c_air_1 : bool; c_window : bool; c_pc : bool;
                        c_door : bool)
                 var nr_St_8_On : bool; ns_St_8_On_1 : bool;
                     light_source_on_1_St_8_On : int; nr_St_8_Off : bool;
                     ns_St_8_Off_1 : bool; light_source_on_1_St_8_Off : int;
                     ck_27_1 : bool; v_97 : bool; v_96 : bool; v_95 : bool;
                     v_94 : bool; v_93 : bool; v_92 : bool; r_St_8_On : bool;
                     s_St_8_On_1 : bool; r_St_8_Off : bool;
                     s_St_8_Off_1 : bool; ck_26_1 : bool;
                     nr_1_St_9_On : bool; ns_1_St_9_On_1 : bool;
                     light_source_on_St_9_On : int; nr_1_St_9_Off : bool;
                     ns_1_St_9_Off_1 : bool; light_source_on_St_9_Off : int;
                     ck_25_1 : bool; v_91 : bool; v_90 : bool; v_89 : bool;
                     v_88 : bool; v_87 : bool; v_86 : bool;
                     r_1_St_9_On : bool; s_1_St_9_On_1 : bool;
                     r_1_St_9_Off : bool; s_1_St_9_Off_1 : bool;
                     ck_24_1 : bool; v_121 : bool; v_120 : bool;
                     v_119 : bool; v_118 : bool; v_117 : bool; v_116 : bool;
                     v_115 : int; v_114 : int; ns_2_St_10_Max_2_0 : bool;
                     ns_2_St_10_Max_2_1 : bool; ns_2_St_10_Min_2_0 : bool;
                     ns_2_St_10_Min_2_1 : bool; ns_2_St_10_Off_2_0 : bool;
                     ns_2_St_10_Off_2_1 : bool; ck_23_2_0 : bool;
                     ck_23_2_1 : bool; nr_2_St_10_Max : bool;
                     ns_2_St_10_Max_2 : bool; ns_2_St_10_Max_1 : bool;
                     air_state_St_10_Max : int; nr_2_St_10_Min : bool;
                     ns_2_St_10_Min_2 : bool; ns_2_St_10_Min_1 : bool;
                     air_state_St_10_Min : int; nr_2_St_10_Off : bool;
                     ns_2_St_10_Off_2 : bool; ns_2_St_10_Off_1 : bool;
                     air_state_St_10_Off : int; ck_23_2 : bool;
                     ck_23_1 : bool; v_84_2_0 : bool; v_84_2_1 : bool;
                     v_85 : bool; v_84_2 : bool; v_84_1 : bool; v_83 : bool;
                     v_81_2_0 : bool; v_81_2_1 : bool; v_82 : bool;
                     v_81_2 : bool; v_81_1 : bool; v_80 : bool; v_79 : bool;
                     v_77_2_0 : bool; v_77_2_1 : bool; v_78 : bool;
                     v_77_2 : bool; v_77_1 : bool; v_76 : bool; v_75 : bool;
                     v_129 : bool; v_128 : bool; v_127 : bool; v_126 : bool;
                     v_125 : bool; v_124 : bool; v_123 : bool; v_122 : bool;
                     s_2_St_10_Max_2_0 : bool; s_2_St_10_Max_2_1 : bool;
                     s_2_St_10_Min_2_0 : bool; s_2_St_10_Min_2_1 : bool;
                     s_2_St_10_Off_2_0 : bool; s_2_St_10_Off_2_1 : bool;
                     ck_22_2_0 : bool; ck_22_2_1 : bool;
                     r_2_St_10_Max : bool; s_2_St_10_Max_2 : bool;
                     s_2_St_10_Max_1 : bool; r_2_St_10_Min : bool;
                     s_2_St_10_Min_2 : bool; s_2_St_10_Min_1 : bool;
                     r_2_St_10_Off : bool; s_2_St_10_Off_2 : bool;
                     s_2_St_10_Off_1 : bool; ck_22_2 : bool; ck_22_1 : bool;
                     nr_3_St_11_Open : bool; ns_3_St_11_Open_1 : bool;
                     window_open_1_St_11_Open : bool;
                     nr_3_St_11_Closed : bool; ns_3_St_11_Closed_1 : bool;
                     window_open_1_St_11_Closed : bool; ck_21_1 : bool;
                     v_74 : bool; r_3_St_11_Open : bool;
                     s_3_St_11_Open_1 : bool; r_3_St_11_Closed : bool;
                     s_3_St_11_Closed_1 : bool; ck_20_1 : bool;
                     nr_4_St_12_On : bool; ns_4_St_12_On_1 : bool;
                     computer_on_St_12_On : bool; nr_4_St_12_Off : bool;
                     ns_4_St_12_Off_1 : bool; computer_on_St_12_Off : bool;
                     ck_19_1 : bool; v_73 : bool; v_72 : bool;
                     r_4_St_12_On : bool; s_4_St_12_On_1 : bool;
                     r_4_St_12_Off : bool; s_4_St_12_Off_1 : bool;
                     ck_18_1 : bool; nr_5_St_13_Present : bool;
                     ns_5_St_13_Present_1 : bool;
                     presence_1_St_13_Present : bool;
                     nr_5_St_13_Not_Present : bool;
                     ns_5_St_13_Not_Present_1 : bool;
                     presence_1_St_13_Not_Present : bool; ck_17_1 : bool;
                     r_5_St_13_Present : bool; s_5_St_13_Present_1 : bool;
                     r_5_St_13_Not_Present : bool;
                     s_5_St_13_Not_Present_1 : bool; ck_16_1 : bool;
                     nr_6_St_14_Present : bool; ns_6_St_14_Present_1 : bool;
                     presence_St_14_Present : bool;
                     nr_6_St_14_Not_Present : bool;
                     ns_6_St_14_Not_Present_1 : bool;
                     presence_St_14_Not_Present : bool; ck_15_1 : bool;
                     r_6_St_14_Present : bool; s_6_St_14_Present_1 : bool;
                     r_6_St_14_Not_Present : bool;
                     s_6_St_14_Not_Present_1 : bool; ck_14_1 : bool;
                     nr_7_St_15_Open : bool; ns_7_St_15_Open_1 : bool;
                     closet_open_1_St_15_Open : bool;
                     nr_7_St_15_Locked : bool; ns_7_St_15_Locked_1 : bool;
                     closet_open_1_St_15_Locked : bool; ck_13_1 : bool;
                     v_71 : bool; r_7_St_15_Open : bool;
                     s_7_St_15_Open_1 : bool; r_7_St_15_Locked : bool;
                     s_7_St_15_Locked_1 : bool; ck_12_1 : bool;
                     nr_8_St_16_Open : bool; ns_8_St_16_Open_1 : bool;
                     door_open_1_St_16_Open : bool; nr_8_St_16_Closed : bool;
                     ns_8_St_16_Closed_1 : bool;
                     door_open_1_St_16_Closed : bool; ck_11_1 : bool;
                     v_70 : bool; v_69 : bool; r_8_St_16_Open : bool;
                     s_8_St_16_Open_1 : bool; r_8_St_16_Closed : bool;
                     s_8_St_16_Closed_1 : bool; ck_10_1 : bool;
                     nr_9_St_17_Noite : bool; ns_9_St_17_Noite_1 : bool;
                     night_1_St_17_Noite : bool; nr_9_St_17_Dia : bool;
                     ns_9_St_17_Dia_1 : bool; night_1_St_17_Dia : bool;
                     ck_9_1 : bool; r_9_St_17_Noite : bool;
                     s_9_St_17_Noite_1 : bool; r_9_St_17_Dia : bool;
                     s_9_St_17_Dia_1 : bool; ck_1 : bool; s_2_2_0 : bool;
                     s_2_2_1 : bool; ns_2_2_0 : bool; ns_2_2_1 : bool;
                     s_9_1 : bool; ns_9_1 : bool; r_9 : bool; nr_9 : bool;
                     pnr_9 : bool; s_8_1 : bool; ns_8_1 : bool; r_8 : bool;
                     nr_8 : bool; pnr_8 : bool; s_7_1 : bool; ns_7_1 : bool;
                     r_7 : bool; nr_7 : bool; pnr_7 : bool; s_6_1 : bool;
                     ns_6_1 : bool; r_6 : bool; nr_6 : bool; pnr_6 : bool;
                     s_5_1 : bool; ns_5_1 : bool; r_5 : bool; nr_5 : bool;
                     pnr_5 : bool; s_4_1 : bool; ns_4_1 : bool; r_4 : bool;
                     nr_4 : bool; pnr_4 : bool; s_3_1 : bool; ns_3_1 : bool;
                     r_3 : bool; nr_3 : bool; pnr_3 : bool; s_2_2 : bool;
                     s_2_1 : bool; ns_2_2 : bool; ns_2_1 : bool; r_2 : bool;
                     nr_2 : bool; pnr_2 : bool; s_1_1 : bool; ns_1_1 : bool;
                     r_1 : bool; nr_1 : bool; pnr_1 : bool; s_1_2 : bool;
                     ns_1_2 : bool; r : bool; nr : bool; pnr : bool;
                     c1_2 : bool; c2_2 : bool; sw_1 : bool;
                     light_source_on_1 : int; c1_1 : bool; c2_1 : bool;
                     sw : bool; light_source_on : int; c1 : bool; c2 : bool;
                     air_state : int; c_3 : bool; window_open_1 : bool;
                     c_2 : bool; computer_on : bool; arrived_1 : bool;
                     presence_1 : bool; arrived : bool; presence : bool;
                     c_1 : bool; closet_open_1 : bool; c : bool;
                     door_open_1 : bool; change : bool; night_1 : bool;
  let
    c1_2 = blind_switch;
    c2_2 = c_blind_1;
    sw_1 = c_blind_2;
    pnr = false fby nr;
    ck_27_1 = s_1_2;
    light_source_on_1_St_8_Off = 0;
    nr_St_8_Off = false;
    ns_St_8_Off_1 = true;
    light_source_on_1_St_8_On = 1;
    nr_St_8_On = false;
    ns_St_8_On_1 = false;
    light_source_on_1 =
      merge ck_27_1
        (true -> light_source_on_1_St_8_Off)
        (false -> light_source_on_1_St_8_On);
    ns_1_2 = merge ck_27_1 (true -> ns_St_8_Off_1)(false -> ns_St_8_On_1);
    nr = merge ck_27_1 (true -> nr_St_8_Off)(false -> nr_St_8_On);
    ck_26_1 = true fby ns_1_2;
    r_St_8_Off = if v_97 then true else (pnr when true(ck_26_1));
    s_St_8_Off_1 = if v_97 then false else true;
    v_97 = (v_95 or v_96);
    v_96 = not((c2_2 when true(ck_26_1)));
    v_95 = ((c1_2 when true(ck_26_1)) & (sw_1 when true(ck_26_1)));
    r_St_8_On = if v_94 then true else (pnr when false(ck_26_1));
    s_St_8_On_1 = if v_94 then true else false;
    v_94 = (v_92 or v_93);
    v_93 = not((c2_2 when false(ck_26_1)));
    v_92 = ((c1_2 when false(ck_26_1)) & (sw_1 when false(ck_26_1)));
    s_1_2 = merge ck_26_1 (true -> s_St_8_Off_1)(false -> s_St_8_On_1);
    r = merge ck_26_1 (true -> r_St_8_Off)(false -> r_St_8_On);
    c1_1 = light_switch;
    c2_1 = c_light_1;
    sw = c_light_2;
    pnr_1 = false fby nr_1;
    ck_25_1 = s_1_1;
    light_source_on_St_9_Off = 0;
    nr_1_St_9_Off = false;
    ns_1_St_9_Off_1 = true;
    light_source_on_St_9_On = 1;
    nr_1_St_9_On = false;
    ns_1_St_9_On_1 = false;
    light_source_on =
      merge ck_25_1
        (true -> light_source_on_St_9_Off)(false -> light_source_on_St_9_On);
    ns_1_1 = merge ck_25_1 (true -> ns_1_St_9_Off_1)(false -> ns_1_St_9_On_1);
    nr_1 = merge ck_25_1 (true -> nr_1_St_9_Off)(false -> nr_1_St_9_On);
    ck_24_1 = true fby ns_1_1;
    r_1_St_9_Off = if v_91 then true else (pnr_1 when true(ck_24_1));
    s_1_St_9_Off_1 = if v_91 then false else true;
    v_91 = (v_89 or v_90);
    v_90 = not((c2_1 when true(ck_24_1)));
    v_89 = ((c1_1 when true(ck_24_1)) & (sw when true(ck_24_1)));
    r_1_St_9_On = if v_88 then true else (pnr_1 when false(ck_24_1));
    s_1_St_9_On_1 = if v_88 then true else false;
    v_88 = (v_86 or v_87);
    v_87 = not((c2_1 when false(ck_24_1)));
    v_86 = ((c1_1 when false(ck_24_1)) & (sw when false(ck_24_1)));
    s_1_1 = merge ck_24_1 (true -> s_1_St_9_Off_1)(false -> s_1_St_9_On_1);
    r_1 = merge ck_24_1 (true -> r_1_St_9_Off)(false -> r_1_St_9_On);
    c1 = c_air_1;
    c2 = c_air_2;
    pnr_2 = false fby nr_2;
    ck_23_1 = s_2_1;
    ck_23_2 = s_2_2;
    air_state_St_10_Off = 0;
    nr_2_St_10_Off = false;
    ns_2_St_10_Off_1 = false;
    ns_2_St_10_Off_2 = false;
    air_state_St_10_Min = 1;
    nr_2_St_10_Min = false;
    ns_2_St_10_Min_1 = true;
    ns_2_St_10_Min_2 = false;
    air_state_St_10_Max = 2;
    nr_2_St_10_Max = false;
    ns_2_St_10_Max_1 = true;
    ns_2_St_10_Max_2 = true;
    v_114 =
      merge ck_23_2_1
        (true -> air_state_St_10_Max)(false -> air_state_St_10_Min);
    v_115 =
      merge ck_23_2_0
        (true -> ((0 when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> air_state_St_10_Off);
    air_state = merge ck_23_1 (true -> v_114)(false -> v_115);
    v_116 =
      merge ck_23_2_1 (true -> ns_2_St_10_Max_1)(false -> ns_2_St_10_Min_1);
    v_117 =
      merge ck_23_2_1 (true -> ns_2_St_10_Max_2)(false -> ns_2_St_10_Min_2);
    v_118 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> ns_2_St_10_Off_1);
    v_119 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> ns_2_St_10_Off_2);
    ns_2_1 = merge ck_23_1 (true -> v_116)(false -> v_118);
    ns_2_2 = merge ck_23_1 (true -> v_117)(false -> v_119);
    v_120 = merge ck_23_2_1 (true -> nr_2_St_10_Max)(false -> nr_2_St_10_Min);
    v_121 =
      merge ck_23_2_0
        (true -> ((true when false(ck_23_1)) when true(ck_23_2_0)))
        (false -> nr_2_St_10_Off);
    nr_2 = merge ck_23_1 (true -> v_120)(false -> v_121);
    ck_23_2_1 = (ck_23_2 when true(ck_23_1));
    ck_23_2_0 = (ck_23_2 when false(ck_23_1));
    ns_2_St_10_Off_2_1 = (ns_2_St_10_Off_2 when true(ns_2_St_10_Off_1));
    ns_2_St_10_Off_2_0 = (ns_2_St_10_Off_2 when false(ns_2_St_10_Off_1));
    ns_2_St_10_Min_2_1 = (ns_2_St_10_Min_2 when true(ns_2_St_10_Min_1));
    ns_2_St_10_Min_2_0 = (ns_2_St_10_Min_2 when false(ns_2_St_10_Min_1));
    ns_2_St_10_Max_2_1 = (ns_2_St_10_Max_2 when true(ns_2_St_10_Max_1));
    ns_2_St_10_Max_2_0 = (ns_2_St_10_Max_2 when false(ns_2_St_10_Max_1));
    v_122 = false fby ns_2_1;
    v_123 = false fby ns_2_2;
    ck_22_1 = v_122;
    ck_22_2 = v_123;
    r_2_St_10_Off =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0)) then true else v_85;
    s_2_St_10_Off_1 =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0))
      then true
      else v_84_1;
    s_2_St_10_Off_2 =
      if ((c1 when false(ck_22_1)) when false(ck_22_2_0))
      then false
      else v_84_2;
    v_85 =
      if v_83
      then true
      else ((pnr_2 when false(ck_22_1)) when false(ck_22_2_0));
    v_84_1 = if v_83 then true else false;
    v_84_2 = if v_83 then true else false;
    v_83 = not(((c2 when false(ck_22_1)) when false(ck_22_2_0)));
    v_84_2_1 = (v_84_2 when true(v_84_1));
    v_84_2_0 = (v_84_2 when false(v_84_1));
    r_2_St_10_Min = if v_79 then true else v_82;
    s_2_St_10_Min_1 = if v_79 then false else v_81_1;
    s_2_St_10_Min_2 = if v_79 then false else v_81_2;
    v_82 =
      if v_80
      then true
      else ((pnr_2 when true(ck_22_1)) when false(ck_22_2_1));
    v_81_1 = if v_80 then true else true;
    v_81_2 = if v_80 then true else false;
    v_80 = not(((c2 when true(ck_22_1)) when false(ck_22_2_1)));
    v_79 = not(((c1 when true(ck_22_1)) when false(ck_22_2_1)));
    v_81_2_1 = (v_81_2 when true(v_81_1));
    v_81_2_0 = (v_81_2 when false(v_81_1));
    r_2_St_10_Max = if v_75 then true else v_78;
    s_2_St_10_Max_1 = if v_75 then true else v_77_1;
    s_2_St_10_Max_2 = if v_75 then false else v_77_2;
    v_78 =
      if v_76
      then true
      else ((pnr_2 when true(ck_22_1)) when true(ck_22_2_1));
    v_77_1 = if v_76 then false else true;
    v_77_2 = if v_76 then false else true;
    v_76 = not(((c2 when true(ck_22_1)) when true(ck_22_2_1)));
    v_75 = not(((c1 when true(ck_22_1)) when true(ck_22_2_1)));
    v_77_2_1 = (v_77_2 when true(v_77_1));
    v_77_2_0 = (v_77_2 when false(v_77_1));
    v_124 =
      merge ck_22_2_1 (true -> s_2_St_10_Max_1)(false -> s_2_St_10_Min_1);
    v_125 =
      merge ck_22_2_1 (true -> s_2_St_10_Max_2)(false -> s_2_St_10_Min_2);
    v_126 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> s_2_St_10_Off_1);
    v_127 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> s_2_St_10_Off_2);
    s_2_1 = merge ck_22_1 (true -> v_124)(false -> v_126);
    s_2_2 = merge ck_22_1 (true -> v_125)(false -> v_127);
    v_128 = merge ck_22_2_1 (true -> r_2_St_10_Max)(false -> r_2_St_10_Min);
    v_129 =
      merge ck_22_2_0
        (true -> ((true when false(ck_22_1)) when true(ck_22_2_0)))
        (false -> r_2_St_10_Off);
    r_2 = merge ck_22_1 (true -> v_128)(false -> v_129);
    ck_22_2_1 = (ck_22_2 when true(ck_22_1));
    ck_22_2_0 = (ck_22_2 when false(ck_22_1));
    s_2_St_10_Off_2_1 = (s_2_St_10_Off_2 when true(s_2_St_10_Off_1));
    s_2_St_10_Off_2_0 = (s_2_St_10_Off_2 when false(s_2_St_10_Off_1));
    s_2_St_10_Min_2_1 = (s_2_St_10_Min_2 when true(s_2_St_10_Min_1));
    s_2_St_10_Min_2_0 = (s_2_St_10_Min_2 when false(s_2_St_10_Min_1));
    s_2_St_10_Max_2_1 = (s_2_St_10_Max_2 when true(s_2_St_10_Max_1));
    s_2_St_10_Max_2_0 = (s_2_St_10_Max_2 when false(s_2_St_10_Max_1));
    c_3 = c_window;
    pnr_3 = false fby nr_3;
    ck_21_1 = s_3_1;
    window_open_1_St_11_Closed = false;
    nr_3_St_11_Closed = false;
    ns_3_St_11_Closed_1 = true;
    window_open_1_St_11_Open = true;
    nr_3_St_11_Open = false;
    ns_3_St_11_Open_1 = false;
    window_open_1 =
      merge ck_21_1
        (true -> window_open_1_St_11_Closed)
        (false -> window_open_1_St_11_Open);
    ns_3_1 =
      merge ck_21_1 (true -> ns_3_St_11_Closed_1)(false -> ns_3_St_11_Open_1);
    nr_3 =
      merge ck_21_1 (true -> nr_3_St_11_Closed)(false -> nr_3_St_11_Open);
    ck_20_1 = true fby ns_3_1;
    r_3_St_11_Closed = if v_74 then true else (pnr_3 when true(ck_20_1));
    s_3_St_11_Closed_1 = if v_74 then false else true;
    v_74 = not((c_3 when true(ck_20_1)));
    r_3_St_11_Open =
      if (c_3 when false(ck_20_1)) then true else (pnr_3 when false(ck_20_1));
    s_3_St_11_Open_1 = if (c_3 when false(ck_20_1)) then true else false;
    s_3_1 =
      merge ck_20_1 (true -> s_3_St_11_Closed_1)(false -> s_3_St_11_Open_1);
    r_3 = merge ck_20_1 (true -> r_3_St_11_Closed)(false -> r_3_St_11_Open);
    c_2 = c_pc;
    pnr_4 = false fby nr_4;
    ck_19_1 = s_4_1;
    computer_on_St_12_Off = false;
    nr_4_St_12_Off = false;
    ns_4_St_12_Off_1 = true;
    computer_on_St_12_On = true;
    nr_4_St_12_On = false;
    ns_4_St_12_On_1 = false;
    computer_on =
      merge ck_19_1
        (true -> computer_on_St_12_Off)(false -> computer_on_St_12_On);
    ns_4_1 =
      merge ck_19_1 (true -> ns_4_St_12_Off_1)(false -> ns_4_St_12_On_1);
    nr_4 = merge ck_19_1 (true -> nr_4_St_12_Off)(false -> nr_4_St_12_On);
    ck_18_1 = true fby ns_4_1;
    r_4_St_12_Off = if v_73 then true else (pnr_4 when true(ck_18_1));
    s_4_St_12_Off_1 = if v_73 then false else true;
    v_73 = not((c_2 when true(ck_18_1)));
    r_4_St_12_On = if v_72 then true else (pnr_4 when false(ck_18_1));
    s_4_St_12_On_1 = if v_72 then true else false;
    v_72 = not((c_2 when false(ck_18_1)));
    s_4_1 = merge ck_18_1 (true -> s_4_St_12_Off_1)(false -> s_4_St_12_On_1);
    r_4 = merge ck_18_1 (true -> r_4_St_12_Off)(false -> r_4_St_12_On);
    arrived_1 = cleaner;
    pnr_5 = false fby nr_5;
    ck_17_1 = s_5_1;
    presence_1_St_13_Not_Present = false;
    nr_5_St_13_Not_Present = false;
    ns_5_St_13_Not_Present_1 = true;
    presence_1_St_13_Present = true;
    nr_5_St_13_Present = false;
    ns_5_St_13_Present_1 = false;
    presence_1 =
      merge ck_17_1
        (true -> presence_1_St_13_Not_Present)
        (false -> presence_1_St_13_Present);
    ns_5_1 =
      merge ck_17_1
        (true -> ns_5_St_13_Not_Present_1)(false -> ns_5_St_13_Present_1);
    nr_5 =
      merge ck_17_1
        (true -> nr_5_St_13_Not_Present)(false -> nr_5_St_13_Present);
    ck_16_1 = true fby ns_5_1;
    r_5_St_13_Not_Present =
      if (arrived_1 when true(ck_16_1))
      then true
      else (pnr_5 when true(ck_16_1));
    s_5_St_13_Not_Present_1 =
      if (arrived_1 when true(ck_16_1)) then false else true;
    r_5_St_13_Present =
      if (arrived_1 when false(ck_16_1))
      then true
      else (pnr_5 when false(ck_16_1));
    s_5_St_13_Present_1 =
      if (arrived_1 when false(ck_16_1)) then true else false;
    s_5_1 =
      merge ck_16_1
        (true -> s_5_St_13_Not_Present_1)(false -> s_5_St_13_Present_1);
    r_5 =
      merge ck_16_1
        (true -> r_5_St_13_Not_Present)(false -> r_5_St_13_Present);
    arrived = worker;
    pnr_6 = false fby nr_6;
    ck_15_1 = s_6_1;
    presence_St_14_Not_Present = false;
    nr_6_St_14_Not_Present = false;
    ns_6_St_14_Not_Present_1 = true;
    presence_St_14_Present = true;
    nr_6_St_14_Present = false;
    ns_6_St_14_Present_1 = false;
    presence =
      merge ck_15_1
        (true -> presence_St_14_Not_Present)(false -> presence_St_14_Present);
    ns_6_1 =
      merge ck_15_1
        (true -> ns_6_St_14_Not_Present_1)(false -> ns_6_St_14_Present_1);
    nr_6 =
      merge ck_15_1
        (true -> nr_6_St_14_Not_Present)(false -> nr_6_St_14_Present);
    ck_14_1 = true fby ns_6_1;
    r_6_St_14_Not_Present =
      if (arrived when true(ck_14_1))
      then true
      else (pnr_6 when true(ck_14_1));
    s_6_St_14_Not_Present_1 =
      if (arrived when true(ck_14_1)) then false else true;
    r_6_St_14_Present =
      if (arrived when false(ck_14_1))
      then true
      else (pnr_6 when false(ck_14_1));
    s_6_St_14_Present_1 =
      if (arrived when false(ck_14_1)) then true else false;
    s_6_1 =
      merge ck_14_1
        (true -> s_6_St_14_Not_Present_1)(false -> s_6_St_14_Present_1);
    r_6 =
      merge ck_14_1
        (true -> r_6_St_14_Not_Present)(false -> r_6_St_14_Present);
    c_1 = c_closet;
    pnr_7 = false fby nr_7;
    ck_13_1 = s_7_1;
    closet_open_1_St_15_Locked = false;
    nr_7_St_15_Locked = false;
    ns_7_St_15_Locked_1 = true;
    closet_open_1_St_15_Open = true;
    nr_7_St_15_Open = false;
    ns_7_St_15_Open_1 = false;
    closet_open_1 =
      merge ck_13_1
        (true -> closet_open_1_St_15_Locked)
        (false -> closet_open_1_St_15_Open);
    ns_7_1 =
      merge ck_13_1 (true -> ns_7_St_15_Locked_1)(false -> ns_7_St_15_Open_1);
    nr_7 =
      merge ck_13_1 (true -> nr_7_St_15_Locked)(false -> nr_7_St_15_Open);
    ck_12_1 = true fby ns_7_1;
    r_7_St_15_Locked = if v_71 then true else (pnr_7 when true(ck_12_1));
    s_7_St_15_Locked_1 = if v_71 then false else true;
    v_71 = not((c_1 when true(ck_12_1)));
    r_7_St_15_Open =
      if (c_1 when false(ck_12_1)) then true else (pnr_7 when false(ck_12_1));
    s_7_St_15_Open_1 = if (c_1 when false(ck_12_1)) then true else false;
    s_7_1 =
      merge ck_12_1 (true -> s_7_St_15_Locked_1)(false -> s_7_St_15_Open_1);
    r_7 = merge ck_12_1 (true -> r_7_St_15_Locked)(false -> r_7_St_15_Open);
    c = c_door;
    pnr_8 = false fby nr_8;
    ck_11_1 = s_8_1;
    door_open_1_St_16_Closed = false;
    nr_8_St_16_Closed = false;
    ns_8_St_16_Closed_1 = true;
    door_open_1_St_16_Open = true;
    nr_8_St_16_Open = false;
    ns_8_St_16_Open_1 = false;
    door_open_1 =
      merge ck_11_1
        (true -> door_open_1_St_16_Closed)(false -> door_open_1_St_16_Open);
    ns_8_1 =
      merge ck_11_1 (true -> ns_8_St_16_Closed_1)(false -> ns_8_St_16_Open_1);
    nr_8 =
      merge ck_11_1 (true -> nr_8_St_16_Closed)(false -> nr_8_St_16_Open);
    ck_10_1 = true fby ns_8_1;
    r_8_St_16_Closed = if v_70 then true else (pnr_8 when true(ck_10_1));
    s_8_St_16_Closed_1 = if v_70 then false else true;
    v_70 = not((c when true(ck_10_1)));
    r_8_St_16_Open = if v_69 then true else (pnr_8 when false(ck_10_1));
    s_8_St_16_Open_1 = if v_69 then true else false;
    v_69 = not((c when false(ck_10_1)));
    s_8_1 =
      merge ck_10_1 (true -> s_8_St_16_Closed_1)(false -> s_8_St_16_Open_1);
    r_8 = merge ck_10_1 (true -> r_8_St_16_Closed)(false -> r_8_St_16_Open);
    change = change_shift;
    pnr_9 = false fby nr_9;
    ck_9_1 = s_9_1;
    night_1_St_17_Dia = false;
    nr_9_St_17_Dia = false;
    ns_9_St_17_Dia_1 = true;
    night_1_St_17_Noite = true;
    nr_9_St_17_Noite = false;
    ns_9_St_17_Noite_1 = false;
    night_1 =
      merge ck_9_1 (true -> night_1_St_17_Dia)(false -> night_1_St_17_Noite);
    ns_9_1 =
      merge ck_9_1 (true -> ns_9_St_17_Dia_1)(false -> ns_9_St_17_Noite_1);
    nr_9 = merge ck_9_1 (true -> nr_9_St_17_Dia)(false -> nr_9_St_17_Noite);
    ck_1 = true fby ns_9_1;
    r_9_St_17_Dia =
      if (change when true(ck_1)) then true else (pnr_9 when true(ck_1));
    s_9_St_17_Dia_1 = if (change when true(ck_1)) then false else true;
    r_9_St_17_Noite =
      if (change when false(ck_1)) then true else (pnr_9 when false(ck_1));
    s_9_St_17_Noite_1 = if (change when false(ck_1)) then true else false;
    s_9_1 = merge ck_1 (true -> s_9_St_17_Dia_1)(false -> s_9_St_17_Noite_1);
    r_9 = merge ck_1 (true -> r_9_St_17_Dia)(false -> r_9_St_17_Noite);
    night = night_1;
    door_open = door_open_1;
    closet_open = closet_open_1;
    worker_presence = presence;
    cleaner_presence = presence_1;
    pc_on = computer_on;
    window_open = window_open_1;
    air_status = air_state;
    light_status = light_source_on;
    blind_status = light_source_on_1;
    ns_2_2_1 = (ns_2_2 when true(ns_2_1));
    ns_2_2_0 = (ns_2_2 when false(ns_2_1));
    s_2_2_1 = (s_2_2 when true(s_2_1));
    s_2_2_0 = (s_2_2 when false(s_2_1))
  tel

