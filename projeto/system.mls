type st_25 = St_25_Noite|St_25_Dia
type st_24 = St_24_Open|St_24_Closed
type st_23 = St_23_On|St_23_Off
type st_22 = St_22_Open|St_22_Locked
type st_21 = St_21_Preent|St_21_Not_Present
type st_20 = St_20_Preent|St_20_Not_Present
type st_19 = St_19_On|St_19_Off
type st_18 = St_18_Open|St_18_Closed
type st_17 = St_17_Off|St_17_Min|St_17_Max
type st_16 = St_16_Funcionando|St_16_Falha
type st_15 = St_15_Off_Up|St_15_Off|St_15_Min|St_15_Max_Up|St_15_Max
type st_14 = St_14_Funcionando|St_14_Falha
type st_13 = St_13_Off|St_13_Min|St_13_Max
type st_12 = St_12_Funcionando|St_12_Falha
type st_11 = St_11_Off_Up|St_11_Off|St_11_Min|St_11_Max_Up|St_11_Max
type st_10 = St_10_Funcionando|St_10_Falha
type st_9 = St_9_Funcionando|St_9_Falha
type st_8 = St_8_Noite|St_8_Dia
type st_7 = St_7_Off|St_7_Min|St_7_Max
type st_6 = St_6_Open|St_6_Closed
type st_5 = St_5_On|St_5_Off
type st_4 = St_4_Preent|St_4_Not_Present
type st_3 = St_3_Open|St_3_Locked
type st_2 = St_2_On|St_2_Off
type st_1 = St_1_Open|St_1_Closed
type st = St_Off_Up|St_Off|St_Min|St_Max_Up|St_Max
node ilumination(c1 : bool; c2 : bool; c_up : bool; c_down : bool; up : bool;
                  down : bool; ar_fail : bool; shift : bool)
returns (lamp : int; pers : int; policy : int)
var v_250 : bool; v_249 : bool; v_248 : bool; v_247 : bool; v_246 : bool;
    v_245 : bool; v_244 : bool; v_243 : bool; v_242 : bool; v_241 : bool;
    v_240 : bool; v_239 : bool; v_238 : bool; v_237 : bool; v_236 : bool;
    v_235 : bool; v_234 : bool; v_233 : bool; v_232 : bool; v_231 : bool;
    v_230 : int; v_229 : int; v_228 : int; v_227 : int; v_226 : int;
    v_225 : int; v_224 : int; v_223 : int; v_222 : int; v_221 : int;
    v_220 : int; v_219 : int; v_218 : int; v_217 : int; v_216 : int;
    ns_St_Max_Up_2_0 : bool; ns_St_Max_Up_3_0_0 : bool;
    ns_St_Max_Up_3_0_1 : bool; ns_St_Max_Up_2_1 : bool;
    ns_St_Max_Up_3_1_0 : bool; ns_St_Max_Up_3_1_1 : bool;
    ns_St_Max_2_0 : bool; ns_St_Max_3_0_0 : bool; ns_St_Max_3_0_1 : bool;
    ns_St_Max_2_1 : bool; ns_St_Max_3_1_0 : bool; ns_St_Max_3_1_1 : bool;
    ns_St_Min_2_0 : bool; ns_St_Min_3_0_0 : bool; ns_St_Min_3_0_1 : bool;
    ns_St_Min_2_1 : bool; ns_St_Min_3_1_0 : bool; ns_St_Min_3_1_1 : bool;
    ns_St_Off_Up_2_0 : bool; ns_St_Off_Up_3_0_0 : bool;
    ns_St_Off_Up_3_0_1 : bool; ns_St_Off_Up_2_1 : bool;
    ns_St_Off_Up_3_1_0 : bool; ns_St_Off_Up_3_1_1 : bool;
    ns_St_Off_2_0 : bool; ns_St_Off_3_0_0 : bool; ns_St_Off_3_0_1 : bool;
    ns_St_Off_2_1 : bool; ns_St_Off_3_1_0 : bool; ns_St_Off_3_1_1 : bool;
    ck_1_2_0 : bool; ck_1_3_0_0 : bool; ck_1_3_0_1 : bool; ck_1_2_1 : bool;
    ck_1_3_1_0 : bool; ck_1_3_1_1 : bool; nr_St_Max_Up : bool;
    ns_St_Max_Up_3 : bool; ns_St_Max_Up_2 : bool; ns_St_Max_Up_1 : bool;
    policy_St_Max_Up : int; pers_St_Max_Up : int; lamp_St_Max_Up : int;
    nr_St_Max : bool; ns_St_Max_3 : bool; ns_St_Max_2 : bool;
    ns_St_Max_1 : bool; policy_St_Max : int; pers_St_Max : int;
    lamp_St_Max : int; nr_St_Min : bool; ns_St_Min_3 : bool;
    ns_St_Min_2 : bool; ns_St_Min_1 : bool; policy_St_Min : int;
    pers_St_Min : int; lamp_St_Min : int; nr_St_Off_Up : bool;
    ns_St_Off_Up_3 : bool; ns_St_Off_Up_2 : bool; ns_St_Off_Up_1 : bool;
    policy_St_Off_Up : int; pers_St_Off_Up : int; lamp_St_Off_Up : int;
    nr_St_Off : bool; ns_St_Off_3 : bool; ns_St_Off_2 : bool;
    ns_St_Off_1 : bool; policy_St_Off : int; pers_St_Off : int;
    lamp_St_Off : int; ck_1_3 : bool; ck_1_2 : bool; ck_1_1 : bool;
    v_32_2_0 : bool; v_32_3_0_0 : bool; v_32_3_0_1 : bool; v_32_2_1 : bool;
    v_32_3_1_0 : bool; v_32_3_1_1 : bool; v_33 : bool; v_32_3 : bool;
    v_32_2 : bool; v_32_1 : bool; v_31 : bool; v_30 : bool; v_29 : bool;
    v_28 : bool; v_26_2_0 : bool; v_26_3_0_0 : bool; v_26_3_0_1 : bool;
    v_26_2_1 : bool; v_26_3_1_0 : bool; v_26_3_1_1 : bool; v_27 : bool;
    v_26_3 : bool; v_26_2 : bool; v_26_1 : bool; v_25 : bool; v_24 : bool;
    v_23 : bool; v_22 : bool; v_21 : bool; v_19_2_0 : bool;
    v_19_3_0_0 : bool; v_19_3_0_1 : bool; v_19_2_1 : bool; v_19_3_1_0 : bool;
    v_19_3_1_1 : bool; v_20 : bool; v_19_3 : bool; v_19_2 : bool;
    v_19_1 : bool; v_18 : bool; v_17 : bool; v_16 : bool; v_15 : bool;
    v_14 : bool; v_13 : bool; v_11_2_0 : bool; v_11_3_0_0 : bool;
    v_11_3_0_1 : bool; v_11_2_1 : bool; v_11_3_1_0 : bool; v_11_3_1_1 : bool;
    v_12 : bool; v_11_3 : bool; v_11_2 : bool; v_11_1 : bool; v_10 : bool;
    v_9 : bool; v_8 : bool; v_7 : bool; v_5_2_0 : bool; v_5_3_0_0 : bool;
    v_5_3_0_1 : bool; v_5_2_1 : bool; v_5_3_1_0 : bool; v_5_3_1_1 : bool;
    v_6 : bool; v_5_3 : bool; v_5_2 : bool; v_5_1 : bool; v_4 : bool;
    v_3 : bool; v_2 : bool; v_1 : bool; v : bool; v_273 : bool; v_272 : bool;
    v_271 : bool; v_270 : bool; v_269 : bool; v_268 : bool; v_267 : bool;
    v_266 : bool; v_265 : bool; v_264 : bool; v_263 : bool; v_262 : bool;
    v_261 : bool; v_260 : bool; v_259 : bool; v_258 : bool; v_257 : bool;
    v_256 : bool; v_255 : bool; v_254 : bool; v_253 : bool; v_252 : bool;
    v_251 : bool; s_St_Max_Up_2_0 : bool; s_St_Max_Up_3_0_0 : bool;
    s_St_Max_Up_3_0_1 : bool; s_St_Max_Up_2_1 : bool;
    s_St_Max_Up_3_1_0 : bool; s_St_Max_Up_3_1_1 : bool; s_St_Max_2_0 : bool;
    s_St_Max_3_0_0 : bool; s_St_Max_3_0_1 : bool; s_St_Max_2_1 : bool;
    s_St_Max_3_1_0 : bool; s_St_Max_3_1_1 : bool; s_St_Min_2_0 : bool;
    s_St_Min_3_0_0 : bool; s_St_Min_3_0_1 : bool; s_St_Min_2_1 : bool;
    s_St_Min_3_1_0 : bool; s_St_Min_3_1_1 : bool; s_St_Off_Up_2_0 : bool;
    s_St_Off_Up_3_0_0 : bool; s_St_Off_Up_3_0_1 : bool;
    s_St_Off_Up_2_1 : bool; s_St_Off_Up_3_1_0 : bool;
    s_St_Off_Up_3_1_1 : bool; s_St_Off_2_0 : bool; s_St_Off_3_0_0 : bool;
    s_St_Off_3_0_1 : bool; s_St_Off_2_1 : bool; s_St_Off_3_1_0 : bool;
    s_St_Off_3_1_1 : bool; ck_2_0 : bool; ck_3_0_0 : bool; ck_3_0_1 : bool;
    ck_2_1 : bool; ck_3_1_0 : bool; ck_3_1_1 : bool; r_St_Max_Up : bool;
    s_St_Max_Up_3 : bool; s_St_Max_Up_2 : bool; s_St_Max_Up_1 : bool;
    r_St_Max : bool; s_St_Max_3 : bool; s_St_Max_2 : bool; s_St_Max_1 : bool;
    r_St_Min : bool; s_St_Min_3 : bool; s_St_Min_2 : bool; s_St_Min_1 : bool;
    r_St_Off_Up : bool; s_St_Off_Up_3 : bool; s_St_Off_Up_2 : bool;
    s_St_Off_Up_1 : bool; r_St_Off : bool; s_St_Off_3 : bool;
    s_St_Off_2 : bool; s_St_Off_1 : bool; ck_3 : bool; ck_2 : bool;
    ck_1_4 : bool; s_2_0 : bool; s_3_0_0 : bool; s_3_0_1 : bool;
    s_2_1 : bool; s_3_1_0 : bool; s_3_1_1 : bool; ns_2_0 : bool;
    ns_3_0_0 : bool; ns_3_0_1 : bool; ns_2_1 : bool; ns_3_1_0 : bool;
    ns_3_1_1 : bool; s_3 : bool; s_2 : bool; s_1 : bool; ns_3 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_1_1 = s_1;
  ck_1_2 = s_2;
  ck_1_3 = s_3;
  lamp_St_Off = 0;
  pers_St_Off = 0;
  policy_St_Off = 0;
  nr_St_Off = false;
  ns_St_Off_1 = false;
  ns_St_Off_2 = false;
  ns_St_Off_3 = true;
  lamp_St_Off_Up = 0;
  pers_St_Off_Up = 0;
  policy_St_Off_Up = 4;
  nr_St_Off_Up = false;
  ns_St_Off_Up_1 = false;
  ns_St_Off_Up_2 = false;
  ns_St_Off_Up_3 = false;
  lamp_St_Min = 1;
  pers_St_Min = 1;
  policy_St_Min = 1;
  nr_St_Min = false;
  ns_St_Min_1 = true;
  ns_St_Min_2 = false;
  ns_St_Min_3 = false;
  lamp_St_Max = 2;
  pers_St_Max = 2;
  policy_St_Max = 2;
  nr_St_Max = false;
  ns_St_Max_1 = true;
  ns_St_Max_2 = true;
  ns_St_Max_3 = true;
  lamp_St_Max_Up = 0;
  pers_St_Max_Up = 0;
  policy_St_Max_Up = 5;
  nr_St_Max_Up = false;
  ns_St_Max_Up_1 = true;
  ns_St_Max_Up_2 = true;
  ns_St_Max_Up_3 = false;
  v_216 = merge ck_1_3_1_1 (true -> lamp_St_Max)(false -> lamp_St_Max_Up);
  v_217 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> lamp_St_Min);
  v_218 = merge ck_1_2_1 (true -> v_216)(false -> v_217);
  v_219 = merge ck_1_3_0_0 (true -> lamp_St_Off)(false -> lamp_St_Off_Up);
  v_220 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_219);
  lamp = merge ck_1_1 (true -> v_218)(false -> v_220);
  v_221 = merge ck_1_3_1_1 (true -> pers_St_Max)(false -> pers_St_Max_Up);
  v_222 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> pers_St_Min);
  v_223 = merge ck_1_2_1 (true -> v_221)(false -> v_222);
  v_224 = merge ck_1_3_0_0 (true -> pers_St_Off)(false -> pers_St_Off_Up);
  v_225 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_224);
  pers = merge ck_1_1 (true -> v_223)(false -> v_225);
  v_226 = merge ck_1_3_1_1 (true -> policy_St_Max)(false -> policy_St_Max_Up);
  v_227 =
    merge ck_1_3_1_0
      (true -> 
        (((0 when true(ck_1_1)) when false(ck_1_2_1)) when true(ck_1_3_1_0)))
      (false -> policy_St_Min);
  v_228 = merge ck_1_2_1 (true -> v_226)(false -> v_227);
  v_229 = merge ck_1_3_0_0 (true -> policy_St_Off)(false -> policy_St_Off_Up);
  v_230 =
    merge ck_1_2_0
      (true -> ((0 when false(ck_1_1)) when true(ck_1_2_0)))(false -> v_229);
  policy = merge ck_1_1 (true -> v_228)(false -> v_230);
  v_231 = merge ck_1_3_1_1 (true -> ns_St_Max_1)(false -> ns_St_Max_Up_1);
  v_232 = merge ck_1_3_1_1 (true -> ns_St_Max_2)(false -> ns_St_Max_Up_2);
  v_233 = merge ck_1_3_1_1 (true -> ns_St_Max_3)(false -> ns_St_Max_Up_3);
  v_234 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_1);
  v_235 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_2);
  v_236 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> ns_St_Min_3);
  v_237 = merge ck_1_3_0_0 (true -> ns_St_Off_1)(false -> ns_St_Off_Up_1);
  v_238 = merge ck_1_3_0_0 (true -> ns_St_Off_2)(false -> ns_St_Off_Up_2);
  v_239 = merge ck_1_3_0_0 (true -> ns_St_Off_3)(false -> ns_St_Off_Up_3);
  v_240 = merge ck_1_2_1 (true -> v_231)(false -> v_234);
  v_241 = merge ck_1_2_1 (true -> v_232)(false -> v_235);
  v_242 = merge ck_1_2_1 (true -> v_233)(false -> v_236);
  v_243 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_237);
  v_244 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_238);
  v_245 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_239);
  ns_1 = merge ck_1_1 (true -> v_240)(false -> v_243);
  ns_2 = merge ck_1_1 (true -> v_241)(false -> v_244);
  ns_3 = merge ck_1_1 (true -> v_242)(false -> v_245);
  v_246 = merge ck_1_3_1_1 (true -> nr_St_Max)(false -> nr_St_Max_Up);
  v_247 =
    merge ck_1_3_1_0
      (true -> 
        (((true when true(ck_1_1)) when false(ck_1_2_1))
          when true(ck_1_3_1_0)))
      (false -> nr_St_Min);
  v_248 = merge ck_1_2_1 (true -> v_246)(false -> v_247);
  v_249 = merge ck_1_3_0_0 (true -> nr_St_Off)(false -> nr_St_Off_Up);
  v_250 =
    merge ck_1_2_0
      (true -> ((true when false(ck_1_1)) when true(ck_1_2_0)))
      (false -> v_249);
  nr = merge ck_1_1 (true -> v_248)(false -> v_250);
  ck_1_3_1_1 = ((ck_1_3 when true(ck_1_1)) when true(ck_1_2_1));
  ck_1_3_1_0 = ((ck_1_3 when true(ck_1_1)) when false(ck_1_2_1));
  ck_1_2_1 = (ck_1_2 when true(ck_1_1));
  ck_1_3_0_1 = ((ck_1_3 when false(ck_1_1)) when true(ck_1_2_0));
  ck_1_3_0_0 = ((ck_1_3 when false(ck_1_1)) when false(ck_1_2_0));
  ck_1_2_0 = (ck_1_2 when false(ck_1_1));
  ns_St_Off_3_1_1 =
    ((ns_St_Off_3 when true(ns_St_Off_1)) when true(ns_St_Off_2_1));
  ns_St_Off_3_1_0 =
    ((ns_St_Off_3 when true(ns_St_Off_1)) when false(ns_St_Off_2_1));
  ns_St_Off_2_1 = (ns_St_Off_2 when true(ns_St_Off_1));
  ns_St_Off_3_0_1 =
    ((ns_St_Off_3 when false(ns_St_Off_1)) when true(ns_St_Off_2_0));
  ns_St_Off_3_0_0 =
    ((ns_St_Off_3 when false(ns_St_Off_1)) when false(ns_St_Off_2_0));
  ns_St_Off_2_0 = (ns_St_Off_2 when false(ns_St_Off_1));
  ns_St_Off_Up_3_1_1 =
    ((ns_St_Off_Up_3 when true(ns_St_Off_Up_1)) when true(ns_St_Off_Up_2_1));
  ns_St_Off_Up_3_1_0 =
    ((ns_St_Off_Up_3 when true(ns_St_Off_Up_1)) when false(ns_St_Off_Up_2_1));
  ns_St_Off_Up_2_1 = (ns_St_Off_Up_2 when true(ns_St_Off_Up_1));
  ns_St_Off_Up_3_0_1 =
    ((ns_St_Off_Up_3 when false(ns_St_Off_Up_1)) when true(ns_St_Off_Up_2_0));
  ns_St_Off_Up_3_0_0 =
    ((ns_St_Off_Up_3 when false(ns_St_Off_Up_1))
      when false(ns_St_Off_Up_2_0));
  ns_St_Off_Up_2_0 = (ns_St_Off_Up_2 when false(ns_St_Off_Up_1));
  ns_St_Min_3_1_1 =
    ((ns_St_Min_3 when true(ns_St_Min_1)) when true(ns_St_Min_2_1));
  ns_St_Min_3_1_0 =
    ((ns_St_Min_3 when true(ns_St_Min_1)) when false(ns_St_Min_2_1));
  ns_St_Min_2_1 = (ns_St_Min_2 when true(ns_St_Min_1));
  ns_St_Min_3_0_1 =
    ((ns_St_Min_3 when false(ns_St_Min_1)) when true(ns_St_Min_2_0));
  ns_St_Min_3_0_0 =
    ((ns_St_Min_3 when false(ns_St_Min_1)) when false(ns_St_Min_2_0));
  ns_St_Min_2_0 = (ns_St_Min_2 when false(ns_St_Min_1));
  ns_St_Max_3_1_1 =
    ((ns_St_Max_3 when true(ns_St_Max_1)) when true(ns_St_Max_2_1));
  ns_St_Max_3_1_0 =
    ((ns_St_Max_3 when true(ns_St_Max_1)) when false(ns_St_Max_2_1));
  ns_St_Max_2_1 = (ns_St_Max_2 when true(ns_St_Max_1));
  ns_St_Max_3_0_1 =
    ((ns_St_Max_3 when false(ns_St_Max_1)) when true(ns_St_Max_2_0));
  ns_St_Max_3_0_0 =
    ((ns_St_Max_3 when false(ns_St_Max_1)) when false(ns_St_Max_2_0));
  ns_St_Max_2_0 = (ns_St_Max_2 when false(ns_St_Max_1));
  ns_St_Max_Up_3_1_1 =
    ((ns_St_Max_Up_3 when true(ns_St_Max_Up_1)) when true(ns_St_Max_Up_2_1));
  ns_St_Max_Up_3_1_0 =
    ((ns_St_Max_Up_3 when true(ns_St_Max_Up_1)) when false(ns_St_Max_Up_2_1));
  ns_St_Max_Up_2_1 = (ns_St_Max_Up_2 when true(ns_St_Max_Up_1));
  ns_St_Max_Up_3_0_1 =
    ((ns_St_Max_Up_3 when false(ns_St_Max_Up_1)) when true(ns_St_Max_Up_2_0));
  ns_St_Max_Up_3_0_0 =
    ((ns_St_Max_Up_3 when false(ns_St_Max_Up_1))
      when false(ns_St_Max_Up_2_0));
  ns_St_Max_Up_2_0 = (ns_St_Max_Up_2 when false(ns_St_Max_Up_1));
  v_251 = false fby ns_1;
  v_252 = false fby ns_2;
  v_253 = true fby ns_3;
  ck_1_4 = v_251;
  ck_2 = v_252;
  ck_3 = v_253;
  r_St_Off = if v_30 then true else v_33;
  s_St_Off_1 = if v_30 then true else v_32_1;
  s_St_Off_2 = if v_30 then false else v_32_2;
  s_St_Off_3 = if v_30 then false else v_32_3;
  v_33 =
    if v_31
    then true
    else (((pnr when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0));
  v_32_1 = if v_31 then true else false;
  v_32_2 = if v_31 then true else false;
  v_32_3 = if v_31 then true else true;
  v_31 =
    not((((c2 when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_30 = (v_28 or v_29);
  v_29 =
    ((((up when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)) &
     (((c_up when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_28 =
    not((((c1 when false(ck_1_4)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_32_3_1_1 = ((v_32_3 when true(v_32_1)) when true(v_32_2_1));
  v_32_3_1_0 = ((v_32_3 when true(v_32_1)) when false(v_32_2_1));
  v_32_2_1 = (v_32_2 when true(v_32_1));
  v_32_3_0_1 = ((v_32_3 when false(v_32_1)) when true(v_32_2_0));
  v_32_3_0_0 = ((v_32_3 when false(v_32_1)) when false(v_32_2_0));
  v_32_2_0 = (v_32_2 when false(v_32_1));
  r_St_Off_Up = if v_22 then true else v_27;
  s_St_Off_Up_1 = if v_22 then false else v_26_1;
  s_St_Off_Up_2 = if v_22 then false else v_26_2;
  s_St_Off_Up_3 = if v_22 then true else v_26_3;
  v_27 =
    if v_25
    then true
    else (((pnr when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0));
  v_26_1 = if v_25 then false else false;
  v_26_2 = if v_25 then false else false;
  v_26_3 = if v_25 then true else false;
  v_25 = (v_23 & v_24);
  v_24 =
    not
    ((((shift when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_23 =
    not
    ((((ar_fail when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_22 =
    (v_21 &
     (((shift when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_21 =
    not
    ((((ar_fail when false(ck_1_4)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_26_3_1_1 = ((v_26_3 when true(v_26_1)) when true(v_26_2_1));
  v_26_3_1_0 = ((v_26_3 when true(v_26_1)) when false(v_26_2_1));
  v_26_2_1 = (v_26_2 when true(v_26_1));
  v_26_3_0_1 = ((v_26_3 when false(v_26_1)) when true(v_26_2_0));
  v_26_3_0_0 = ((v_26_3 when false(v_26_1)) when false(v_26_2_0));
  v_26_2_0 = (v_26_2 when false(v_26_1));
  r_St_Min = if v_15 then true else v_20;
  s_St_Min_1 = if v_15 then false else v_19_1;
  s_St_Min_2 = if v_15 then false else v_19_2;
  s_St_Min_3 = if v_15 then true else v_19_3;
  v_20 =
    if v_18
    then true
    else (((pnr when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0));
  v_19_1 = if v_18 then true else true;
  v_19_2 = if v_18 then true else false;
  v_19_3 = if v_18 then true else false;
  v_18 = (v_16 or v_17);
  v_17 =
    ((((up when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_up when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_16 =
    not((((c2 when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_15 = (v_13 or v_14);
  v_14 =
    ((((down when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_down when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_13 =
    not((((c1 when true(ck_1_4)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_19_3_1_1 = ((v_19_3 when true(v_19_1)) when true(v_19_2_1));
  v_19_3_1_0 = ((v_19_3 when true(v_19_1)) when false(v_19_2_1));
  v_19_2_1 = (v_19_2 when true(v_19_1));
  v_19_3_0_1 = ((v_19_3 when false(v_19_1)) when true(v_19_2_0));
  v_19_3_0_0 = ((v_19_3 when false(v_19_1)) when false(v_19_2_0));
  v_19_2_0 = (v_19_2 when false(v_19_1));
  r_St_Max = if v_9 then true else v_12;
  s_St_Max_1 = if v_9 then true else v_11_1;
  s_St_Max_2 = if v_9 then false else v_11_2;
  s_St_Max_3 = if v_9 then false else v_11_3;
  v_12 =
    if v_10
    then true
    else (((pnr when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1));
  v_11_1 = if v_10 then false else true;
  v_11_2 = if v_10 then false else true;
  v_11_3 = if v_10 then true else true;
  v_10 =
    not((((c2 when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_9 = (v_7 or v_8);
  v_8 =
    ((((down when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)) &
     (((c_down when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_7 = not((((c1 when true(ck_1_4)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_11_3_1_1 = ((v_11_3 when true(v_11_1)) when true(v_11_2_1));
  v_11_3_1_0 = ((v_11_3 when true(v_11_1)) when false(v_11_2_1));
  v_11_2_1 = (v_11_2 when true(v_11_1));
  v_11_3_0_1 = ((v_11_3 when false(v_11_1)) when true(v_11_2_0));
  v_11_3_0_0 = ((v_11_3 when false(v_11_1)) when false(v_11_2_0));
  v_11_2_0 = (v_11_2 when false(v_11_1));
  r_St_Max_Up = if v_1 then true else v_6;
  s_St_Max_Up_1 = if v_1 then false else v_5_1;
  s_St_Max_Up_2 = if v_1 then false else v_5_2;
  s_St_Max_Up_3 = if v_1 then true else v_5_3;
  v_6 =
    if v_4
    then true
    else (((pnr when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1));
  v_5_1 = if v_4 then false else true;
  v_5_2 = if v_4 then false else true;
  v_5_3 = if v_4 then true else false;
  v_4 = (v_2 & v_3);
  v_3 =
    not((((shift when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_2 =
    not
    ((((ar_fail when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_1 =
    (v &
     (((shift when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v =
    not
    ((((ar_fail when true(ck_1_4)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_5_3_1_1 = ((v_5_3 when true(v_5_1)) when true(v_5_2_1));
  v_5_3_1_0 = ((v_5_3 when true(v_5_1)) when false(v_5_2_1));
  v_5_2_1 = (v_5_2 when true(v_5_1));
  v_5_3_0_1 = ((v_5_3 when false(v_5_1)) when true(v_5_2_0));
  v_5_3_0_0 = ((v_5_3 when false(v_5_1)) when false(v_5_2_0));
  v_5_2_0 = (v_5_2 when false(v_5_1));
  v_254 = merge ck_3_1_1 (true -> s_St_Max_1)(false -> s_St_Max_Up_1);
  v_255 = merge ck_3_1_1 (true -> s_St_Max_2)(false -> s_St_Max_Up_2);
  v_256 = merge ck_3_1_1 (true -> s_St_Max_3)(false -> s_St_Max_Up_3);
  v_257 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_1);
  v_258 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_2);
  v_259 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_St_Min_3);
  v_260 = merge ck_3_0_0 (true -> s_St_Off_1)(false -> s_St_Off_Up_1);
  v_261 = merge ck_3_0_0 (true -> s_St_Off_2)(false -> s_St_Off_Up_2);
  v_262 = merge ck_3_0_0 (true -> s_St_Off_3)(false -> s_St_Off_Up_3);
  v_263 = merge ck_2_1 (true -> v_254)(false -> v_257);
  v_264 = merge ck_2_1 (true -> v_255)(false -> v_258);
  v_265 = merge ck_2_1 (true -> v_256)(false -> v_259);
  v_266 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_260);
  v_267 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_261);
  v_268 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_262);
  s_1 = merge ck_1_4 (true -> v_263)(false -> v_266);
  s_2 = merge ck_1_4 (true -> v_264)(false -> v_267);
  s_3 = merge ck_1_4 (true -> v_265)(false -> v_268);
  v_269 = merge ck_3_1_1 (true -> r_St_Max)(false -> r_St_Max_Up);
  v_270 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1_4)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> r_St_Min);
  v_271 = merge ck_2_1 (true -> v_269)(false -> v_270);
  v_272 = merge ck_3_0_0 (true -> r_St_Off)(false -> r_St_Off_Up);
  v_273 =
    merge ck_2_0
      (true -> ((true when false(ck_1_4)) when true(ck_2_0)))(false -> v_272);
  r = merge ck_1_4 (true -> v_271)(false -> v_273);
  ck_3_1_1 = ((ck_3 when true(ck_1_4)) when true(ck_2_1));
  ck_3_1_0 = ((ck_3 when true(ck_1_4)) when false(ck_2_1));
  ck_2_1 = (ck_2 when true(ck_1_4));
  ck_3_0_1 = ((ck_3 when false(ck_1_4)) when true(ck_2_0));
  ck_3_0_0 = ((ck_3 when false(ck_1_4)) when false(ck_2_0));
  ck_2_0 = (ck_2 when false(ck_1_4));
  s_St_Off_3_1_1 =
    ((s_St_Off_3 when true(s_St_Off_1)) when true(s_St_Off_2_1));
  s_St_Off_3_1_0 =
    ((s_St_Off_3 when true(s_St_Off_1)) when false(s_St_Off_2_1));
  s_St_Off_2_1 = (s_St_Off_2 when true(s_St_Off_1));
  s_St_Off_3_0_1 =
    ((s_St_Off_3 when false(s_St_Off_1)) when true(s_St_Off_2_0));
  s_St_Off_3_0_0 =
    ((s_St_Off_3 when false(s_St_Off_1)) when false(s_St_Off_2_0));
  s_St_Off_2_0 = (s_St_Off_2 when false(s_St_Off_1));
  s_St_Off_Up_3_1_1 =
    ((s_St_Off_Up_3 when true(s_St_Off_Up_1)) when true(s_St_Off_Up_2_1));
  s_St_Off_Up_3_1_0 =
    ((s_St_Off_Up_3 when true(s_St_Off_Up_1)) when false(s_St_Off_Up_2_1));
  s_St_Off_Up_2_1 = (s_St_Off_Up_2 when true(s_St_Off_Up_1));
  s_St_Off_Up_3_0_1 =
    ((s_St_Off_Up_3 when false(s_St_Off_Up_1)) when true(s_St_Off_Up_2_0));
  s_St_Off_Up_3_0_0 =
    ((s_St_Off_Up_3 when false(s_St_Off_Up_1)) when false(s_St_Off_Up_2_0));
  s_St_Off_Up_2_0 = (s_St_Off_Up_2 when false(s_St_Off_Up_1));
  s_St_Min_3_1_1 =
    ((s_St_Min_3 when true(s_St_Min_1)) when true(s_St_Min_2_1));
  s_St_Min_3_1_0 =
    ((s_St_Min_3 when true(s_St_Min_1)) when false(s_St_Min_2_1));
  s_St_Min_2_1 = (s_St_Min_2 when true(s_St_Min_1));
  s_St_Min_3_0_1 =
    ((s_St_Min_3 when false(s_St_Min_1)) when true(s_St_Min_2_0));
  s_St_Min_3_0_0 =
    ((s_St_Min_3 when false(s_St_Min_1)) when false(s_St_Min_2_0));
  s_St_Min_2_0 = (s_St_Min_2 when false(s_St_Min_1));
  s_St_Max_3_1_1 =
    ((s_St_Max_3 when true(s_St_Max_1)) when true(s_St_Max_2_1));
  s_St_Max_3_1_0 =
    ((s_St_Max_3 when true(s_St_Max_1)) when false(s_St_Max_2_1));
  s_St_Max_2_1 = (s_St_Max_2 when true(s_St_Max_1));
  s_St_Max_3_0_1 =
    ((s_St_Max_3 when false(s_St_Max_1)) when true(s_St_Max_2_0));
  s_St_Max_3_0_0 =
    ((s_St_Max_3 when false(s_St_Max_1)) when false(s_St_Max_2_0));
  s_St_Max_2_0 = (s_St_Max_2 when false(s_St_Max_1));
  s_St_Max_Up_3_1_1 =
    ((s_St_Max_Up_3 when true(s_St_Max_Up_1)) when true(s_St_Max_Up_2_1));
  s_St_Max_Up_3_1_0 =
    ((s_St_Max_Up_3 when true(s_St_Max_Up_1)) when false(s_St_Max_Up_2_1));
  s_St_Max_Up_2_1 = (s_St_Max_Up_2 when true(s_St_Max_Up_1));
  s_St_Max_Up_3_0_1 =
    ((s_St_Max_Up_3 when false(s_St_Max_Up_1)) when true(s_St_Max_Up_2_0));
  s_St_Max_Up_3_0_0 =
    ((s_St_Max_Up_3 when false(s_St_Max_Up_1)) when false(s_St_Max_Up_2_0));
  s_St_Max_Up_2_0 = (s_St_Max_Up_2 when false(s_St_Max_Up_1));
  ns_3_1_1 = ((ns_3 when true(ns_1)) when true(ns_2_1));
  ns_3_1_0 = ((ns_3 when true(ns_1)) when false(ns_2_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_3_0_1 = ((ns_3 when false(ns_1)) when true(ns_2_0));
  ns_3_0_0 = ((ns_3 when false(ns_1)) when false(ns_2_0));
  ns_2_0 = (ns_2 when false(ns_1));
  s_3_1_1 = ((s_3 when true(s_1)) when true(s_2_1));
  s_3_1_0 = ((s_3 when true(s_1)) when false(s_2_1));
  s_2_1 = (s_2 when true(s_1));
  s_3_0_1 = ((s_3 when false(s_1)) when true(s_2_0));
  s_3_0_0 = ((s_3 when false(s_1)) when false(s_2_0));
  s_2_0 = (s_2 when false(s_1))
tel

node porta(push : bool; c_porta : bool) returns (porta_open : bool)
var nr_St_1_Open : bool; ns_St_1_Open_1 : bool; porta_open_St_1_Open : bool;
    nr_St_1_Closed : bool; ns_St_1_Closed_1 : bool;
    porta_open_St_1_Closed : bool; ck_2_1 : bool; v : bool;
    r_St_1_Open : bool; s_St_1_Open_1 : bool; r_St_1_Closed : bool;
    s_St_1_Closed_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool;
    nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_2_1 = s_1;
  porta_open_St_1_Closed = false;
  nr_St_1_Closed = false;
  ns_St_1_Closed_1 = true;
  porta_open_St_1_Open = true;
  nr_St_1_Open = false;
  ns_St_1_Open_1 = false;
  porta_open =
    merge ck_2_1
      (true -> porta_open_St_1_Closed)(false -> porta_open_St_1_Open);
  ns_1 = merge ck_2_1 (true -> ns_St_1_Closed_1)(false -> ns_St_1_Open_1);
  nr = merge ck_2_1 (true -> nr_St_1_Closed)(false -> nr_St_1_Open);
  ck_1 = true fby ns_1;
  r_St_1_Closed = if v then true else (pnr when true(ck_1));
  s_St_1_Closed_1 = if v then false else true;
  v = not((c_porta when true(ck_1)));
  r_St_1_Open =
    if (c_porta when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_1_Open_1 = if (c_porta when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_1_Closed_1)(false -> s_St_1_Open_1);
  r = merge ck_1 (true -> r_St_1_Closed)(false -> r_St_1_Open)
tel

node roteador(c : bool) returns (r_on : bool)
var nr_St_2_On : bool; ns_St_2_On_1 : bool; r_on_St_2_On : bool;
    nr_St_2_Off : bool; ns_St_2_Off_1 : bool; r_on_St_2_Off : bool;
    ck_3_1 : bool; v : bool; r_St_2_On : bool; s_St_2_On_1 : bool;
    r_St_2_Off : bool; s_St_2_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_3_1 = s_1;
  r_on_St_2_Off = false;
  nr_St_2_Off = false;
  ns_St_2_Off_1 = true;
  r_on_St_2_On = true;
  nr_St_2_On = false;
  ns_St_2_On_1 = false;
  r_on = merge ck_3_1 (true -> r_on_St_2_Off)(false -> r_on_St_2_On);
  ns_1 = merge ck_3_1 (true -> ns_St_2_Off_1)(false -> ns_St_2_On_1);
  nr = merge ck_3_1 (true -> nr_St_2_Off)(false -> nr_St_2_On);
  ck_1 = true fby ns_1;
  r_St_2_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_2_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_2_On = if v then true else (pnr when false(ck_1));
  s_St_2_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_2_Off_1)(false -> s_St_2_On_1);
  r = merge ck_1 (true -> r_St_2_Off)(false -> r_St_2_On)
tel

node armario_de_servico(c : bool) returns (arm_open : bool)
var nr_St_3_Open : bool; ns_St_3_Open_1 : bool; arm_open_St_3_Open : bool;
    nr_St_3_Locked : bool; ns_St_3_Locked_1 : bool;
    arm_open_St_3_Locked : bool; ck_4_1 : bool; v : bool; r_St_3_Open : bool;
    s_St_3_Open_1 : bool; r_St_3_Locked : bool; s_St_3_Locked_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_4_1 = s_1;
  arm_open_St_3_Locked = false;
  nr_St_3_Locked = false;
  ns_St_3_Locked_1 = true;
  arm_open_St_3_Open = true;
  nr_St_3_Open = false;
  ns_St_3_Open_1 = false;
  arm_open =
    merge ck_4_1 (true -> arm_open_St_3_Locked)(false -> arm_open_St_3_Open);
  ns_1 = merge ck_4_1 (true -> ns_St_3_Locked_1)(false -> ns_St_3_Open_1);
  nr = merge ck_4_1 (true -> nr_St_3_Locked)(false -> nr_St_3_Open);
  ck_1 = true fby ns_1;
  r_St_3_Locked = if v then true else (pnr when true(ck_1));
  s_St_3_Locked_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_3_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_3_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_3_Locked_1)(false -> s_St_3_Open_1);
  r = merge ck_1 (true -> r_St_3_Locked)(false -> r_St_3_Open)
tel

node pessoas(arrived : bool) returns (presence : bool)
var nr_St_4_Preent : bool; ns_St_4_Preent_1 : bool;
    presence_St_4_Preent : bool; nr_St_4_Not_Present : bool;
    ns_St_4_Not_Present_1 : bool; presence_St_4_Not_Present : bool;
    ck_5_1 : bool; r_St_4_Preent : bool; s_St_4_Preent_1 : bool;
    r_St_4_Not_Present : bool; s_St_4_Not_Present_1 : bool; ck_1 : bool;
    s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_5_1 = s_1;
  presence_St_4_Not_Present = false;
  nr_St_4_Not_Present = false;
  ns_St_4_Not_Present_1 = true;
  presence_St_4_Preent = true;
  nr_St_4_Preent = false;
  ns_St_4_Preent_1 = false;
  presence =
    merge ck_5_1
      (true -> presence_St_4_Not_Present)(false -> presence_St_4_Preent);
  ns_1 =
    merge ck_5_1 (true -> ns_St_4_Not_Present_1)(false -> ns_St_4_Preent_1);
  nr = merge ck_5_1 (true -> nr_St_4_Not_Present)(false -> nr_St_4_Preent);
  ck_1 = true fby ns_1;
  r_St_4_Not_Present =
    if (arrived when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_4_Not_Present_1 = if (arrived when true(ck_1)) then false else true;
  r_St_4_Preent =
    if (arrived when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_4_Preent_1 = if (arrived when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_4_Not_Present_1)(false -> s_St_4_Preent_1);
  r = merge ck_1 (true -> r_St_4_Not_Present)(false -> r_St_4_Preent)
tel

node computadores(c : bool) returns (pc_on : bool)
var nr_St_5_On : bool; ns_St_5_On_1 : bool; pc_on_St_5_On : bool;
    nr_St_5_Off : bool; ns_St_5_Off_1 : bool; pc_on_St_5_Off : bool;
    ck_6_1 : bool; v : bool; r_St_5_On : bool; s_St_5_On_1 : bool;
    r_St_5_Off : bool; s_St_5_Off_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_6_1 = s_1;
  pc_on_St_5_Off = false;
  nr_St_5_Off = false;
  ns_St_5_Off_1 = true;
  pc_on_St_5_On = true;
  nr_St_5_On = false;
  ns_St_5_On_1 = false;
  pc_on = merge ck_6_1 (true -> pc_on_St_5_Off)(false -> pc_on_St_5_On);
  ns_1 = merge ck_6_1 (true -> ns_St_5_Off_1)(false -> ns_St_5_On_1);
  nr = merge ck_6_1 (true -> nr_St_5_Off)(false -> nr_St_5_On);
  ck_1 = true fby ns_1;
  r_St_5_Off = if (c when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_5_Off_1 = if (c when true(ck_1)) then false else true;
  r_St_5_On = if v then true else (pnr when false(ck_1));
  s_St_5_On_1 = if v then true else false;
  v = not((c when false(ck_1)));
  s_1 = merge ck_1 (true -> s_St_5_Off_1)(false -> s_St_5_On_1);
  r = merge ck_1 (true -> r_St_5_Off)(false -> r_St_5_On)
tel

node janelas(c : bool) returns (w_open : bool)
var nr_St_6_Open : bool; ns_St_6_Open_1 : bool; w_open_St_6_Open : bool;
    nr_St_6_Closed : bool; ns_St_6_Closed_1 : bool;
    w_open_St_6_Closed : bool; ck_7_1 : bool; v : bool; r_St_6_Open : bool;
    s_St_6_Open_1 : bool; r_St_6_Closed : bool; s_St_6_Closed_1 : bool;
    ck_1 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_7_1 = s_1;
  w_open_St_6_Closed = false;
  nr_St_6_Closed = false;
  ns_St_6_Closed_1 = true;
  w_open_St_6_Open = true;
  nr_St_6_Open = false;
  ns_St_6_Open_1 = false;
  w_open =
    merge ck_7_1 (true -> w_open_St_6_Closed)(false -> w_open_St_6_Open);
  ns_1 = merge ck_7_1 (true -> ns_St_6_Closed_1)(false -> ns_St_6_Open_1);
  nr = merge ck_7_1 (true -> nr_St_6_Closed)(false -> nr_St_6_Open);
  ck_1 = true fby ns_1;
  r_St_6_Closed = if v then true else (pnr when true(ck_1));
  s_St_6_Closed_1 = if v then false else true;
  v = not((c when true(ck_1)));
  r_St_6_Open = if (c when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_6_Open_1 = if (c when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_6_Closed_1)(false -> s_St_6_Open_1);
  r = merge ck_1 (true -> r_St_6_Closed)(false -> r_St_6_Open)
tel

node ar_condicionado(c1 : bool; c2 : bool) returns (ar_state : int)
var v_281 : bool; v_280 : bool; v_279 : bool; v_278 : bool; v_277 : bool;
    v_276 : bool; v_275 : int; v_274 : int; ns_St_7_Max_2_0 : bool;
    ns_St_7_Max_2_1 : bool; ns_St_7_Min_2_0 : bool; ns_St_7_Min_2_1 : bool;
    ns_St_7_Off_2_0 : bool; ns_St_7_Off_2_1 : bool; ck_8_2_0 : bool;
    ck_8_2_1 : bool; nr_St_7_Max : bool; ns_St_7_Max_2 : bool;
    ns_St_7_Max_1 : bool; ar_state_St_7_Max : int; nr_St_7_Min : bool;
    ns_St_7_Min_2 : bool; ns_St_7_Min_1 : bool; ar_state_St_7_Min : int;
    nr_St_7_Off : bool; ns_St_7_Off_2 : bool; ns_St_7_Off_1 : bool;
    ar_state_St_7_Off : int; ck_8_2 : bool; ck_8_1 : bool; v_40_2_0 : bool;
    v_40_2_1 : bool; v_41 : bool; v_40_2 : bool; v_40_1 : bool;
    v_38_2_0 : bool; v_38_2_1 : bool; v_39 : bool; v_38_2 : bool;
    v_38_1 : bool; v_37 : bool; v_35_2_0 : bool; v_35_2_1 : bool;
    v_36 : bool; v_35_2 : bool; v_35_1 : bool; v_34 : bool; v : bool;
    v_289 : bool; v_288 : bool; v_287 : bool; v_286 : bool; v_285 : bool;
    v_284 : bool; v_283 : bool; v_282 : bool; s_St_7_Max_2_0 : bool;
    s_St_7_Max_2_1 : bool; s_St_7_Min_2_0 : bool; s_St_7_Min_2_1 : bool;
    s_St_7_Off_2_0 : bool; s_St_7_Off_2_1 : bool; ck_2_0 : bool;
    ck_2_1 : bool; r_St_7_Max : bool; s_St_7_Max_2 : bool;
    s_St_7_Max_1 : bool; r_St_7_Min : bool; s_St_7_Min_2 : bool;
    s_St_7_Min_1 : bool; r_St_7_Off : bool; s_St_7_Off_2 : bool;
    s_St_7_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_0 : bool;
    s_2_1 : bool; ns_2_0 : bool; ns_2_1 : bool; s_2 : bool; s_1 : bool;
    ns_2 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_8_1 = s_1;
  ck_8_2 = s_2;
  ar_state_St_7_Off = 0;
  nr_St_7_Off = false;
  ns_St_7_Off_1 = false;
  ns_St_7_Off_2 = false;
  ar_state_St_7_Min = 1;
  nr_St_7_Min = false;
  ns_St_7_Min_1 = true;
  ns_St_7_Min_2 = false;
  ar_state_St_7_Max = 2;
  nr_St_7_Max = false;
  ns_St_7_Max_1 = true;
  ns_St_7_Max_2 = true;
  v_274 =
    merge ck_8_2_1 (true -> ar_state_St_7_Max)(false -> ar_state_St_7_Min);
  v_275 =
    merge ck_8_2_0
      (true -> ((0 when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ar_state_St_7_Off);
  ar_state = merge ck_8_1 (true -> v_274)(false -> v_275);
  v_276 = merge ck_8_2_1 (true -> ns_St_7_Max_1)(false -> ns_St_7_Min_1);
  v_277 = merge ck_8_2_1 (true -> ns_St_7_Max_2)(false -> ns_St_7_Min_2);
  v_278 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_7_Off_1);
  v_279 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> ns_St_7_Off_2);
  ns_1 = merge ck_8_1 (true -> v_276)(false -> v_278);
  ns_2 = merge ck_8_1 (true -> v_277)(false -> v_279);
  v_280 = merge ck_8_2_1 (true -> nr_St_7_Max)(false -> nr_St_7_Min);
  v_281 =
    merge ck_8_2_0
      (true -> ((true when false(ck_8_1)) when true(ck_8_2_0)))
      (false -> nr_St_7_Off);
  nr = merge ck_8_1 (true -> v_280)(false -> v_281);
  ck_8_2_1 = (ck_8_2 when true(ck_8_1));
  ck_8_2_0 = (ck_8_2 when false(ck_8_1));
  ns_St_7_Off_2_1 = (ns_St_7_Off_2 when true(ns_St_7_Off_1));
  ns_St_7_Off_2_0 = (ns_St_7_Off_2 when false(ns_St_7_Off_1));
  ns_St_7_Min_2_1 = (ns_St_7_Min_2 when true(ns_St_7_Min_1));
  ns_St_7_Min_2_0 = (ns_St_7_Min_2 when false(ns_St_7_Min_1));
  ns_St_7_Max_2_1 = (ns_St_7_Max_2 when true(ns_St_7_Max_1));
  ns_St_7_Max_2_0 = (ns_St_7_Max_2 when false(ns_St_7_Max_1));
  v_282 = false fby ns_1;
  v_283 = false fby ns_2;
  ck_1 = v_282;
  ck_2 = v_283;
  r_St_7_Off =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_41;
  s_St_7_Off_1 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then true else v_40_1;
  s_St_7_Off_2 =
    if ((c1 when false(ck_1)) when false(ck_2_0)) then false else v_40_2;
  v_41 =
    if ((c2 when false(ck_1)) when false(ck_2_0))
    then true
    else ((pnr when false(ck_1)) when false(ck_2_0));
  v_40_1 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_40_2 = if ((c2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_40_2_1 = (v_40_2 when true(v_40_1));
  v_40_2_0 = (v_40_2 when false(v_40_1));
  r_St_7_Min = if v_37 then true else v_39;
  s_St_7_Min_1 = if v_37 then false else v_38_1;
  s_St_7_Min_2 = if v_37 then false else v_38_2;
  v_39 =
    if ((c2 when true(ck_1)) when false(ck_2_1))
    then true
    else ((pnr when true(ck_1)) when false(ck_2_1));
  v_38_1 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else true;
  v_38_2 = if ((c2 when true(ck_1)) when false(ck_2_1)) then true else false;
  v_37 = not(((c1 when true(ck_1)) when false(ck_2_1)));
  v_38_2_1 = (v_38_2 when true(v_38_1));
  v_38_2_0 = (v_38_2 when false(v_38_1));
  r_St_7_Max = if v then true else v_36;
  s_St_7_Max_1 = if v then true else v_35_1;
  s_St_7_Max_2 = if v then false else v_35_2;
  v_36 = if v_34 then true else ((pnr when true(ck_1)) when true(ck_2_1));
  v_35_1 = if v_34 then false else true;
  v_35_2 = if v_34 then false else true;
  v_34 = not(((c2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1 when true(ck_1)) when true(ck_2_1)));
  v_35_2_1 = (v_35_2 when true(v_35_1));
  v_35_2_0 = (v_35_2 when false(v_35_1));
  v_284 = merge ck_2_1 (true -> s_St_7_Max_1)(false -> s_St_7_Min_1);
  v_285 = merge ck_2_1 (true -> s_St_7_Max_2)(false -> s_St_7_Min_2);
  v_286 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_7_Off_1);
  v_287 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_St_7_Off_2);
  s_1 = merge ck_1 (true -> v_284)(false -> v_286);
  s_2 = merge ck_1 (true -> v_285)(false -> v_287);
  v_288 = merge ck_2_1 (true -> r_St_7_Max)(false -> r_St_7_Min);
  v_289 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_St_7_Off);
  r = merge ck_1 (true -> v_288)(false -> v_289);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_St_7_Off_2_1 = (s_St_7_Off_2 when true(s_St_7_Off_1));
  s_St_7_Off_2_0 = (s_St_7_Off_2 when false(s_St_7_Off_1));
  s_St_7_Min_2_1 = (s_St_7_Min_2 when true(s_St_7_Min_1));
  s_St_7_Min_2_0 = (s_St_7_Min_2 when false(s_St_7_Min_1));
  s_St_7_Max_2_1 = (s_St_7_Max_2 when true(s_St_7_Max_1));
  s_St_7_Max_2_0 = (s_St_7_Max_2 when false(s_St_7_Max_1));
  ns_2_1 = (ns_2 when true(ns_1));
  ns_2_0 = (ns_2 when false(ns_1));
  s_2_1 = (s_2 when true(s_1));
  s_2_0 = (s_2 when false(s_1))
tel

node turno(shift : bool) returns (turno : bool)
var nr_St_8_Noite : bool; ns_St_8_Noite_1 : bool; turno_St_8_Noite : bool;
    nr_St_8_Dia : bool; ns_St_8_Dia_1 : bool; turno_St_8_Dia : bool;
    ck_9_1 : bool; r_St_8_Noite : bool; s_St_8_Noite_1 : bool;
    r_St_8_Dia : bool; s_St_8_Dia_1 : bool; ck_1 : bool; s_1 : bool;
    ns_1 : bool; r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_9_1 = s_1;
  turno_St_8_Dia = false;
  nr_St_8_Dia = false;
  ns_St_8_Dia_1 = true;
  turno_St_8_Noite = true;
  nr_St_8_Noite = false;
  ns_St_8_Noite_1 = false;
  turno = merge ck_9_1 (true -> turno_St_8_Dia)(false -> turno_St_8_Noite);
  ns_1 = merge ck_9_1 (true -> ns_St_8_Dia_1)(false -> ns_St_8_Noite_1);
  nr = merge ck_9_1 (true -> nr_St_8_Dia)(false -> nr_St_8_Noite);
  ck_1 = true fby ns_1;
  r_St_8_Dia =
    if (shift when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_8_Dia_1 = if (shift when true(ck_1)) then false else true;
  r_St_8_Noite =
    if (shift when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_8_Noite_1 = if (shift when false(ck_1)) then true else false;
  s_1 = merge ck_1 (true -> s_St_8_Dia_1)(false -> s_St_8_Noite_1);
  r = merge ck_1 (true -> r_St_8_Dia)(false -> r_St_8_Noite)
tel

node falha(falhou : bool; recuperou : bool) returns (failed : bool)
var nr_St_9_Falha : bool; ns_St_9_Falha_1 : bool; failed_St_9_Falha : bool;
    nr_St_9_Funcionando : bool; ns_St_9_Funcionando_1 : bool;
    failed_St_9_Funcionando : bool; ck_10_1 : bool; r_St_9_Falha : bool;
    s_St_9_Falha_1 : bool; r_St_9_Funcionando : bool;
    s_St_9_Funcionando_1 : bool; ck_1 : bool; s_1 : bool; ns_1 : bool;
    r : bool; nr : bool; pnr : bool;
let
  pnr = false fby nr;
  ck_10_1 = s_1;
  failed_St_9_Funcionando = false;
  nr_St_9_Funcionando = false;
  ns_St_9_Funcionando_1 = false;
  failed_St_9_Falha = true;
  nr_St_9_Falha = false;
  ns_St_9_Falha_1 = true;
  failed =
    merge ck_10_1
      (true -> failed_St_9_Falha)(false -> failed_St_9_Funcionando);
  ns_1 =
    merge ck_10_1 (true -> ns_St_9_Falha_1)(false -> ns_St_9_Funcionando_1);
  nr = merge ck_10_1 (true -> nr_St_9_Falha)(false -> nr_St_9_Funcionando);
  ck_1 = false fby ns_1;
  r_St_9_Funcionando =
    if (falhou when false(ck_1)) then true else (pnr when false(ck_1));
  s_St_9_Funcionando_1 = if (falhou when false(ck_1)) then true else false;
  r_St_9_Falha =
    if (recuperou when true(ck_1)) then true else (pnr when true(ck_1));
  s_St_9_Falha_1 = if (recuperou when true(ck_1)) then false else true;
  s_1 = merge ck_1 (true -> s_St_9_Falha_1)(false -> s_St_9_Funcionando_1);
  r = merge ck_1 (true -> r_St_9_Falha)(false -> r_St_9_Funcionando)
tel

node l_status(c1 : bool; c2 : bool; c_up : bool; c_down : bool; up : bool;
               down : bool; falhou : bool; recuperou : bool; ar_fail : bool;
               shift : bool)
returns (failed : bool; lamp : int; pers : int; policy : int)
var nr_St_10_Falha : bool; ns_St_10_Falha_1 : bool;
    failed_1_St_10_Falha : bool; nr_St_10_Funcionando : bool;
    ns_St_10_Funcionando_1 : bool; failed_1_St_10_Funcionando : bool;
    ck_13_1 : bool; r_St_10_Falha : bool; s_St_10_Falha_1 : bool;
    r_St_10_Funcionando : bool; s_St_10_Funcionando_1 : bool; ck_12_1 : bool;
    v_324 : bool; v_323 : bool; v_322 : bool; v_321 : bool; v_320 : bool;
    v_319 : bool; v_318 : bool; v_317 : bool; v_316 : bool; v_315 : bool;
    v_314 : bool; v_313 : bool; v_312 : bool; v_311 : bool; v_310 : bool;
    v_309 : bool; v_308 : bool; v_307 : bool; v_306 : bool; v_305 : bool;
    v_304 : int; v_303 : int; v_302 : int; v_301 : int; v_300 : int;
    v_299 : int; v_298 : int; v_297 : int; v_296 : int; v_295 : int;
    v_294 : int; v_293 : int; v_292 : int; v_291 : int; v_290 : int;
    ns_1_St_11_Max_Up_2_0 : bool; ns_1_St_11_Max_Up_3_0_0 : bool;
    ns_1_St_11_Max_Up_3_0_1 : bool; ns_1_St_11_Max_Up_2_1 : bool;
    ns_1_St_11_Max_Up_3_1_0 : bool; ns_1_St_11_Max_Up_3_1_1 : bool;
    ns_1_St_11_Max_2_0 : bool; ns_1_St_11_Max_3_0_0 : bool;
    ns_1_St_11_Max_3_0_1 : bool; ns_1_St_11_Max_2_1 : bool;
    ns_1_St_11_Max_3_1_0 : bool; ns_1_St_11_Max_3_1_1 : bool;
    ns_1_St_11_Min_2_0 : bool; ns_1_St_11_Min_3_0_0 : bool;
    ns_1_St_11_Min_3_0_1 : bool; ns_1_St_11_Min_2_1 : bool;
    ns_1_St_11_Min_3_1_0 : bool; ns_1_St_11_Min_3_1_1 : bool;
    ns_1_St_11_Off_Up_2_0 : bool; ns_1_St_11_Off_Up_3_0_0 : bool;
    ns_1_St_11_Off_Up_3_0_1 : bool; ns_1_St_11_Off_Up_2_1 : bool;
    ns_1_St_11_Off_Up_3_1_0 : bool; ns_1_St_11_Off_Up_3_1_1 : bool;
    ns_1_St_11_Off_2_0 : bool; ns_1_St_11_Off_3_0_0 : bool;
    ns_1_St_11_Off_3_0_1 : bool; ns_1_St_11_Off_2_1 : bool;
    ns_1_St_11_Off_3_1_0 : bool; ns_1_St_11_Off_3_1_1 : bool;
    ck_11_2_0 : bool; ck_11_3_0_0 : bool; ck_11_3_0_1 : bool;
    ck_11_2_1 : bool; ck_11_3_1_0 : bool; ck_11_3_1_1 : bool;
    nr_1_St_11_Max_Up : bool; ns_1_St_11_Max_Up_3 : bool;
    ns_1_St_11_Max_Up_2 : bool; ns_1_St_11_Max_Up_1 : bool;
    policy_1_St_11_Max_Up : int; pers_1_St_11_Max_Up : int;
    lamp_1_St_11_Max_Up : int; nr_1_St_11_Max : bool;
    ns_1_St_11_Max_3 : bool; ns_1_St_11_Max_2 : bool;
    ns_1_St_11_Max_1 : bool; policy_1_St_11_Max : int;
    pers_1_St_11_Max : int; lamp_1_St_11_Max : int; nr_1_St_11_Min : bool;
    ns_1_St_11_Min_3 : bool; ns_1_St_11_Min_2 : bool;
    ns_1_St_11_Min_1 : bool; policy_1_St_11_Min : int;
    pers_1_St_11_Min : int; lamp_1_St_11_Min : int; nr_1_St_11_Off_Up : bool;
    ns_1_St_11_Off_Up_3 : bool; ns_1_St_11_Off_Up_2 : bool;
    ns_1_St_11_Off_Up_1 : bool; policy_1_St_11_Off_Up : int;
    pers_1_St_11_Off_Up : int; lamp_1_St_11_Off_Up : int;
    nr_1_St_11_Off : bool; ns_1_St_11_Off_3 : bool; ns_1_St_11_Off_2 : bool;
    ns_1_St_11_Off_1 : bool; policy_1_St_11_Off : int;
    pers_1_St_11_Off : int; lamp_1_St_11_Off : int; ck_11_3 : bool;
    ck_11_2 : bool; ck_11_1 : bool; v_73_2_0 : bool; v_73_3_0_0 : bool;
    v_73_3_0_1 : bool; v_73_2_1 : bool; v_73_3_1_0 : bool; v_73_3_1_1 : bool;
    v_74 : bool; v_73_3 : bool; v_73_2 : bool; v_73_1 : bool; v_72 : bool;
    v_71 : bool; v_70 : bool; v_69 : bool; v_67_2_0 : bool;
    v_67_3_0_0 : bool; v_67_3_0_1 : bool; v_67_2_1 : bool; v_67_3_1_0 : bool;
    v_67_3_1_1 : bool; v_68 : bool; v_67_3 : bool; v_67_2 : bool;
    v_67_1 : bool; v_66 : bool; v_65 : bool; v_64 : bool; v_63 : bool;
    v_62 : bool; v_60_2_0 : bool; v_60_3_0_0 : bool; v_60_3_0_1 : bool;
    v_60_2_1 : bool; v_60_3_1_0 : bool; v_60_3_1_1 : bool; v_61 : bool;
    v_60_3 : bool; v_60_2 : bool; v_60_1 : bool; v_59 : bool; v_58 : bool;
    v_57 : bool; v_56 : bool; v_55 : bool; v_54 : bool; v_52_2_0 : bool;
    v_52_3_0_0 : bool; v_52_3_0_1 : bool; v_52_2_1 : bool; v_52_3_1_0 : bool;
    v_52_3_1_1 : bool; v_53 : bool; v_52_3 : bool; v_52_2 : bool;
    v_52_1 : bool; v_51 : bool; v_50 : bool; v_49 : bool; v_48 : bool;
    v_46_2_0 : bool; v_46_3_0_0 : bool; v_46_3_0_1 : bool; v_46_2_1 : bool;
    v_46_3_1_0 : bool; v_46_3_1_1 : bool; v_47 : bool; v_46_3 : bool;
    v_46_2 : bool; v_46_1 : bool; v_45 : bool; v_44 : bool; v_43 : bool;
    v_42 : bool; v : bool; v_347 : bool; v_346 : bool; v_345 : bool;
    v_344 : bool; v_343 : bool; v_342 : bool; v_341 : bool; v_340 : bool;
    v_339 : bool; v_338 : bool; v_337 : bool; v_336 : bool; v_335 : bool;
    v_334 : bool; v_333 : bool; v_332 : bool; v_331 : bool; v_330 : bool;
    v_329 : bool; v_328 : bool; v_327 : bool; v_326 : bool; v_325 : bool;
    s_1_St_11_Max_Up_2_0 : bool; s_1_St_11_Max_Up_3_0_0 : bool;
    s_1_St_11_Max_Up_3_0_1 : bool; s_1_St_11_Max_Up_2_1 : bool;
    s_1_St_11_Max_Up_3_1_0 : bool; s_1_St_11_Max_Up_3_1_1 : bool;
    s_1_St_11_Max_2_0 : bool; s_1_St_11_Max_3_0_0 : bool;
    s_1_St_11_Max_3_0_1 : bool; s_1_St_11_Max_2_1 : bool;
    s_1_St_11_Max_3_1_0 : bool; s_1_St_11_Max_3_1_1 : bool;
    s_1_St_11_Min_2_0 : bool; s_1_St_11_Min_3_0_0 : bool;
    s_1_St_11_Min_3_0_1 : bool; s_1_St_11_Min_2_1 : bool;
    s_1_St_11_Min_3_1_0 : bool; s_1_St_11_Min_3_1_1 : bool;
    s_1_St_11_Off_Up_2_0 : bool; s_1_St_11_Off_Up_3_0_0 : bool;
    s_1_St_11_Off_Up_3_0_1 : bool; s_1_St_11_Off_Up_2_1 : bool;
    s_1_St_11_Off_Up_3_1_0 : bool; s_1_St_11_Off_Up_3_1_1 : bool;
    s_1_St_11_Off_2_0 : bool; s_1_St_11_Off_3_0_0 : bool;
    s_1_St_11_Off_3_0_1 : bool; s_1_St_11_Off_2_1 : bool;
    s_1_St_11_Off_3_1_0 : bool; s_1_St_11_Off_3_1_1 : bool; ck_2_0 : bool;
    ck_3_0_0 : bool; ck_3_0_1 : bool; ck_2_1 : bool; ck_3_1_0 : bool;
    ck_3_1_1 : bool; r_1_St_11_Max_Up : bool; s_1_St_11_Max_Up_3 : bool;
    s_1_St_11_Max_Up_2 : bool; s_1_St_11_Max_Up_1 : bool;
    r_1_St_11_Max : bool; s_1_St_11_Max_3 : bool; s_1_St_11_Max_2 : bool;
    s_1_St_11_Max_1 : bool; r_1_St_11_Min : bool; s_1_St_11_Min_3 : bool;
    s_1_St_11_Min_2 : bool; s_1_St_11_Min_1 : bool; r_1_St_11_Off_Up : bool;
    s_1_St_11_Off_Up_3 : bool; s_1_St_11_Off_Up_2 : bool;
    s_1_St_11_Off_Up_1 : bool; r_1_St_11_Off : bool; s_1_St_11_Off_3 : bool;
    s_1_St_11_Off_2 : bool; s_1_St_11_Off_1 : bool; ck_3 : bool; ck_2 : bool;
    ck_1 : bool; s_1_2_0 : bool; s_1_3_0_0 : bool; s_1_3_0_1 : bool;
    s_1_2_1 : bool; s_1_3_1_0 : bool; s_1_3_1_1 : bool; ns_1_2_0 : bool;
    ns_1_3_0_0 : bool; ns_1_3_0_1 : bool; ns_1_2_1 : bool; ns_1_3_1_0 : bool;
    ns_1_3_1_1 : bool; s_1_3 : bool; s_1_2 : bool; s_1_1 : bool;
    ns_1_3 : bool; ns_1_2 : bool; ns_1_1 : bool; r_1 : bool; nr_1 : bool;
    pnr_1 : bool; s_1_4 : bool; ns_1_4 : bool; r : bool; nr : bool;
    pnr : bool; falhou_1 : bool; recuperou_1 : bool; failed_1 : bool;
    c1_1 : bool; c2_1 : bool; c_up_1 : bool; c_down_1 : bool; up_1 : bool;
    down_1 : bool; ar_fail_1 : bool; shift_1 : bool; lamp_1 : int;
    pers_1 : int; policy_1 : int;
let
  falhou_1 = falhou;
  recuperou_1 = recuperou;
  pnr = false fby nr;
  ck_13_1 = s_1_4;
  failed_1_St_10_Funcionando = false;
  nr_St_10_Funcionando = false;
  ns_St_10_Funcionando_1 = false;
  failed_1_St_10_Falha = true;
  nr_St_10_Falha = false;
  ns_St_10_Falha_1 = true;
  failed_1 =
    merge ck_13_1
      (true -> failed_1_St_10_Falha)(false -> failed_1_St_10_Funcionando);
  ns_1_4 =
    merge ck_13_1 (true -> ns_St_10_Falha_1)(false -> ns_St_10_Funcionando_1);
  nr = merge ck_13_1 (true -> nr_St_10_Falha)(false -> nr_St_10_Funcionando);
  ck_12_1 = false fby ns_1_4;
  r_St_10_Funcionando =
    if (falhou_1 when false(ck_12_1))
    then true
    else (pnr when false(ck_12_1));
  s_St_10_Funcionando_1 =
    if (falhou_1 when false(ck_12_1)) then true else false;
  r_St_10_Falha =
    if (recuperou_1 when true(ck_12_1))
    then true
    else (pnr when true(ck_12_1));
  s_St_10_Falha_1 = if (recuperou_1 when true(ck_12_1)) then false else true;
  s_1_4 =
    merge ck_12_1 (true -> s_St_10_Falha_1)(false -> s_St_10_Funcionando_1);
  r = merge ck_12_1 (true -> r_St_10_Falha)(false -> r_St_10_Funcionando);
  c1_1 = c1;
  c2_1 = c2;
  c_up_1 = c_up;
  c_down_1 = c_down;
  up_1 = up;
  down_1 = down;
  ar_fail_1 = ar_fail;
  shift_1 = shift;
  pnr_1 = false fby nr_1;
  ck_11_1 = s_1_1;
  ck_11_2 = s_1_2;
  ck_11_3 = s_1_3;
  lamp_1_St_11_Off = 0;
  pers_1_St_11_Off = 0;
  policy_1_St_11_Off = 0;
  nr_1_St_11_Off = false;
  ns_1_St_11_Off_1 = false;
  ns_1_St_11_Off_2 = false;
  ns_1_St_11_Off_3 = true;
  lamp_1_St_11_Off_Up = 0;
  pers_1_St_11_Off_Up = 0;
  policy_1_St_11_Off_Up = 4;
  nr_1_St_11_Off_Up = false;
  ns_1_St_11_Off_Up_1 = false;
  ns_1_St_11_Off_Up_2 = false;
  ns_1_St_11_Off_Up_3 = false;
  lamp_1_St_11_Min = 1;
  pers_1_St_11_Min = 1;
  policy_1_St_11_Min = 1;
  nr_1_St_11_Min = false;
  ns_1_St_11_Min_1 = true;
  ns_1_St_11_Min_2 = false;
  ns_1_St_11_Min_3 = false;
  lamp_1_St_11_Max = 2;
  pers_1_St_11_Max = 2;
  policy_1_St_11_Max = 2;
  nr_1_St_11_Max = false;
  ns_1_St_11_Max_1 = true;
  ns_1_St_11_Max_2 = true;
  ns_1_St_11_Max_3 = true;
  lamp_1_St_11_Max_Up = 0;
  pers_1_St_11_Max_Up = 0;
  policy_1_St_11_Max_Up = 5;
  nr_1_St_11_Max_Up = false;
  ns_1_St_11_Max_Up_1 = true;
  ns_1_St_11_Max_Up_2 = true;
  ns_1_St_11_Max_Up_3 = false;
  v_290 =
    merge ck_11_3_1_1
      (true -> lamp_1_St_11_Max)(false -> lamp_1_St_11_Max_Up);
  v_291 =
    merge ck_11_3_1_0
      (true -> 
        (((0 when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> lamp_1_St_11_Min);
  v_292 = merge ck_11_2_1 (true -> v_290)(false -> v_291);
  v_293 =
    merge ck_11_3_0_0
      (true -> lamp_1_St_11_Off)(false -> lamp_1_St_11_Off_Up);
  v_294 =
    merge ck_11_2_0
      (true -> ((0 when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_293);
  lamp_1 = merge ck_11_1 (true -> v_292)(false -> v_294);
  v_295 =
    merge ck_11_3_1_1
      (true -> pers_1_St_11_Max)(false -> pers_1_St_11_Max_Up);
  v_296 =
    merge ck_11_3_1_0
      (true -> 
        (((0 when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> pers_1_St_11_Min);
  v_297 = merge ck_11_2_1 (true -> v_295)(false -> v_296);
  v_298 =
    merge ck_11_3_0_0
      (true -> pers_1_St_11_Off)(false -> pers_1_St_11_Off_Up);
  v_299 =
    merge ck_11_2_0
      (true -> ((0 when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_298);
  pers_1 = merge ck_11_1 (true -> v_297)(false -> v_299);
  v_300 =
    merge ck_11_3_1_1
      (true -> policy_1_St_11_Max)(false -> policy_1_St_11_Max_Up);
  v_301 =
    merge ck_11_3_1_0
      (true -> 
        (((0 when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> policy_1_St_11_Min);
  v_302 = merge ck_11_2_1 (true -> v_300)(false -> v_301);
  v_303 =
    merge ck_11_3_0_0
      (true -> policy_1_St_11_Off)(false -> policy_1_St_11_Off_Up);
  v_304 =
    merge ck_11_2_0
      (true -> ((0 when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_303);
  policy_1 = merge ck_11_1 (true -> v_302)(false -> v_304);
  v_305 =
    merge ck_11_3_1_1
      (true -> ns_1_St_11_Max_1)(false -> ns_1_St_11_Max_Up_1);
  v_306 =
    merge ck_11_3_1_1
      (true -> ns_1_St_11_Max_2)(false -> ns_1_St_11_Max_Up_2);
  v_307 =
    merge ck_11_3_1_1
      (true -> ns_1_St_11_Max_3)(false -> ns_1_St_11_Max_Up_3);
  v_308 =
    merge ck_11_3_1_0
      (true -> 
        (((true when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> ns_1_St_11_Min_1);
  v_309 =
    merge ck_11_3_1_0
      (true -> 
        (((true when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> ns_1_St_11_Min_2);
  v_310 =
    merge ck_11_3_1_0
      (true -> 
        (((true when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> ns_1_St_11_Min_3);
  v_311 =
    merge ck_11_3_0_0
      (true -> ns_1_St_11_Off_1)(false -> ns_1_St_11_Off_Up_1);
  v_312 =
    merge ck_11_3_0_0
      (true -> ns_1_St_11_Off_2)(false -> ns_1_St_11_Off_Up_2);
  v_313 =
    merge ck_11_3_0_0
      (true -> ns_1_St_11_Off_3)(false -> ns_1_St_11_Off_Up_3);
  v_314 = merge ck_11_2_1 (true -> v_305)(false -> v_308);
  v_315 = merge ck_11_2_1 (true -> v_306)(false -> v_309);
  v_316 = merge ck_11_2_1 (true -> v_307)(false -> v_310);
  v_317 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_311);
  v_318 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_312);
  v_319 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_313);
  ns_1_1 = merge ck_11_1 (true -> v_314)(false -> v_317);
  ns_1_2 = merge ck_11_1 (true -> v_315)(false -> v_318);
  ns_1_3 = merge ck_11_1 (true -> v_316)(false -> v_319);
  v_320 =
    merge ck_11_3_1_1 (true -> nr_1_St_11_Max)(false -> nr_1_St_11_Max_Up);
  v_321 =
    merge ck_11_3_1_0
      (true -> 
        (((true when true(ck_11_1)) when false(ck_11_2_1))
          when true(ck_11_3_1_0)))
      (false -> nr_1_St_11_Min);
  v_322 = merge ck_11_2_1 (true -> v_320)(false -> v_321);
  v_323 =
    merge ck_11_3_0_0 (true -> nr_1_St_11_Off)(false -> nr_1_St_11_Off_Up);
  v_324 =
    merge ck_11_2_0
      (true -> ((true when false(ck_11_1)) when true(ck_11_2_0)))
      (false -> v_323);
  nr_1 = merge ck_11_1 (true -> v_322)(false -> v_324);
  ck_11_3_1_1 = ((ck_11_3 when true(ck_11_1)) when true(ck_11_2_1));
  ck_11_3_1_0 = ((ck_11_3 when true(ck_11_1)) when false(ck_11_2_1));
  ck_11_2_1 = (ck_11_2 when true(ck_11_1));
  ck_11_3_0_1 = ((ck_11_3 when false(ck_11_1)) when true(ck_11_2_0));
  ck_11_3_0_0 = ((ck_11_3 when false(ck_11_1)) when false(ck_11_2_0));
  ck_11_2_0 = (ck_11_2 when false(ck_11_1));
  ns_1_St_11_Off_3_1_1 =
    ((ns_1_St_11_Off_3 when true(ns_1_St_11_Off_1))
      when true(ns_1_St_11_Off_2_1));
  ns_1_St_11_Off_3_1_0 =
    ((ns_1_St_11_Off_3 when true(ns_1_St_11_Off_1))
      when false(ns_1_St_11_Off_2_1));
  ns_1_St_11_Off_2_1 = (ns_1_St_11_Off_2 when true(ns_1_St_11_Off_1));
  ns_1_St_11_Off_3_0_1 =
    ((ns_1_St_11_Off_3 when false(ns_1_St_11_Off_1))
      when true(ns_1_St_11_Off_2_0));
  ns_1_St_11_Off_3_0_0 =
    ((ns_1_St_11_Off_3 when false(ns_1_St_11_Off_1))
      when false(ns_1_St_11_Off_2_0));
  ns_1_St_11_Off_2_0 = (ns_1_St_11_Off_2 when false(ns_1_St_11_Off_1));
  ns_1_St_11_Off_Up_3_1_1 =
    ((ns_1_St_11_Off_Up_3 when true(ns_1_St_11_Off_Up_1))
      when true(ns_1_St_11_Off_Up_2_1));
  ns_1_St_11_Off_Up_3_1_0 =
    ((ns_1_St_11_Off_Up_3 when true(ns_1_St_11_Off_Up_1))
      when false(ns_1_St_11_Off_Up_2_1));
  ns_1_St_11_Off_Up_2_1 =
    (ns_1_St_11_Off_Up_2 when true(ns_1_St_11_Off_Up_1));
  ns_1_St_11_Off_Up_3_0_1 =
    ((ns_1_St_11_Off_Up_3 when false(ns_1_St_11_Off_Up_1))
      when true(ns_1_St_11_Off_Up_2_0));
  ns_1_St_11_Off_Up_3_0_0 =
    ((ns_1_St_11_Off_Up_3 when false(ns_1_St_11_Off_Up_1))
      when false(ns_1_St_11_Off_Up_2_0));
  ns_1_St_11_Off_Up_2_0 =
    (ns_1_St_11_Off_Up_2 when false(ns_1_St_11_Off_Up_1));
  ns_1_St_11_Min_3_1_1 =
    ((ns_1_St_11_Min_3 when true(ns_1_St_11_Min_1))
      when true(ns_1_St_11_Min_2_1));
  ns_1_St_11_Min_3_1_0 =
    ((ns_1_St_11_Min_3 when true(ns_1_St_11_Min_1))
      when false(ns_1_St_11_Min_2_1));
  ns_1_St_11_Min_2_1 = (ns_1_St_11_Min_2 when true(ns_1_St_11_Min_1));
  ns_1_St_11_Min_3_0_1 =
    ((ns_1_St_11_Min_3 when false(ns_1_St_11_Min_1))
      when true(ns_1_St_11_Min_2_0));
  ns_1_St_11_Min_3_0_0 =
    ((ns_1_St_11_Min_3 when false(ns_1_St_11_Min_1))
      when false(ns_1_St_11_Min_2_0));
  ns_1_St_11_Min_2_0 = (ns_1_St_11_Min_2 when false(ns_1_St_11_Min_1));
  ns_1_St_11_Max_3_1_1 =
    ((ns_1_St_11_Max_3 when true(ns_1_St_11_Max_1))
      when true(ns_1_St_11_Max_2_1));
  ns_1_St_11_Max_3_1_0 =
    ((ns_1_St_11_Max_3 when true(ns_1_St_11_Max_1))
      when false(ns_1_St_11_Max_2_1));
  ns_1_St_11_Max_2_1 = (ns_1_St_11_Max_2 when true(ns_1_St_11_Max_1));
  ns_1_St_11_Max_3_0_1 =
    ((ns_1_St_11_Max_3 when false(ns_1_St_11_Max_1))
      when true(ns_1_St_11_Max_2_0));
  ns_1_St_11_Max_3_0_0 =
    ((ns_1_St_11_Max_3 when false(ns_1_St_11_Max_1))
      when false(ns_1_St_11_Max_2_0));
  ns_1_St_11_Max_2_0 = (ns_1_St_11_Max_2 when false(ns_1_St_11_Max_1));
  ns_1_St_11_Max_Up_3_1_1 =
    ((ns_1_St_11_Max_Up_3 when true(ns_1_St_11_Max_Up_1))
      when true(ns_1_St_11_Max_Up_2_1));
  ns_1_St_11_Max_Up_3_1_0 =
    ((ns_1_St_11_Max_Up_3 when true(ns_1_St_11_Max_Up_1))
      when false(ns_1_St_11_Max_Up_2_1));
  ns_1_St_11_Max_Up_2_1 =
    (ns_1_St_11_Max_Up_2 when true(ns_1_St_11_Max_Up_1));
  ns_1_St_11_Max_Up_3_0_1 =
    ((ns_1_St_11_Max_Up_3 when false(ns_1_St_11_Max_Up_1))
      when true(ns_1_St_11_Max_Up_2_0));
  ns_1_St_11_Max_Up_3_0_0 =
    ((ns_1_St_11_Max_Up_3 when false(ns_1_St_11_Max_Up_1))
      when false(ns_1_St_11_Max_Up_2_0));
  ns_1_St_11_Max_Up_2_0 =
    (ns_1_St_11_Max_Up_2 when false(ns_1_St_11_Max_Up_1));
  v_325 = false fby ns_1_1;
  v_326 = false fby ns_1_2;
  v_327 = true fby ns_1_3;
  ck_1 = v_325;
  ck_2 = v_326;
  ck_3 = v_327;
  r_1_St_11_Off = if v_71 then true else v_74;
  s_1_St_11_Off_1 = if v_71 then true else v_73_1;
  s_1_St_11_Off_2 = if v_71 then false else v_73_2;
  s_1_St_11_Off_3 = if v_71 then false else v_73_3;
  v_74 =
    if v_72
    then true
    else (((pnr_1 when false(ck_1)) when false(ck_2_0)) when true(ck_3_0_0));
  v_73_1 = if v_72 then true else false;
  v_73_2 = if v_72 then true else false;
  v_73_3 = if v_72 then true else true;
  v_72 =
    not((((c2_1 when false(ck_1)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_71 = (v_69 or v_70);
  v_70 =
    ((((up_1 when false(ck_1)) when false(ck_2_0)) when true(ck_3_0_0)) &
     (((c_up_1 when false(ck_1)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_69 =
    not((((c1_1 when false(ck_1)) when false(ck_2_0)) when true(ck_3_0_0)));
  v_73_3_1_1 = ((v_73_3 when true(v_73_1)) when true(v_73_2_1));
  v_73_3_1_0 = ((v_73_3 when true(v_73_1)) when false(v_73_2_1));
  v_73_2_1 = (v_73_2 when true(v_73_1));
  v_73_3_0_1 = ((v_73_3 when false(v_73_1)) when true(v_73_2_0));
  v_73_3_0_0 = ((v_73_3 when false(v_73_1)) when false(v_73_2_0));
  v_73_2_0 = (v_73_2 when false(v_73_1));
  r_1_St_11_Off_Up = if v_63 then true else v_68;
  s_1_St_11_Off_Up_1 = if v_63 then false else v_67_1;
  s_1_St_11_Off_Up_2 = if v_63 then false else v_67_2;
  s_1_St_11_Off_Up_3 = if v_63 then true else v_67_3;
  v_68 =
    if v_66
    then true
    else (((pnr_1 when false(ck_1)) when false(ck_2_0)) when false(ck_3_0_0));
  v_67_1 = if v_66 then false else false;
  v_67_2 = if v_66 then false else false;
  v_67_3 = if v_66 then true else false;
  v_66 = (v_64 & v_65);
  v_65 =
    not
    ((((shift_1 when false(ck_1)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_64 =
    not
    ((((ar_fail_1 when false(ck_1)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_63 =
    (v_62 &
     (((shift_1 when false(ck_1)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_62 =
    not
    ((((ar_fail_1 when false(ck_1)) when false(ck_2_0)) when false(ck_3_0_0)));
  v_67_3_1_1 = ((v_67_3 when true(v_67_1)) when true(v_67_2_1));
  v_67_3_1_0 = ((v_67_3 when true(v_67_1)) when false(v_67_2_1));
  v_67_2_1 = (v_67_2 when true(v_67_1));
  v_67_3_0_1 = ((v_67_3 when false(v_67_1)) when true(v_67_2_0));
  v_67_3_0_0 = ((v_67_3 when false(v_67_1)) when false(v_67_2_0));
  v_67_2_0 = (v_67_2 when false(v_67_1));
  r_1_St_11_Min = if v_56 then true else v_61;
  s_1_St_11_Min_1 = if v_56 then false else v_60_1;
  s_1_St_11_Min_2 = if v_56 then false else v_60_2;
  s_1_St_11_Min_3 = if v_56 then true else v_60_3;
  v_61 =
    if v_59
    then true
    else (((pnr_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0));
  v_60_1 = if v_59 then true else true;
  v_60_2 = if v_59 then true else false;
  v_60_3 = if v_59 then true else false;
  v_59 = (v_57 or v_58);
  v_58 =
    ((((up_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_up_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_57 =
    not((((c2_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_56 = (v_54 or v_55);
  v_55 =
    ((((down_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)) &
     (((c_down_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_54 =
    not((((c1_1 when true(ck_1)) when false(ck_2_1)) when false(ck_3_1_0)));
  v_60_3_1_1 = ((v_60_3 when true(v_60_1)) when true(v_60_2_1));
  v_60_3_1_0 = ((v_60_3 when true(v_60_1)) when false(v_60_2_1));
  v_60_2_1 = (v_60_2 when true(v_60_1));
  v_60_3_0_1 = ((v_60_3 when false(v_60_1)) when true(v_60_2_0));
  v_60_3_0_0 = ((v_60_3 when false(v_60_1)) when false(v_60_2_0));
  v_60_2_0 = (v_60_2 when false(v_60_1));
  r_1_St_11_Max = if v_50 then true else v_53;
  s_1_St_11_Max_1 = if v_50 then true else v_52_1;
  s_1_St_11_Max_2 = if v_50 then false else v_52_2;
  s_1_St_11_Max_3 = if v_50 then false else v_52_3;
  v_53 =
    if v_51
    then true
    else (((pnr_1 when true(ck_1)) when true(ck_2_1)) when true(ck_3_1_1));
  v_52_1 = if v_51 then false else true;
  v_52_2 = if v_51 then false else true;
  v_52_3 = if v_51 then true else true;
  v_51 =
    not((((c2_1 when true(ck_1)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_50 = (v_48 or v_49);
  v_49 =
    ((((down_1 when true(ck_1)) when true(ck_2_1)) when true(ck_3_1_1)) &
     (((c_down_1 when true(ck_1)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_48 =
    not((((c1_1 when true(ck_1)) when true(ck_2_1)) when true(ck_3_1_1)));
  v_52_3_1_1 = ((v_52_3 when true(v_52_1)) when true(v_52_2_1));
  v_52_3_1_0 = ((v_52_3 when true(v_52_1)) when false(v_52_2_1));
  v_52_2_1 = (v_52_2 when true(v_52_1));
  v_52_3_0_1 = ((v_52_3 when false(v_52_1)) when true(v_52_2_0));
  v_52_3_0_0 = ((v_52_3 when false(v_52_1)) when false(v_52_2_0));
  v_52_2_0 = (v_52_2 when false(v_52_1));
  r_1_St_11_Max_Up = if v_42 then true else v_47;
  s_1_St_11_Max_Up_1 = if v_42 then false else v_46_1;
  s_1_St_11_Max_Up_2 = if v_42 then false else v_46_2;
  s_1_St_11_Max_Up_3 = if v_42 then true else v_46_3;
  v_47 =
    if v_45
    then true
    else (((pnr_1 when true(ck_1)) when true(ck_2_1)) when false(ck_3_1_1));
  v_46_1 = if v_45 then false else true;
  v_46_2 = if v_45 then false else true;
  v_46_3 = if v_45 then true else false;
  v_45 = (v_43 & v_44);
  v_44 =
    not((((shift_1 when true(ck_1)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_43 =
    not
    ((((ar_fail_1 when true(ck_1)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_42 =
    (v &
     (((shift_1 when true(ck_1)) when true(ck_2_1)) when false(ck_3_1_1)));
  v =
    not
    ((((ar_fail_1 when true(ck_1)) when true(ck_2_1)) when false(ck_3_1_1)));
  v_46_3_1_1 = ((v_46_3 when true(v_46_1)) when true(v_46_2_1));
  v_46_3_1_0 = ((v_46_3 when true(v_46_1)) when false(v_46_2_1));
  v_46_2_1 = (v_46_2 when true(v_46_1));
  v_46_3_0_1 = ((v_46_3 when false(v_46_1)) when true(v_46_2_0));
  v_46_3_0_0 = ((v_46_3 when false(v_46_1)) when false(v_46_2_0));
  v_46_2_0 = (v_46_2 when false(v_46_1));
  v_328 =
    merge ck_3_1_1 (true -> s_1_St_11_Max_1)(false -> s_1_St_11_Max_Up_1);
  v_329 =
    merge ck_3_1_1 (true -> s_1_St_11_Max_2)(false -> s_1_St_11_Max_Up_2);
  v_330 =
    merge ck_3_1_1 (true -> s_1_St_11_Max_3)(false -> s_1_St_11_Max_Up_3);
  v_331 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_1_St_11_Min_1);
  v_332 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_1_St_11_Min_2);
  v_333 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> s_1_St_11_Min_3);
  v_334 =
    merge ck_3_0_0 (true -> s_1_St_11_Off_1)(false -> s_1_St_11_Off_Up_1);
  v_335 =
    merge ck_3_0_0 (true -> s_1_St_11_Off_2)(false -> s_1_St_11_Off_Up_2);
  v_336 =
    merge ck_3_0_0 (true -> s_1_St_11_Off_3)(false -> s_1_St_11_Off_Up_3);
  v_337 = merge ck_2_1 (true -> v_328)(false -> v_331);
  v_338 = merge ck_2_1 (true -> v_329)(false -> v_332);
  v_339 = merge ck_2_1 (true -> v_330)(false -> v_333);
  v_340 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))(false -> v_334);
  v_341 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))(false -> v_335);
  v_342 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))(false -> v_336);
  s_1_1 = merge ck_1 (true -> v_337)(false -> v_340);
  s_1_2 = merge ck_1 (true -> v_338)(false -> v_341);
  s_1_3 = merge ck_1 (true -> v_339)(false -> v_342);
  v_343 = merge ck_3_1_1 (true -> r_1_St_11_Max)(false -> r_1_St_11_Max_Up);
  v_344 =
    merge ck_3_1_0
      (true -> 
        (((true when true(ck_1)) when false(ck_2_1)) when true(ck_3_1_0)))
      (false -> r_1_St_11_Min);
  v_345 = merge ck_2_1 (true -> v_343)(false -> v_344);
  v_346 = merge ck_3_0_0 (true -> r_1_St_11_Off)(false -> r_1_St_11_Off_Up);
  v_347 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))(false -> v_346);
  r_1 = merge ck_1 (true -> v_345)(false -> v_347);
  ck_3_1_1 = ((ck_3 when true(ck_1)) when true(ck_2_1));
  ck_3_1_0 = ((ck_3 when true(ck_1)) when false(ck_2_1));
  ck_2_1 = (ck_2 when true(ck_1));
  ck_3_0_1 = ((ck_3 when false(ck_1)) when true(ck_2_0));
  ck_3_0_0 = ((ck_3 when false(ck_1)) when false(ck_2_0));
  ck_2_0 = (ck_2 when false(ck_1));
  s_1_St_11_Off_3_1_1 =
    ((s_1_St_11_Off_3 when true(s_1_St_11_Off_1))
      when true(s_1_St_11_Off_2_1));
  s_1_St_11_Off_3_1_0 =
    ((s_1_St_11_Off_3 when true(s_1_St_11_Off_1))
      when false(s_1_St_11_Off_2_1));
  s_1_St_11_Off_2_1 = (s_1_St_11_Off_2 when true(s_1_St_11_Off_1));
  s_1_St_11_Off_3_0_1 =
    ((s_1_St_11_Off_3 when false(s_1_St_11_Off_1))
      when true(s_1_St_11_Off_2_0));
  s_1_St_11_Off_3_0_0 =
    ((s_1_St_11_Off_3 when false(s_1_St_11_Off_1))
      when false(s_1_St_11_Off_2_0));
  s_1_St_11_Off_2_0 = (s_1_St_11_Off_2 when false(s_1_St_11_Off_1));
  s_1_St_11_Off_Up_3_1_1 =
    ((s_1_St_11_Off_Up_3 when true(s_1_St_11_Off_Up_1))
      when true(s_1_St_11_Off_Up_2_1));
  s_1_St_11_Off_Up_3_1_0 =
    ((s_1_St_11_Off_Up_3 when true(s_1_St_11_Off_Up_1))
      when false(s_1_St_11_Off_Up_2_1));
  s_1_St_11_Off_Up_2_1 = (s_1_St_11_Off_Up_2 when true(s_1_St_11_Off_Up_1));
  s_1_St_11_Off_Up_3_0_1 =
    ((s_1_St_11_Off_Up_3 when false(s_1_St_11_Off_Up_1))
      when true(s_1_St_11_Off_Up_2_0));
  s_1_St_11_Off_Up_3_0_0 =
    ((s_1_St_11_Off_Up_3 when false(s_1_St_11_Off_Up_1))
      when false(s_1_St_11_Off_Up_2_0));
  s_1_St_11_Off_Up_2_0 = (s_1_St_11_Off_Up_2 when false(s_1_St_11_Off_Up_1));
  s_1_St_11_Min_3_1_1 =
    ((s_1_St_11_Min_3 when true(s_1_St_11_Min_1))
      when true(s_1_St_11_Min_2_1));
  s_1_St_11_Min_3_1_0 =
    ((s_1_St_11_Min_3 when true(s_1_St_11_Min_1))
      when false(s_1_St_11_Min_2_1));
  s_1_St_11_Min_2_1 = (s_1_St_11_Min_2 when true(s_1_St_11_Min_1));
  s_1_St_11_Min_3_0_1 =
    ((s_1_St_11_Min_3 when false(s_1_St_11_Min_1))
      when true(s_1_St_11_Min_2_0));
  s_1_St_11_Min_3_0_0 =
    ((s_1_St_11_Min_3 when false(s_1_St_11_Min_1))
      when false(s_1_St_11_Min_2_0));
  s_1_St_11_Min_2_0 = (s_1_St_11_Min_2 when false(s_1_St_11_Min_1));
  s_1_St_11_Max_3_1_1 =
    ((s_1_St_11_Max_3 when true(s_1_St_11_Max_1))
      when true(s_1_St_11_Max_2_1));
  s_1_St_11_Max_3_1_0 =
    ((s_1_St_11_Max_3 when true(s_1_St_11_Max_1))
      when false(s_1_St_11_Max_2_1));
  s_1_St_11_Max_2_1 = (s_1_St_11_Max_2 when true(s_1_St_11_Max_1));
  s_1_St_11_Max_3_0_1 =
    ((s_1_St_11_Max_3 when false(s_1_St_11_Max_1))
      when true(s_1_St_11_Max_2_0));
  s_1_St_11_Max_3_0_0 =
    ((s_1_St_11_Max_3 when false(s_1_St_11_Max_1))
      when false(s_1_St_11_Max_2_0));
  s_1_St_11_Max_2_0 = (s_1_St_11_Max_2 when false(s_1_St_11_Max_1));
  s_1_St_11_Max_Up_3_1_1 =
    ((s_1_St_11_Max_Up_3 when true(s_1_St_11_Max_Up_1))
      when true(s_1_St_11_Max_Up_2_1));
  s_1_St_11_Max_Up_3_1_0 =
    ((s_1_St_11_Max_Up_3 when true(s_1_St_11_Max_Up_1))
      when false(s_1_St_11_Max_Up_2_1));
  s_1_St_11_Max_Up_2_1 = (s_1_St_11_Max_Up_2 when true(s_1_St_11_Max_Up_1));
  s_1_St_11_Max_Up_3_0_1 =
    ((s_1_St_11_Max_Up_3 when false(s_1_St_11_Max_Up_1))
      when true(s_1_St_11_Max_Up_2_0));
  s_1_St_11_Max_Up_3_0_0 =
    ((s_1_St_11_Max_Up_3 when false(s_1_St_11_Max_Up_1))
      when false(s_1_St_11_Max_Up_2_0));
  s_1_St_11_Max_Up_2_0 = (s_1_St_11_Max_Up_2 when false(s_1_St_11_Max_Up_1));
  policy = policy_1;
  pers = pers_1;
  lamp = lamp_1;
  failed = failed_1;
  ns_1_3_1_1 = ((ns_1_3 when true(ns_1_1)) when true(ns_1_2_1));
  ns_1_3_1_0 = ((ns_1_3 when true(ns_1_1)) when false(ns_1_2_1));
  ns_1_2_1 = (ns_1_2 when true(ns_1_1));
  ns_1_3_0_1 = ((ns_1_3 when false(ns_1_1)) when true(ns_1_2_0));
  ns_1_3_0_0 = ((ns_1_3 when false(ns_1_1)) when false(ns_1_2_0));
  ns_1_2_0 = (ns_1_2 when false(ns_1_1));
  s_1_3_1_1 = ((s_1_3 when true(s_1_1)) when true(s_1_2_1));
  s_1_3_1_0 = ((s_1_3 when true(s_1_1)) when false(s_1_2_1));
  s_1_2_1 = (s_1_2 when true(s_1_1));
  s_1_3_0_1 = ((s_1_3 when false(s_1_1)) when true(s_1_2_0));
  s_1_3_0_0 = ((s_1_3 when false(s_1_1)) when false(s_1_2_0));
  s_1_2_0 = (s_1_2 when false(s_1_1))
tel

node ar_failed(c1 : bool; c2 : bool; falhou : bool; recuperou : bool)
returns (ar_state : int; working : bool)
var nr_St_12_Falha : bool; ns_St_12_Falha_1 : bool;
    failed_St_12_Falha : bool; nr_St_12_Funcionando : bool;
    ns_St_12_Funcionando_1 : bool; failed_St_12_Funcionando : bool;
    ck_16_1 : bool; r_St_12_Falha : bool; s_St_12_Falha_1 : bool;
    r_St_12_Funcionando : bool; s_St_12_Funcionando_1 : bool; ck_15_1 : bool;
    v_355 : bool; v_354 : bool; v_353 : bool; v_352 : bool; v_351 : bool;
    v_350 : bool; v_349 : int; v_348 : int; ns_2_St_13_Max_2_0 : bool;
    ns_2_St_13_Max_2_1 : bool; ns_2_St_13_Min_2_0 : bool;
    ns_2_St_13_Min_2_1 : bool; ns_2_St_13_Off_2_0 : bool;
    ns_2_St_13_Off_2_1 : bool; ck_14_2_0 : bool; ck_14_2_1 : bool;
    nr_2_St_13_Max : bool; ns_2_St_13_Max_2 : bool; ns_2_St_13_Max_1 : bool;
    ar_state_1_St_13_Max : int; nr_2_St_13_Min : bool;
    ns_2_St_13_Min_2 : bool; ns_2_St_13_Min_1 : bool;
    ar_state_1_St_13_Min : int; nr_2_St_13_Off : bool;
    ns_2_St_13_Off_2 : bool; ns_2_St_13_Off_1 : bool;
    ar_state_1_St_13_Off : int; ck_14_2 : bool; ck_14_1 : bool;
    v_81_2_0 : bool; v_81_2_1 : bool; v_82 : bool; v_81_2 : bool;
    v_81_1 : bool; v_79_2_0 : bool; v_79_2_1 : bool; v_80 : bool;
    v_79_2 : bool; v_79_1 : bool; v_78 : bool; v_76_2_0 : bool;
    v_76_2_1 : bool; v_77 : bool; v_76_2 : bool; v_76_1 : bool; v_75 : bool;
    v : bool; v_363 : bool; v_362 : bool; v_361 : bool; v_360 : bool;
    v_359 : bool; v_358 : bool; v_357 : bool; v_356 : bool;
    s_2_St_13_Max_2_0 : bool; s_2_St_13_Max_2_1 : bool;
    s_2_St_13_Min_2_0 : bool; s_2_St_13_Min_2_1 : bool;
    s_2_St_13_Off_2_0 : bool; s_2_St_13_Off_2_1 : bool; ck_2_0 : bool;
    ck_2_1 : bool; r_2_St_13_Max : bool; s_2_St_13_Max_2 : bool;
    s_2_St_13_Max_1 : bool; r_2_St_13_Min : bool; s_2_St_13_Min_2 : bool;
    s_2_St_13_Min_1 : bool; r_2_St_13_Off : bool; s_2_St_13_Off_2 : bool;
    s_2_St_13_Off_1 : bool; ck_2 : bool; ck_1 : bool; s_2_2_0 : bool;
    s_2_2_1 : bool; ns_2_2_0 : bool; ns_2_2_1 : bool; s_2_2 : bool;
    s_2_1 : bool; ns_2_2 : bool; ns_2_1 : bool; r_2 : bool; nr_2 : bool;
    pnr_2 : bool; s_1 : bool; ns_1 : bool; r : bool; nr : bool; pnr : bool;
    falhou_2 : bool; recuperou_2 : bool; failed : bool; c1_2 : bool;
    c2_2 : bool; ar_state_1 : int;
let
  falhou_2 = falhou;
  recuperou_2 = recuperou;
  pnr = false fby nr;
  ck_16_1 = s_1;
  failed_St_12_Funcionando = false;
  nr_St_12_Funcionando = false;
  ns_St_12_Funcionando_1 = false;
  failed_St_12_Falha = true;
  nr_St_12_Falha = false;
  ns_St_12_Falha_1 = true;
  failed =
    merge ck_16_1
      (true -> failed_St_12_Falha)(false -> failed_St_12_Funcionando);
  ns_1 =
    merge ck_16_1 (true -> ns_St_12_Falha_1)(false -> ns_St_12_Funcionando_1);
  nr = merge ck_16_1 (true -> nr_St_12_Falha)(false -> nr_St_12_Funcionando);
  ck_15_1 = false fby ns_1;
  r_St_12_Funcionando =
    if (falhou_2 when false(ck_15_1))
    then true
    else (pnr when false(ck_15_1));
  s_St_12_Funcionando_1 =
    if (falhou_2 when false(ck_15_1)) then true else false;
  r_St_12_Falha =
    if (recuperou_2 when true(ck_15_1))
    then true
    else (pnr when true(ck_15_1));
  s_St_12_Falha_1 = if (recuperou_2 when true(ck_15_1)) then false else true;
  s_1 =
    merge ck_15_1 (true -> s_St_12_Falha_1)(false -> s_St_12_Funcionando_1);
  r = merge ck_15_1 (true -> r_St_12_Falha)(false -> r_St_12_Funcionando);
  c1_2 = c1;
  c2_2 = c2;
  pnr_2 = false fby nr_2;
  ck_14_1 = s_2_1;
  ck_14_2 = s_2_2;
  ar_state_1_St_13_Off = 0;
  nr_2_St_13_Off = false;
  ns_2_St_13_Off_1 = false;
  ns_2_St_13_Off_2 = false;
  ar_state_1_St_13_Min = 1;
  nr_2_St_13_Min = false;
  ns_2_St_13_Min_1 = true;
  ns_2_St_13_Min_2 = false;
  ar_state_1_St_13_Max = 2;
  nr_2_St_13_Max = false;
  ns_2_St_13_Max_1 = true;
  ns_2_St_13_Max_2 = true;
  v_348 =
    merge ck_14_2_1
      (true -> ar_state_1_St_13_Max)(false -> ar_state_1_St_13_Min);
  v_349 =
    merge ck_14_2_0
      (true -> ((0 when false(ck_14_1)) when true(ck_14_2_0)))
      (false -> ar_state_1_St_13_Off);
  ar_state_1 = merge ck_14_1 (true -> v_348)(false -> v_349);
  v_350 =
    merge ck_14_2_1 (true -> ns_2_St_13_Max_1)(false -> ns_2_St_13_Min_1);
  v_351 =
    merge ck_14_2_1 (true -> ns_2_St_13_Max_2)(false -> ns_2_St_13_Min_2);
  v_352 =
    merge ck_14_2_0
      (true -> ((true when false(ck_14_1)) when true(ck_14_2_0)))
      (false -> ns_2_St_13_Off_1);
  v_353 =
    merge ck_14_2_0
      (true -> ((true when false(ck_14_1)) when true(ck_14_2_0)))
      (false -> ns_2_St_13_Off_2);
  ns_2_1 = merge ck_14_1 (true -> v_350)(false -> v_352);
  ns_2_2 = merge ck_14_1 (true -> v_351)(false -> v_353);
  v_354 = merge ck_14_2_1 (true -> nr_2_St_13_Max)(false -> nr_2_St_13_Min);
  v_355 =
    merge ck_14_2_0
      (true -> ((true when false(ck_14_1)) when true(ck_14_2_0)))
      (false -> nr_2_St_13_Off);
  nr_2 = merge ck_14_1 (true -> v_354)(false -> v_355);
  ck_14_2_1 = (ck_14_2 when true(ck_14_1));
  ck_14_2_0 = (ck_14_2 when false(ck_14_1));
  ns_2_St_13_Off_2_1 = (ns_2_St_13_Off_2 when true(ns_2_St_13_Off_1));
  ns_2_St_13_Off_2_0 = (ns_2_St_13_Off_2 when false(ns_2_St_13_Off_1));
  ns_2_St_13_Min_2_1 = (ns_2_St_13_Min_2 when true(ns_2_St_13_Min_1));
  ns_2_St_13_Min_2_0 = (ns_2_St_13_Min_2 when false(ns_2_St_13_Min_1));
  ns_2_St_13_Max_2_1 = (ns_2_St_13_Max_2 when true(ns_2_St_13_Max_1));
  ns_2_St_13_Max_2_0 = (ns_2_St_13_Max_2 when false(ns_2_St_13_Max_1));
  v_356 = false fby ns_2_1;
  v_357 = false fby ns_2_2;
  ck_1 = v_356;
  ck_2 = v_357;
  r_2_St_13_Off =
    if ((c1_2 when false(ck_1)) when false(ck_2_0)) then true else v_82;
  s_2_St_13_Off_1 =
    if ((c1_2 when false(ck_1)) when false(ck_2_0)) then true else v_81_1;
  s_2_St_13_Off_2 =
    if ((c1_2 when false(ck_1)) when false(ck_2_0)) then false else v_81_2;
  v_82 =
    if ((c2_2 when false(ck_1)) when false(ck_2_0))
    then true
    else ((pnr_2 when false(ck_1)) when false(ck_2_0));
  v_81_1 =
    if ((c2_2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_81_2 =
    if ((c2_2 when false(ck_1)) when false(ck_2_0)) then true else false;
  v_81_2_1 = (v_81_2 when true(v_81_1));
  v_81_2_0 = (v_81_2 when false(v_81_1));
  r_2_St_13_Min = if v_78 then true else v_80;
  s_2_St_13_Min_1 = if v_78 then false else v_79_1;
  s_2_St_13_Min_2 = if v_78 then false else v_79_2;
  v_80 =
    if ((c2_2 when true(ck_1)) when false(ck_2_1))
    then true
    else ((pnr_2 when true(ck_1)) when false(ck_2_1));
  v_79_1 = if ((c2_2 when true(ck_1)) when false(ck_2_1)) then true else true;
  v_79_2 =
    if ((c2_2 when true(ck_1)) when false(ck_2_1)) then true else false;
  v_78 = not(((c1_2 when true(ck_1)) when false(ck_2_1)));
  v_79_2_1 = (v_79_2 when true(v_79_1));
  v_79_2_0 = (v_79_2 when false(v_79_1));
  r_2_St_13_Max = if v then true else v_77;
  s_2_St_13_Max_1 = if v then true else v_76_1;
  s_2_St_13_Max_2 = if v then false else v_76_2;
  v_77 = if v_75 then true else ((pnr_2 when true(ck_1)) when true(ck_2_1));
  v_76_1 = if v_75 then false else true;
  v_76_2 = if v_75 then false else true;
  v_75 = not(((c2_2 when true(ck_1)) when true(ck_2_1)));
  v = not(((c1_2 when true(ck_1)) when true(ck_2_1)));
  v_76_2_1 = (v_76_2 when true(v_76_1));
  v_76_2_0 = (v_76_2 when false(v_76_1));
  v_358 = merge ck_2_1 (true -> s_2_St_13_Max_1)(false -> s_2_St_13_Min_1);
  v_359 = merge ck_2_1 (true -> s_2_St_13_Max_2)(false -> s_2_St_13_Min_2);
  v_360 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_2_St_13_Off_1);
  v_361 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> s_2_St_13_Off_2);
  s_2_1 = merge ck_1 (true -> v_358)(false -> v_360);
  s_2_2 = merge ck_1 (true -> v_359)(false -> v_361);
  v_362 = merge ck_2_1 (true -> r_2_St_13_Max)(false -> r_2_St_13_Min);
  v_363 =
    merge ck_2_0
      (true -> ((true when false(ck_1)) when true(ck_2_0)))
      (false -> r_2_St_13_Off);
  r_2 = merge ck_1 (true -> v_362)(false -> v_363);
  ck_2_1 = (ck_2 when true(ck_1));
  ck_2_0 = (ck_2 when false(ck_1));
  s_2_St_13_Off_2_1 = (s_2_St_13_Off_2 when true(s_2_St_13_Off_1));
  s_2_St_13_Off_2_0 = (s_2_St_13_Off_2 when false(s_2_St_13_Off_1));
  s_2_St_13_Min_2_1 = (s_2_St_13_Min_2 when true(s_2_St_13_Min_1));
  s_2_St_13_Min_2_0 = (s_2_St_13_Min_2 when false(s_2_St_13_Min_1));
  s_2_St_13_Max_2_1 = (s_2_St_13_Max_2 when true(s_2_St_13_Max_1));
  s_2_St_13_Max_2_0 = (s_2_St_13_Max_2 when false(s_2_St_13_Max_1));
  ar_state = ar_state_1;
  working = failed;
  ns_2_2_1 = (ns_2_2 when true(ns_2_1));
  ns_2_2_0 = (ns_2_2 when false(ns_2_1));
  s_2_2_1 = (s_2_2 when true(s_2_1));
  s_2_2_0 = (s_2_2 when false(s_2_1))
tel

node controller(up : bool; down : bool; shift_turno : bool;
                 abre_porta : bool; p_arrived : bool; p1_arrived : bool;
                 ar_failed : bool; ar_recovered : bool; l_failed : bool;
                 l_recovered : bool)
returns (night : bool; p_open : bool; r_on1 : bool; presence : bool;
          presence_t : bool; pc_on : bool; w_open : bool; arm_open : bool;
          ar_fail : bool; l_fail : bool; lamp : int; pers : int;
          ar_state : int; mopa : int)
contract
  var rule7 : bool; rule6 : bool; rule5 : bool; rule4 : bool; rule3 : bool;
      rule2 : bool; rule1_5 : bool; rule1 : bool; rule0 : bool; v : bool;
      v_83 : bool; v_84 : bool; v_85 : bool; v_86 : bool; v_87 : bool;
      v_88 : bool; v_89 : bool; v_90 : bool; v_91 : bool; v_92 : bool;
      v_93 : bool; v_94 : bool; v_95 : bool; v_96 : bool; v_97 : bool;
      v_98 : bool; v_99 : bool; v_100 : bool; v_101 : bool; v_102 : bool;
      v_103 : bool; v_104 : bool; v_105 : bool; v_106 : bool; v_107 : bool;
      v_108 : bool; v_109 : bool; v_110 : bool; v_111 : bool; v_112 : bool;
      v_113 : bool; v_114 : bool; v_115 : bool; v_116 : bool; v_117 : bool;
      v_118 : bool; v_119 : bool; v_120 : bool; v_121 : bool; v_122 : bool;
      v_123 : bool; v_124 : bool; v_125 : bool; v_126 : bool; v_127 : bool;
      v_128 : bool; v_129 : bool; v_130 : bool; v_131 : bool; v_132 : bool;
      v_133 : bool; v_134 : bool; v_135 : bool; v_136 : bool; v_137 : bool;
      v_138 : bool; v_139 : bool; v_140 : bool; v_141 : bool; v_142 : bool;
      v_143 : bool; v_144 : bool; v_145 : bool; v_146 : bool; v_147 : bool;
      v_148 : bool; v_149 : bool; v_150 : bool; v_151 : bool; v_152 : bool;
      v_153 : bool; v_154 : bool; v_155 : bool; v_156 : bool; v_157 : bool;
      v_158 : bool; v_159 : bool; v_160 : bool; v_161 : bool; v_162 : bool;
      v_163 : bool; v_164 : bool; v_165 : bool; v_166 : bool; v_167 : bool;
  let
    v = not(ar_fail);
    v_83 = (ar_state = 0);
    v_84 = (v_83 & w_open);
    rule7 = (v or v_84);
    v_85 = not(ar_fail);
    v_86 = (presence_t & v_85);
    v_87 = not(v_86);
    v_88 = not(r_on1);
    v_89 = not(pc_on);
    v_90 = (v_88 & v_89);
    v_91 = (p_open & v_90);
    v_92 = (v_91 & arm_open);
    v_93 = (ar_state = 1);
    v_94 = (v_92 & v_93);
    rule6 = (v_87 or v_94);
    v_95 = not(night);
    v_96 = (presence & v_95);
    v_97 = (v_96 & pc_on);
    v_98 = not(w_open);
    v_99 = (v_97 & v_98);
    v_100 = not(ar_fail);
    v_101 = (v_99 & v_100);
    v_102 = not(v_101);
    v_103 = (ar_state = 2);
    rule5 = (v_102 or v_103);
    v_104 = not(presence);
    v_105 = not(presence_t);
    v_106 = (v_104 & v_105);
    v_107 = not(night);
    v_108 = (v_106 & v_107);
    v_109 = not(ar_fail);
    v_110 = (v_108 & v_109);
    v_111 = not(v_110);
    v_112 = not(r_on1);
    v_113 = not(pc_on);
    v_114 = (v_112 & v_113);
    v_115 = not(w_open);
    v_116 = (v_114 & v_115);
    v_117 = (p_open & v_116);
    v_118 = (ar_state = 0);
    v_119 = (v_117 & v_118);
    rule4 = (v_111 or v_119);
    v_120 = not(presence);
    v_121 = not(presence_t);
    v_122 = (v_120 & v_121);
    v_123 = (v_122 & night);
    v_124 = not(ar_fail);
    v_125 = (v_123 & v_124);
    v_126 = not(v_125);
    v_127 = not(p_open);
    v_128 = not(r_on1);
    v_129 = not(pc_on);
    v_130 = (v_128 & v_129);
    v_131 = not(w_open);
    v_132 = (v_130 & v_131);
    v_133 = (v_127 & v_132);
    v_134 = (ar_state = 0);
    v_135 = (v_133 & v_134);
    rule3 = (v_126 or v_135);
    v_136 = (presence or presence_t);
    v_137 = not(night);
    v_138 = (v_136 & v_137);
    v_139 = not(v_138);
    rule2 = (v_139 or p_open);
    v_140 = (presence or presence_t);
    v_141 = (v_140 & night);
    v_142 = (l_fail or ar_fail);
    v_143 = (v_141 & v_142);
    v_144 = not(v_143);
    v_145 = (lamp = 0);
    v_146 = (v_145 & p_open);
    rule1_5 = (v_144 or v_146);
    v_147 = (presence or presence_t);
    v_148 = (v_147 & night);
    v_149 = not(l_fail);
    v_150 = (v_148 & v_149);
    v_151 = not(ar_fail);
    v_152 = (v_150 & v_151);
    v_153 = not(v_152);
    v_154 = (lamp = 2);
    v_155 = (v_154 & p_open);
    rule1 = (v_153 or v_155);
    v_156 = not(night);
    v_157 = (l_fail & v_156);
    v_158 = not(v_157);
    v_159 = (lamp = 0);
    rule0 = (v_158 or v_159);
    v_160 = (rule0 & rule1);
    v_161 = (v_160 & rule1_5);
    v_162 = (v_161 & rule2);
    v_163 = (v_162 & rule3);
    v_164 = (v_163 & rule4);
    v_165 = (v_164 & rule5);
    v_166 = (v_165 & rule6);
    v_167 = (v_166 & rule7)
  tel
  assume true@ enforce v_167]
                 with (cdown : bool; cup : bool; cl2 : bool; cl1 : bool;
                        c_policy : bool; c_arm : bool; c_ar2 : bool;
                        c_ar1 : bool; c_luz2 : bool; c_luz1 : bool;
                        c_jan : bool; c_pc : bool; c_rot : bool;
                        c_porta : bool)
                 var nr_St_14_Falha : bool; ns_St_14_Falha_1 : bool;
                     failed_1_St_14_Falha : bool;
                     nr_St_14_Funcionando : bool;
                     ns_St_14_Funcionando_1 : bool;
                     failed_1_St_14_Funcionando : bool; ck_39_1 : bool;
                     r_St_14_Falha : bool; s_St_14_Falha_1 : bool;
                     r_St_14_Funcionando : bool;
                     s_St_14_Funcionando_1 : bool; ck_38_1 : bool;
                     v_398 : bool; v_397 : bool; v_396 : bool; v_395 : bool;
                     v_394 : bool; v_393 : bool; v_392 : bool; v_391 : bool;
                     v_390 : bool; v_389 : bool; v_388 : bool; v_387 : bool;
                     v_386 : bool; v_385 : bool; v_384 : bool; v_383 : bool;
                     v_382 : bool; v_381 : bool; v_380 : bool; v_379 : bool;
                     v_378 : int; v_377 : int; v_376 : int; v_375 : int;
                     v_374 : int; v_373 : int; v_372 : int; v_371 : int;
                     v_370 : int; v_369 : int; v_368 : int; v_367 : int;
                     v_366 : int; v_365 : int; v_364 : int;
                     ns_3_St_15_Max_Up_2_0 : bool;
                     ns_3_St_15_Max_Up_3_0_0 : bool;
                     ns_3_St_15_Max_Up_3_0_1 : bool;
                     ns_3_St_15_Max_Up_2_1 : bool;
                     ns_3_St_15_Max_Up_3_1_0 : bool;
                     ns_3_St_15_Max_Up_3_1_1 : bool;
                     ns_3_St_15_Max_2_0 : bool; ns_3_St_15_Max_3_0_0 : bool;
                     ns_3_St_15_Max_3_0_1 : bool; ns_3_St_15_Max_2_1 : bool;
                     ns_3_St_15_Max_3_1_0 : bool;
                     ns_3_St_15_Max_3_1_1 : bool; ns_3_St_15_Min_2_0 : bool;
                     ns_3_St_15_Min_3_0_0 : bool;
                     ns_3_St_15_Min_3_0_1 : bool; ns_3_St_15_Min_2_1 : bool;
                     ns_3_St_15_Min_3_1_0 : bool;
                     ns_3_St_15_Min_3_1_1 : bool;
                     ns_3_St_15_Off_Up_2_0 : bool;
                     ns_3_St_15_Off_Up_3_0_0 : bool;
                     ns_3_St_15_Off_Up_3_0_1 : bool;
                     ns_3_St_15_Off_Up_2_1 : bool;
                     ns_3_St_15_Off_Up_3_1_0 : bool;
                     ns_3_St_15_Off_Up_3_1_1 : bool;
                     ns_3_St_15_Off_2_0 : bool; ns_3_St_15_Off_3_0_0 : bool;
                     ns_3_St_15_Off_3_0_1 : bool; ns_3_St_15_Off_2_1 : bool;
                     ns_3_St_15_Off_3_1_0 : bool;
                     ns_3_St_15_Off_3_1_1 : bool; ck_37_2_0 : bool;
                     ck_37_3_0_0 : bool; ck_37_3_0_1 : bool;
                     ck_37_2_1 : bool; ck_37_3_1_0 : bool;
                     ck_37_3_1_1 : bool; nr_3_St_15_Max_Up : bool;
                     ns_3_St_15_Max_Up_3 : bool; ns_3_St_15_Max_Up_2 : bool;
                     ns_3_St_15_Max_Up_1 : bool; policy_1_St_15_Max_Up : int;
                     pers_1_St_15_Max_Up : int; lamp_1_St_15_Max_Up : int;
                     nr_3_St_15_Max : bool; ns_3_St_15_Max_3 : bool;
                     ns_3_St_15_Max_2 : bool; ns_3_St_15_Max_1 : bool;
                     policy_1_St_15_Max : int; pers_1_St_15_Max : int;
                     lamp_1_St_15_Max : int; nr_3_St_15_Min : bool;
                     ns_3_St_15_Min_3 : bool; ns_3_St_15_Min_2 : bool;
                     ns_3_St_15_Min_1 : bool; policy_1_St_15_Min : int;
                     pers_1_St_15_Min : int; lamp_1_St_15_Min : int;
                     nr_3_St_15_Off_Up : bool; ns_3_St_15_Off_Up_3 : bool;
                     ns_3_St_15_Off_Up_2 : bool; ns_3_St_15_Off_Up_1 : bool;
                     policy_1_St_15_Off_Up : int; pers_1_St_15_Off_Up : int;
                     lamp_1_St_15_Off_Up : int; nr_3_St_15_Off : bool;
                     ns_3_St_15_Off_3 : bool; ns_3_St_15_Off_2 : bool;
                     ns_3_St_15_Off_1 : bool; policy_1_St_15_Off : int;
                     pers_1_St_15_Off : int; lamp_1_St_15_Off : int;
                     ck_37_3 : bool; ck_37_2 : bool; ck_37_1 : bool;
                     v_214_2_0 : bool; v_214_3_0_0 : bool;
                     v_214_3_0_1 : bool; v_214_2_1 : bool;
                     v_214_3_1_0 : bool; v_214_3_1_1 : bool; v_215 : bool;
                     v_214_3 : bool; v_214_2 : bool; v_214_1 : bool;
                     v_213 : bool; v_212 : bool; v_211 : bool; v_210 : bool;
                     v_208_2_0 : bool; v_208_3_0_0 : bool;
                     v_208_3_0_1 : bool; v_208_2_1 : bool;
                     v_208_3_1_0 : bool; v_208_3_1_1 : bool; v_209 : bool;
                     v_208_3 : bool; v_208_2 : bool; v_208_1 : bool;
                     v_207 : bool; v_206 : bool; v_205 : bool; v_204 : bool;
                     v_203 : bool; v_201_2_0 : bool; v_201_3_0_0 : bool;
                     v_201_3_0_1 : bool; v_201_2_1 : bool;
                     v_201_3_1_0 : bool; v_201_3_1_1 : bool; v_202 : bool;
                     v_201_3 : bool; v_201_2 : bool; v_201_1 : bool;
                     v_200 : bool; v_199 : bool; v_198 : bool; v_197 : bool;
                     v_196 : bool; v_195 : bool; v_193_2_0 : bool;
                     v_193_3_0_0 : bool; v_193_3_0_1 : bool;
                     v_193_2_1 : bool; v_193_3_1_0 : bool;
                     v_193_3_1_1 : bool; v_194 : bool; v_193_3 : bool;
                     v_193_2 : bool; v_193_1 : bool; v_192 : bool;
                     v_191 : bool; v_190 : bool; v_189 : bool;
                     v_187_2_0 : bool; v_187_3_0_0 : bool;
                     v_187_3_0_1 : bool; v_187_2_1 : bool;
                     v_187_3_1_0 : bool; v_187_3_1_1 : bool; v_188 : bool;
                     v_187_3 : bool; v_187_2 : bool; v_187_1 : bool;
                     v_186 : bool; v_185 : bool; v_184 : bool; v_183 : bool;
                     v_182 : bool; v_421 : bool; v_420 : bool; v_419 : bool;
                     v_418 : bool; v_417 : bool; v_416 : bool; v_415 : bool;
                     v_414 : bool; v_413 : bool; v_412 : bool; v_411 : bool;
                     v_410 : bool; v_409 : bool; v_408 : bool; v_407 : bool;
                     v_406 : bool; v_405 : bool; v_404 : bool; v_403 : bool;
                     v_402 : bool; v_401 : bool; v_400 : bool; v_399 : bool;
                     s_3_St_15_Max_Up_2_0 : bool;
                     s_3_St_15_Max_Up_3_0_0 : bool;
                     s_3_St_15_Max_Up_3_0_1 : bool;
                     s_3_St_15_Max_Up_2_1 : bool;
                     s_3_St_15_Max_Up_3_1_0 : bool;
                     s_3_St_15_Max_Up_3_1_1 : bool; s_3_St_15_Max_2_0 : bool;
                     s_3_St_15_Max_3_0_0 : bool; s_3_St_15_Max_3_0_1 : bool;
                     s_3_St_15_Max_2_1 : bool; s_3_St_15_Max_3_1_0 : bool;
                     s_3_St_15_Max_3_1_1 : bool; s_3_St_15_Min_2_0 : bool;
                     s_3_St_15_Min_3_0_0 : bool; s_3_St_15_Min_3_0_1 : bool;
                     s_3_St_15_Min_2_1 : bool; s_3_St_15_Min_3_1_0 : bool;
                     s_3_St_15_Min_3_1_1 : bool; s_3_St_15_Off_Up_2_0 : bool;
                     s_3_St_15_Off_Up_3_0_0 : bool;
                     s_3_St_15_Off_Up_3_0_1 : bool;
                     s_3_St_15_Off_Up_2_1 : bool;
                     s_3_St_15_Off_Up_3_1_0 : bool;
                     s_3_St_15_Off_Up_3_1_1 : bool; s_3_St_15_Off_2_0 : bool;
                     s_3_St_15_Off_3_0_0 : bool; s_3_St_15_Off_3_0_1 : bool;
                     s_3_St_15_Off_2_1 : bool; s_3_St_15_Off_3_1_0 : bool;
                     s_3_St_15_Off_3_1_1 : bool; ck_36_2_0 : bool;
                     ck_36_3_0_0 : bool; ck_36_3_0_1 : bool;
                     ck_36_2_1 : bool; ck_36_3_1_0 : bool;
                     ck_36_3_1_1 : bool; r_3_St_15_Max_Up : bool;
                     s_3_St_15_Max_Up_3 : bool; s_3_St_15_Max_Up_2 : bool;
                     s_3_St_15_Max_Up_1 : bool; r_3_St_15_Max : bool;
                     s_3_St_15_Max_3 : bool; s_3_St_15_Max_2 : bool;
                     s_3_St_15_Max_1 : bool; r_3_St_15_Min : bool;
                     s_3_St_15_Min_3 : bool; s_3_St_15_Min_2 : bool;
                     s_3_St_15_Min_1 : bool; r_3_St_15_Off_Up : bool;
                     s_3_St_15_Off_Up_3 : bool; s_3_St_15_Off_Up_2 : bool;
                     s_3_St_15_Off_Up_1 : bool; r_3_St_15_Off : bool;
                     s_3_St_15_Off_3 : bool; s_3_St_15_Off_2 : bool;
                     s_3_St_15_Off_1 : bool; ck_36_3 : bool; ck_36_2 : bool;
                     ck_36_1 : bool; nr_4_St_16_Falha : bool;
                     ns_4_St_16_Falha_1 : bool; failed_St_16_Falha : bool;
                     nr_4_St_16_Funcionando : bool;
                     ns_4_St_16_Funcionando_1 : bool;
                     failed_St_16_Funcionando : bool; ck_35_1 : bool;
                     r_4_St_16_Falha : bool; s_4_St_16_Falha_1 : bool;
                     r_4_St_16_Funcionando : bool;
                     s_4_St_16_Funcionando_1 : bool; ck_34_1 : bool;
                     v_429 : bool; v_428 : bool; v_427 : bool; v_426 : bool;
                     v_425 : bool; v_424 : bool; v_423 : int; v_422 : int;
                     ns_5_St_17_Max_2_0 : bool; ns_5_St_17_Max_2_1 : bool;
                     ns_5_St_17_Min_2_0 : bool; ns_5_St_17_Min_2_1 : bool;
                     ns_5_St_17_Off_2_0 : bool; ns_5_St_17_Off_2_1 : bool;
                     ck_33_2_0 : bool; ck_33_2_1 : bool;
                     nr_5_St_17_Max : bool; ns_5_St_17_Max_2 : bool;
                     ns_5_St_17_Max_1 : bool; ar_state_1_St_17_Max : int;
                     nr_5_St_17_Min : bool; ns_5_St_17_Min_2 : bool;
                     ns_5_St_17_Min_1 : bool; ar_state_1_St_17_Min : int;
                     nr_5_St_17_Off : bool; ns_5_St_17_Off_2 : bool;
                     ns_5_St_17_Off_1 : bool; ar_state_1_St_17_Off : int;
                     ck_33_2 : bool; ck_33_1 : bool; v_180_2_0 : bool;
                     v_180_2_1 : bool; v_181 : bool; v_180_2 : bool;
                     v_180_1 : bool; v_178_2_0 : bool; v_178_2_1 : bool;
                     v_179 : bool; v_178_2 : bool; v_178_1 : bool;
                     v_177 : bool; v_175_2_0 : bool; v_175_2_1 : bool;
                     v_176 : bool; v_175_2 : bool; v_175_1 : bool;
                     v_174 : bool; v_173 : bool; v_437 : bool; v_436 : bool;
                     v_435 : bool; v_434 : bool; v_433 : bool; v_432 : bool;
                     v_431 : bool; v_430 : bool; s_5_St_17_Max_2_0 : bool;
                     s_5_St_17_Max_2_1 : bool; s_5_St_17_Min_2_0 : bool;
                     s_5_St_17_Min_2_1 : bool; s_5_St_17_Off_2_0 : bool;
                     s_5_St_17_Off_2_1 : bool; ck_32_2_0 : bool;
                     ck_32_2_1 : bool; r_5_St_17_Max : bool;
                     s_5_St_17_Max_2 : bool; s_5_St_17_Max_1 : bool;
                     r_5_St_17_Min : bool; s_5_St_17_Min_2 : bool;
                     s_5_St_17_Min_1 : bool; r_5_St_17_Off : bool;
                     s_5_St_17_Off_2 : bool; s_5_St_17_Off_1 : bool;
                     ck_32_2 : bool; ck_32_1 : bool; nr_6_St_18_Open : bool;
                     ns_6_St_18_Open_1 : bool; w_open_1_St_18_Open : bool;
                     nr_6_St_18_Closed : bool; ns_6_St_18_Closed_1 : bool;
                     w_open_1_St_18_Closed : bool; ck_31_1 : bool;
                     v_172 : bool; r_6_St_18_Open : bool;
                     s_6_St_18_Open_1 : bool; r_6_St_18_Closed : bool;
                     s_6_St_18_Closed_1 : bool; ck_30_1 : bool;
                     nr_7_St_19_On : bool; ns_7_St_19_On_1 : bool;
                     pc_on_1_St_19_On : bool; nr_7_St_19_Off : bool;
                     ns_7_St_19_Off_1 : bool; pc_on_1_St_19_Off : bool;
                     ck_29_1 : bool; v_171 : bool; r_7_St_19_On : bool;
                     s_7_St_19_On_1 : bool; r_7_St_19_Off : bool;
                     s_7_St_19_Off_1 : bool; ck_28_1 : bool;
                     nr_8_St_20_Preent : bool; ns_8_St_20_Preent_1 : bool;
                     presence_2_St_20_Preent : bool;
                     nr_8_St_20_Not_Present : bool;
                     ns_8_St_20_Not_Present_1 : bool;
                     presence_2_St_20_Not_Present : bool; ck_27_1 : bool;
                     r_8_St_20_Preent : bool; s_8_St_20_Preent_1 : bool;
                     r_8_St_20_Not_Present : bool;
                     s_8_St_20_Not_Present_1 : bool; ck_26_1 : bool;
                     nr_9_St_21_Preent : bool; ns_9_St_21_Preent_1 : bool;
                     presence_1_St_21_Preent : bool;
                     nr_9_St_21_Not_Present : bool;
                     ns_9_St_21_Not_Present_1 : bool;
                     presence_1_St_21_Not_Present : bool; ck_25_1 : bool;
                     r_9_St_21_Preent : bool; s_9_St_21_Preent_1 : bool;
                     r_9_St_21_Not_Present : bool;
                     s_9_St_21_Not_Present_1 : bool; ck_24_1 : bool;
                     nr_10_St_22_Open : bool; ns_10_St_22_Open_1 : bool;
                     arm_open_1_St_22_Open : bool; nr_10_St_22_Locked : bool;
                     ns_10_St_22_Locked_1 : bool;
                     arm_open_1_St_22_Locked : bool; ck_23_1 : bool;
                     v_170 : bool; r_10_St_22_Open : bool;
                     s_10_St_22_Open_1 : bool; r_10_St_22_Locked : bool;
                     s_10_St_22_Locked_1 : bool; ck_22_1 : bool;
                     nr_11_St_23_On : bool; ns_11_St_23_On_1 : bool;
                     r_on_St_23_On : bool; nr_11_St_23_Off : bool;
                     ns_11_St_23_Off_1 : bool; r_on_St_23_Off : bool;
                     ck_21_1 : bool; v_169 : bool; r_11_St_23_On : bool;
                     s_11_St_23_On_1 : bool; r_11_St_23_Off : bool;
                     s_11_St_23_Off_1 : bool; ck_20_1 : bool;
                     nr_12_St_24_Open : bool; ns_12_St_24_Open_1 : bool;
                     porta_open_St_24_Open : bool; nr_12_St_24_Closed : bool;
                     ns_12_St_24_Closed_1 : bool;
                     porta_open_St_24_Closed : bool; ck_19_1 : bool;
                     v_168 : bool; r_12_St_24_Open : bool;
                     s_12_St_24_Open_1 : bool; r_12_St_24_Closed : bool;
                     s_12_St_24_Closed_1 : bool; ck_18_1 : bool;
                     nr_13_St_25_Noite : bool; ns_13_St_25_Noite_1 : bool;
                     turno_St_25_Noite : bool; nr_13_St_25_Dia : bool;
                     ns_13_St_25_Dia_1 : bool; turno_St_25_Dia : bool;
                     ck_17_1 : bool; r_13_St_25_Noite : bool;
                     s_13_St_25_Noite_1 : bool; r_13_St_25_Dia : bool;
                     s_13_St_25_Dia_1 : bool; ck_1 : bool; s_5_2_0 : bool;
                     s_5_2_1 : bool; ns_5_2_0 : bool; ns_5_2_1 : bool;
                     s_3_2_0 : bool; s_3_3_0_0 : bool; s_3_3_0_1 : bool;
                     s_3_2_1 : bool; s_3_3_1_0 : bool; s_3_3_1_1 : bool;
                     ns_3_2_0 : bool; ns_3_3_0_0 : bool; ns_3_3_0_1 : bool;
                     ns_3_2_1 : bool; ns_3_3_1_0 : bool; ns_3_3_1_1 : bool;
                     s_13_1 : bool; ns_13_1 : bool; r_13 : bool;
                     nr_13 : bool; pnr_13 : bool; s_12_1 : bool;
                     ns_12_1 : bool; r_12 : bool; nr_12 : bool;
                     pnr_12 : bool; s_11_1 : bool; ns_11_1 : bool;
                     r_11 : bool; nr_11 : bool; pnr_11 : bool; s_10_1 : bool;
                     ns_10_1 : bool; r_10 : bool; nr_10 : bool;
                     pnr_10 : bool; s_9_1 : bool; ns_9_1 : bool; r_9 : bool;
                     nr_9 : bool; pnr_9 : bool; s_8_1 : bool; ns_8_1 : bool;
                     r_8 : bool; nr_8 : bool; pnr_8 : bool; s_7_1 : bool;
                     ns_7_1 : bool; r_7 : bool; nr_7 : bool; pnr_7 : bool;
                     s_6_1 : bool; ns_6_1 : bool; r_6 : bool; nr_6 : bool;
                     pnr_6 : bool; s_5_2 : bool; s_5_1 : bool; ns_5_2 : bool;
                     ns_5_1 : bool; r_5 : bool; nr_5 : bool; pnr_5 : bool;
                     s_4_1 : bool; ns_4_1 : bool; r_4 : bool; nr_4 : bool;
                     pnr_4 : bool; s_3_3 : bool; s_3_2 : bool; s_3_1 : bool;
                     ns_3_3 : bool; ns_3_2 : bool; ns_3_1 : bool; r_3 : bool;
                     nr_3 : bool; pnr_3 : bool; s_1 : bool; ns_1 : bool;
                     r : bool; nr : bool; pnr : bool; c1_3 : bool;
                     c2_3 : bool; c_up : bool; c_down : bool; up_2 : bool;
                     down_2 : bool; falhou_3 : bool; recuperou_3 : bool;
                     ar_fail_2 : bool; shift_2 : bool; falhou_1 : bool;
                     recuperou_1 : bool; failed_1 : bool; c1_1 : bool;
                     c2_1 : bool; c_up_1 : bool; c_down_1 : bool;
                     up_1 : bool; down_1 : bool; ar_fail_1 : bool;
                     shift_1 : bool; lamp_1 : int; pers_1 : int;
                     policy_1 : int; failed_2 : bool; lamp_2 : int;
                     pers_2 : int; policy : int; c1 : bool; c2 : bool;
                     falhou : bool; recuperou : bool; falhou_2 : bool;
                     recuperou_2 : bool; failed : bool; c1_2 : bool;
                     c2_2 : bool; ar_state_1 : int; ar_state_2 : int;
                     working : bool; c_3 : bool; w_open_1 : bool; c_2 : bool;
                     pc_on_1 : bool; arrived_1 : bool; presence_2 : bool;
                     arrived : bool; presence_1 : bool; c_1 : bool;
                     arm_open_1 : bool; c : bool; r_on : bool; push : bool;
                     c_porta_1 : bool; porta_open : bool; shift : bool;
                     turno : bool;
  let
    c1_3 = cl1;
    c2_3 = cl2;
    c_up = cup;
    c_down = cdown;
    up_2 = up;
    down_2 = down;
    falhou_3 = l_failed;
    recuperou_3 = l_recovered;
    ar_fail_2 = ar_fail;
    shift_2 = night;
    falhou_1 = falhou_3;
    recuperou_1 = recuperou_3;
    pnr = false fby nr;
    ck_39_1 = s_1;
    failed_1_St_14_Funcionando = false;
    nr_St_14_Funcionando = false;
    ns_St_14_Funcionando_1 = false;
    failed_1_St_14_Falha = true;
    nr_St_14_Falha = false;
    ns_St_14_Falha_1 = true;
    failed_1 =
      merge ck_39_1
        (true -> failed_1_St_14_Falha)(false -> failed_1_St_14_Funcionando);
    ns_1 =
      merge ck_39_1
        (true -> ns_St_14_Falha_1)(false -> ns_St_14_Funcionando_1);
    nr =
      merge ck_39_1 (true -> nr_St_14_Falha)(false -> nr_St_14_Funcionando);
    ck_38_1 = false fby ns_1;
    r_St_14_Funcionando =
      if (falhou_1 when false(ck_38_1))
      then true
      else (pnr when false(ck_38_1));
    s_St_14_Funcionando_1 =
      if (falhou_1 when false(ck_38_1)) then true else false;
    r_St_14_Falha =
      if (recuperou_1 when true(ck_38_1))
      then true
      else (pnr when true(ck_38_1));
    s_St_14_Falha_1 =
      if (recuperou_1 when true(ck_38_1)) then false else true;
    s_1 =
      merge ck_38_1 (true -> s_St_14_Falha_1)(false -> s_St_14_Funcionando_1);
    r = merge ck_38_1 (true -> r_St_14_Falha)(false -> r_St_14_Funcionando);
    c1_1 = c1_3;
    c2_1 = c2_3;
    c_up_1 = c_up;
    c_down_1 = c_down;
    up_1 = up_2;
    down_1 = down_2;
    ar_fail_1 = ar_fail_2;
    shift_1 = shift_2;
    pnr_3 = false fby nr_3;
    ck_37_1 = s_3_1;
    ck_37_2 = s_3_2;
    ck_37_3 = s_3_3;
    lamp_1_St_15_Off = 0;
    pers_1_St_15_Off = 0;
    policy_1_St_15_Off = 0;
    nr_3_St_15_Off = false;
    ns_3_St_15_Off_1 = false;
    ns_3_St_15_Off_2 = false;
    ns_3_St_15_Off_3 = true;
    lamp_1_St_15_Off_Up = 0;
    pers_1_St_15_Off_Up = 0;
    policy_1_St_15_Off_Up = 4;
    nr_3_St_15_Off_Up = false;
    ns_3_St_15_Off_Up_1 = false;
    ns_3_St_15_Off_Up_2 = false;
    ns_3_St_15_Off_Up_3 = false;
    lamp_1_St_15_Min = 1;
    pers_1_St_15_Min = 1;
    policy_1_St_15_Min = 1;
    nr_3_St_15_Min = false;
    ns_3_St_15_Min_1 = true;
    ns_3_St_15_Min_2 = false;
    ns_3_St_15_Min_3 = false;
    lamp_1_St_15_Max = 2;
    pers_1_St_15_Max = 2;
    policy_1_St_15_Max = 2;
    nr_3_St_15_Max = false;
    ns_3_St_15_Max_1 = true;
    ns_3_St_15_Max_2 = true;
    ns_3_St_15_Max_3 = true;
    lamp_1_St_15_Max_Up = 0;
    pers_1_St_15_Max_Up = 0;
    policy_1_St_15_Max_Up = 5;
    nr_3_St_15_Max_Up = false;
    ns_3_St_15_Max_Up_1 = true;
    ns_3_St_15_Max_Up_2 = true;
    ns_3_St_15_Max_Up_3 = false;
    v_364 =
      merge ck_37_3_1_1
        (true -> lamp_1_St_15_Max)(false -> lamp_1_St_15_Max_Up);
    v_365 =
      merge ck_37_3_1_0
        (true -> 
          (((0 when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> lamp_1_St_15_Min);
    v_366 = merge ck_37_2_1 (true -> v_364)(false -> v_365);
    v_367 =
      merge ck_37_3_0_0
        (true -> lamp_1_St_15_Off)(false -> lamp_1_St_15_Off_Up);
    v_368 =
      merge ck_37_2_0
        (true -> ((0 when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_367);
    lamp_1 = merge ck_37_1 (true -> v_366)(false -> v_368);
    v_369 =
      merge ck_37_3_1_1
        (true -> pers_1_St_15_Max)(false -> pers_1_St_15_Max_Up);
    v_370 =
      merge ck_37_3_1_0
        (true -> 
          (((0 when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> pers_1_St_15_Min);
    v_371 = merge ck_37_2_1 (true -> v_369)(false -> v_370);
    v_372 =
      merge ck_37_3_0_0
        (true -> pers_1_St_15_Off)(false -> pers_1_St_15_Off_Up);
    v_373 =
      merge ck_37_2_0
        (true -> ((0 when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_372);
    pers_1 = merge ck_37_1 (true -> v_371)(false -> v_373);
    v_374 =
      merge ck_37_3_1_1
        (true -> policy_1_St_15_Max)(false -> policy_1_St_15_Max_Up);
    v_375 =
      merge ck_37_3_1_0
        (true -> 
          (((0 when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> policy_1_St_15_Min);
    v_376 = merge ck_37_2_1 (true -> v_374)(false -> v_375);
    v_377 =
      merge ck_37_3_0_0
        (true -> policy_1_St_15_Off)(false -> policy_1_St_15_Off_Up);
    v_378 =
      merge ck_37_2_0
        (true -> ((0 when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_377);
    policy_1 = merge ck_37_1 (true -> v_376)(false -> v_378);
    v_379 =
      merge ck_37_3_1_1
        (true -> ns_3_St_15_Max_1)(false -> ns_3_St_15_Max_Up_1);
    v_380 =
      merge ck_37_3_1_1
        (true -> ns_3_St_15_Max_2)(false -> ns_3_St_15_Max_Up_2);
    v_381 =
      merge ck_37_3_1_1
        (true -> ns_3_St_15_Max_3)(false -> ns_3_St_15_Max_Up_3);
    v_382 =
      merge ck_37_3_1_0
        (true -> 
          (((true when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> ns_3_St_15_Min_1);
    v_383 =
      merge ck_37_3_1_0
        (true -> 
          (((true when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> ns_3_St_15_Min_2);
    v_384 =
      merge ck_37_3_1_0
        (true -> 
          (((true when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> ns_3_St_15_Min_3);
    v_385 =
      merge ck_37_3_0_0
        (true -> ns_3_St_15_Off_1)(false -> ns_3_St_15_Off_Up_1);
    v_386 =
      merge ck_37_3_0_0
        (true -> ns_3_St_15_Off_2)(false -> ns_3_St_15_Off_Up_2);
    v_387 =
      merge ck_37_3_0_0
        (true -> ns_3_St_15_Off_3)(false -> ns_3_St_15_Off_Up_3);
    v_388 = merge ck_37_2_1 (true -> v_379)(false -> v_382);
    v_389 = merge ck_37_2_1 (true -> v_380)(false -> v_383);
    v_390 = merge ck_37_2_1 (true -> v_381)(false -> v_384);
    v_391 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_385);
    v_392 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_386);
    v_393 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_387);
    ns_3_1 = merge ck_37_1 (true -> v_388)(false -> v_391);
    ns_3_2 = merge ck_37_1 (true -> v_389)(false -> v_392);
    ns_3_3 = merge ck_37_1 (true -> v_390)(false -> v_393);
    v_394 =
      merge ck_37_3_1_1 (true -> nr_3_St_15_Max)(false -> nr_3_St_15_Max_Up);
    v_395 =
      merge ck_37_3_1_0
        (true -> 
          (((true when true(ck_37_1)) when false(ck_37_2_1))
            when true(ck_37_3_1_0)))
        (false -> nr_3_St_15_Min);
    v_396 = merge ck_37_2_1 (true -> v_394)(false -> v_395);
    v_397 =
      merge ck_37_3_0_0 (true -> nr_3_St_15_Off)(false -> nr_3_St_15_Off_Up);
    v_398 =
      merge ck_37_2_0
        (true -> ((true when false(ck_37_1)) when true(ck_37_2_0)))
        (false -> v_397);
    nr_3 = merge ck_37_1 (true -> v_396)(false -> v_398);
    ck_37_3_1_1 = ((ck_37_3 when true(ck_37_1)) when true(ck_37_2_1));
    ck_37_3_1_0 = ((ck_37_3 when true(ck_37_1)) when false(ck_37_2_1));
    ck_37_2_1 = (ck_37_2 when true(ck_37_1));
    ck_37_3_0_1 = ((ck_37_3 when false(ck_37_1)) when true(ck_37_2_0));
    ck_37_3_0_0 = ((ck_37_3 when false(ck_37_1)) when false(ck_37_2_0));
    ck_37_2_0 = (ck_37_2 when false(ck_37_1));
    ns_3_St_15_Off_3_1_1 =
      ((ns_3_St_15_Off_3 when true(ns_3_St_15_Off_1))
        when true(ns_3_St_15_Off_2_1));
    ns_3_St_15_Off_3_1_0 =
      ((ns_3_St_15_Off_3 when true(ns_3_St_15_Off_1))
        when false(ns_3_St_15_Off_2_1));
    ns_3_St_15_Off_2_1 = (ns_3_St_15_Off_2 when true(ns_3_St_15_Off_1));
    ns_3_St_15_Off_3_0_1 =
      ((ns_3_St_15_Off_3 when false(ns_3_St_15_Off_1))
        when true(ns_3_St_15_Off_2_0));
    ns_3_St_15_Off_3_0_0 =
      ((ns_3_St_15_Off_3 when false(ns_3_St_15_Off_1))
        when false(ns_3_St_15_Off_2_0));
    ns_3_St_15_Off_2_0 = (ns_3_St_15_Off_2 when false(ns_3_St_15_Off_1));
    ns_3_St_15_Off_Up_3_1_1 =
      ((ns_3_St_15_Off_Up_3 when true(ns_3_St_15_Off_Up_1))
        when true(ns_3_St_15_Off_Up_2_1));
    ns_3_St_15_Off_Up_3_1_0 =
      ((ns_3_St_15_Off_Up_3 when true(ns_3_St_15_Off_Up_1))
        when false(ns_3_St_15_Off_Up_2_1));
    ns_3_St_15_Off_Up_2_1 =
      (ns_3_St_15_Off_Up_2 when true(ns_3_St_15_Off_Up_1));
    ns_3_St_15_Off_Up_3_0_1 =
      ((ns_3_St_15_Off_Up_3 when false(ns_3_St_15_Off_Up_1))
        when true(ns_3_St_15_Off_Up_2_0));
    ns_3_St_15_Off_Up_3_0_0 =
      ((ns_3_St_15_Off_Up_3 when false(ns_3_St_15_Off_Up_1))
        when false(ns_3_St_15_Off_Up_2_0));
    ns_3_St_15_Off_Up_2_0 =
      (ns_3_St_15_Off_Up_2 when false(ns_3_St_15_Off_Up_1));
    ns_3_St_15_Min_3_1_1 =
      ((ns_3_St_15_Min_3 when true(ns_3_St_15_Min_1))
        when true(ns_3_St_15_Min_2_1));
    ns_3_St_15_Min_3_1_0 =
      ((ns_3_St_15_Min_3 when true(ns_3_St_15_Min_1))
        when false(ns_3_St_15_Min_2_1));
    ns_3_St_15_Min_2_1 = (ns_3_St_15_Min_2 when true(ns_3_St_15_Min_1));
    ns_3_St_15_Min_3_0_1 =
      ((ns_3_St_15_Min_3 when false(ns_3_St_15_Min_1))
        when true(ns_3_St_15_Min_2_0));
    ns_3_St_15_Min_3_0_0 =
      ((ns_3_St_15_Min_3 when false(ns_3_St_15_Min_1))
        when false(ns_3_St_15_Min_2_0));
    ns_3_St_15_Min_2_0 = (ns_3_St_15_Min_2 when false(ns_3_St_15_Min_1));
    ns_3_St_15_Max_3_1_1 =
      ((ns_3_St_15_Max_3 when true(ns_3_St_15_Max_1))
        when true(ns_3_St_15_Max_2_1));
    ns_3_St_15_Max_3_1_0 =
      ((ns_3_St_15_Max_3 when true(ns_3_St_15_Max_1))
        when false(ns_3_St_15_Max_2_1));
    ns_3_St_15_Max_2_1 = (ns_3_St_15_Max_2 when true(ns_3_St_15_Max_1));
    ns_3_St_15_Max_3_0_1 =
      ((ns_3_St_15_Max_3 when false(ns_3_St_15_Max_1))
        when true(ns_3_St_15_Max_2_0));
    ns_3_St_15_Max_3_0_0 =
      ((ns_3_St_15_Max_3 when false(ns_3_St_15_Max_1))
        when false(ns_3_St_15_Max_2_0));
    ns_3_St_15_Max_2_0 = (ns_3_St_15_Max_2 when false(ns_3_St_15_Max_1));
    ns_3_St_15_Max_Up_3_1_1 =
      ((ns_3_St_15_Max_Up_3 when true(ns_3_St_15_Max_Up_1))
        when true(ns_3_St_15_Max_Up_2_1));
    ns_3_St_15_Max_Up_3_1_0 =
      ((ns_3_St_15_Max_Up_3 when true(ns_3_St_15_Max_Up_1))
        when false(ns_3_St_15_Max_Up_2_1));
    ns_3_St_15_Max_Up_2_1 =
      (ns_3_St_15_Max_Up_2 when true(ns_3_St_15_Max_Up_1));
    ns_3_St_15_Max_Up_3_0_1 =
      ((ns_3_St_15_Max_Up_3 when false(ns_3_St_15_Max_Up_1))
        when true(ns_3_St_15_Max_Up_2_0));
    ns_3_St_15_Max_Up_3_0_0 =
      ((ns_3_St_15_Max_Up_3 when false(ns_3_St_15_Max_Up_1))
        when false(ns_3_St_15_Max_Up_2_0));
    ns_3_St_15_Max_Up_2_0 =
      (ns_3_St_15_Max_Up_2 when false(ns_3_St_15_Max_Up_1));
    v_399 = false fby ns_3_1;
    v_400 = false fby ns_3_2;
    v_401 = true fby ns_3_3;
    ck_36_1 = v_399;
    ck_36_2 = v_400;
    ck_36_3 = v_401;
    r_3_St_15_Off = if v_212 then true else v_215;
    s_3_St_15_Off_1 = if v_212 then true else v_214_1;
    s_3_St_15_Off_2 = if v_212 then false else v_214_2;
    s_3_St_15_Off_3 = if v_212 then false else v_214_3;
    v_215 =
      if v_213
      then true
      else (((pnr_3 when false(ck_36_1)) when false(ck_36_2_0))
             when true(ck_36_3_0_0))
        ;
    v_214_1 = if v_213 then true else false;
    v_214_2 = if v_213 then true else false;
    v_214_3 = if v_213 then true else true;
    v_213 =
      not
      ((((c2_1 when false(ck_36_1)) when false(ck_36_2_0))
         when true(ck_36_3_0_0)))
        ;
    v_212 = (v_210 or v_211);
    v_211 =
      ((((up_1 when false(ck_36_1)) when false(ck_36_2_0))
         when true(ck_36_3_0_0))
       &
       (((c_up_1 when false(ck_36_1)) when false(ck_36_2_0))
         when true(ck_36_3_0_0)))
        ;
    v_210 =
      not
      ((((c1_1 when false(ck_36_1)) when false(ck_36_2_0))
         when true(ck_36_3_0_0)))
        ;
    v_214_3_1_1 = ((v_214_3 when true(v_214_1)) when true(v_214_2_1));
    v_214_3_1_0 = ((v_214_3 when true(v_214_1)) when false(v_214_2_1));
    v_214_2_1 = (v_214_2 when true(v_214_1));
    v_214_3_0_1 = ((v_214_3 when false(v_214_1)) when true(v_214_2_0));
    v_214_3_0_0 = ((v_214_3 when false(v_214_1)) when false(v_214_2_0));
    v_214_2_0 = (v_214_2 when false(v_214_1));
    r_3_St_15_Off_Up = if v_204 then true else v_209;
    s_3_St_15_Off_Up_1 = if v_204 then false else v_208_1;
    s_3_St_15_Off_Up_2 = if v_204 then false else v_208_2;
    s_3_St_15_Off_Up_3 = if v_204 then true else v_208_3;
    v_209 =
      if v_207
      then true
      else (((pnr_3 when false(ck_36_1)) when false(ck_36_2_0))
             when false(ck_36_3_0_0))
        ;
    v_208_1 = if v_207 then false else false;
    v_208_2 = if v_207 then false else false;
    v_208_3 = if v_207 then true else false;
    v_207 = (v_205 & v_206);
    v_206 =
      not
      ((((shift_1 when false(ck_36_1)) when false(ck_36_2_0))
         when false(ck_36_3_0_0)))
        ;
    v_205 =
      not
      ((((ar_fail_1 when false(ck_36_1)) when false(ck_36_2_0))
         when false(ck_36_3_0_0)))
        ;
    v_204 =
      (v_203 &
       (((shift_1 when false(ck_36_1)) when false(ck_36_2_0))
         when false(ck_36_3_0_0)))
        ;
    v_203 =
      not
      ((((ar_fail_1 when false(ck_36_1)) when false(ck_36_2_0))
         when false(ck_36_3_0_0)))
        ;
    v_208_3_1_1 = ((v_208_3 when true(v_208_1)) when true(v_208_2_1));
    v_208_3_1_0 = ((v_208_3 when true(v_208_1)) when false(v_208_2_1));
    v_208_2_1 = (v_208_2 when true(v_208_1));
    v_208_3_0_1 = ((v_208_3 when false(v_208_1)) when true(v_208_2_0));
    v_208_3_0_0 = ((v_208_3 when false(v_208_1)) when false(v_208_2_0));
    v_208_2_0 = (v_208_2 when false(v_208_1));
    r_3_St_15_Min = if v_197 then true else v_202;
    s_3_St_15_Min_1 = if v_197 then false else v_201_1;
    s_3_St_15_Min_2 = if v_197 then false else v_201_2;
    s_3_St_15_Min_3 = if v_197 then true else v_201_3;
    v_202 =
      if v_200
      then true
      else (((pnr_3 when true(ck_36_1)) when false(ck_36_2_1))
             when false(ck_36_3_1_0))
        ;
    v_201_1 = if v_200 then true else true;
    v_201_2 = if v_200 then true else false;
    v_201_3 = if v_200 then true else false;
    v_200 = (v_198 or v_199);
    v_199 =
      ((((up_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0))
       &
       (((c_up_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0)))
        ;
    v_198 =
      not
      ((((c2_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0)))
        ;
    v_197 = (v_195 or v_196);
    v_196 =
      ((((down_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0))
       &
       (((c_down_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0)))
        ;
    v_195 =
      not
      ((((c1_1 when true(ck_36_1)) when false(ck_36_2_1))
         when false(ck_36_3_1_0)))
        ;
    v_201_3_1_1 = ((v_201_3 when true(v_201_1)) when true(v_201_2_1));
    v_201_3_1_0 = ((v_201_3 when true(v_201_1)) when false(v_201_2_1));
    v_201_2_1 = (v_201_2 when true(v_201_1));
    v_201_3_0_1 = ((v_201_3 when false(v_201_1)) when true(v_201_2_0));
    v_201_3_0_0 = ((v_201_3 when false(v_201_1)) when false(v_201_2_0));
    v_201_2_0 = (v_201_2 when false(v_201_1));
    r_3_St_15_Max = if v_191 then true else v_194;
    s_3_St_15_Max_1 = if v_191 then true else v_193_1;
    s_3_St_15_Max_2 = if v_191 then false else v_193_2;
    s_3_St_15_Max_3 = if v_191 then false else v_193_3;
    v_194 =
      if v_192
      then true
      else (((pnr_3 when true(ck_36_1)) when true(ck_36_2_1))
             when true(ck_36_3_1_1))
        ;
    v_193_1 = if v_192 then false else true;
    v_193_2 = if v_192 then false else true;
    v_193_3 = if v_192 then true else true;
    v_192 =
      not
      ((((c2_1 when true(ck_36_1)) when true(ck_36_2_1))
         when true(ck_36_3_1_1)))
        ;
    v_191 = (v_189 or v_190);
    v_190 =
      ((((down_1 when true(ck_36_1)) when true(ck_36_2_1))
         when true(ck_36_3_1_1))
       &
       (((c_down_1 when true(ck_36_1)) when true(ck_36_2_1))
         when true(ck_36_3_1_1)))
        ;
    v_189 =
      not
      ((((c1_1 when true(ck_36_1)) when true(ck_36_2_1))
         when true(ck_36_3_1_1)))
        ;
    v_193_3_1_1 = ((v_193_3 when true(v_193_1)) when true(v_193_2_1));
    v_193_3_1_0 = ((v_193_3 when true(v_193_1)) when false(v_193_2_1));
    v_193_2_1 = (v_193_2 when true(v_193_1));
    v_193_3_0_1 = ((v_193_3 when false(v_193_1)) when true(v_193_2_0));
    v_193_3_0_0 = ((v_193_3 when false(v_193_1)) when false(v_193_2_0));
    v_193_2_0 = (v_193_2 when false(v_193_1));
    r_3_St_15_Max_Up = if v_183 then true else v_188;
    s_3_St_15_Max_Up_1 = if v_183 then false else v_187_1;
    s_3_St_15_Max_Up_2 = if v_183 then false else v_187_2;
    s_3_St_15_Max_Up_3 = if v_183 then true else v_187_3;
    v_188 =
      if v_186
      then true
      else (((pnr_3 when true(ck_36_1)) when true(ck_36_2_1))
             when false(ck_36_3_1_1))
        ;
    v_187_1 = if v_186 then false else true;
    v_187_2 = if v_186 then false else true;
    v_187_3 = if v_186 then true else false;
    v_186 = (v_184 & v_185);
    v_185 =
      not
      ((((shift_1 when true(ck_36_1)) when true(ck_36_2_1))
         when false(ck_36_3_1_1)))
        ;
    v_184 =
      not
      ((((ar_fail_1 when true(ck_36_1)) when true(ck_36_2_1))
         when false(ck_36_3_1_1)))
        ;
    v_183 =
      (v_182 &
       (((shift_1 when true(ck_36_1)) when true(ck_36_2_1))
         when false(ck_36_3_1_1)))
        ;
    v_182 =
      not
      ((((ar_fail_1 when true(ck_36_1)) when true(ck_36_2_1))
         when false(ck_36_3_1_1)))
        ;
    v_187_3_1_1 = ((v_187_3 when true(v_187_1)) when true(v_187_2_1));
    v_187_3_1_0 = ((v_187_3 when true(v_187_1)) when false(v_187_2_1));
    v_187_2_1 = (v_187_2 when true(v_187_1));
    v_187_3_0_1 = ((v_187_3 when false(v_187_1)) when true(v_187_2_0));
    v_187_3_0_0 = ((v_187_3 when false(v_187_1)) when false(v_187_2_0));
    v_187_2_0 = (v_187_2 when false(v_187_1));
    v_402 =
      merge ck_36_3_1_1
        (true -> s_3_St_15_Max_1)(false -> s_3_St_15_Max_Up_1);
    v_403 =
      merge ck_36_3_1_1
        (true -> s_3_St_15_Max_2)(false -> s_3_St_15_Max_Up_2);
    v_404 =
      merge ck_36_3_1_1
        (true -> s_3_St_15_Max_3)(false -> s_3_St_15_Max_Up_3);
    v_405 =
      merge ck_36_3_1_0
        (true -> 
          (((true when true(ck_36_1)) when false(ck_36_2_1))
            when true(ck_36_3_1_0)))
        (false -> s_3_St_15_Min_1);
    v_406 =
      merge ck_36_3_1_0
        (true -> 
          (((true when true(ck_36_1)) when false(ck_36_2_1))
            when true(ck_36_3_1_0)))
        (false -> s_3_St_15_Min_2);
    v_407 =
      merge ck_36_3_1_0
        (true -> 
          (((true when true(ck_36_1)) when false(ck_36_2_1))
            when true(ck_36_3_1_0)))
        (false -> s_3_St_15_Min_3);
    v_408 =
      merge ck_36_3_0_0
        (true -> s_3_St_15_Off_1)(false -> s_3_St_15_Off_Up_1);
    v_409 =
      merge ck_36_3_0_0
        (true -> s_3_St_15_Off_2)(false -> s_3_St_15_Off_Up_2);
    v_410 =
      merge ck_36_3_0_0
        (true -> s_3_St_15_Off_3)(false -> s_3_St_15_Off_Up_3);
    v_411 = merge ck_36_2_1 (true -> v_402)(false -> v_405);
    v_412 = merge ck_36_2_1 (true -> v_403)(false -> v_406);
    v_413 = merge ck_36_2_1 (true -> v_404)(false -> v_407);
    v_414 =
      merge ck_36_2_0
        (true -> ((true when false(ck_36_1)) when true(ck_36_2_0)))
        (false -> v_408);
    v_415 =
      merge ck_36_2_0
        (true -> ((true when false(ck_36_1)) when true(ck_36_2_0)))
        (false -> v_409);
    v_416 =
      merge ck_36_2_0
        (true -> ((true when false(ck_36_1)) when true(ck_36_2_0)))
        (false -> v_410);
    s_3_1 = merge ck_36_1 (true -> v_411)(false -> v_414);
    s_3_2 = merge ck_36_1 (true -> v_412)(false -> v_415);
    s_3_3 = merge ck_36_1 (true -> v_413)(false -> v_416);
    v_417 =
      merge ck_36_3_1_1 (true -> r_3_St_15_Max)(false -> r_3_St_15_Max_Up);
    v_418 =
      merge ck_36_3_1_0
        (true -> 
          (((true when true(ck_36_1)) when false(ck_36_2_1))
            when true(ck_36_3_1_0)))
        (false -> r_3_St_15_Min);
    v_419 = merge ck_36_2_1 (true -> v_417)(false -> v_418);
    v_420 =
      merge ck_36_3_0_0 (true -> r_3_St_15_Off)(false -> r_3_St_15_Off_Up);
    v_421 =
      merge ck_36_2_0
        (true -> ((true when false(ck_36_1)) when true(ck_36_2_0)))
        (false -> v_420);
    r_3 = merge ck_36_1 (true -> v_419)(false -> v_421);
    ck_36_3_1_1 = ((ck_36_3 when true(ck_36_1)) when true(ck_36_2_1));
    ck_36_3_1_0 = ((ck_36_3 when true(ck_36_1)) when false(ck_36_2_1));
    ck_36_2_1 = (ck_36_2 when true(ck_36_1));
    ck_36_3_0_1 = ((ck_36_3 when false(ck_36_1)) when true(ck_36_2_0));
    ck_36_3_0_0 = ((ck_36_3 when false(ck_36_1)) when false(ck_36_2_0));
    ck_36_2_0 = (ck_36_2 when false(ck_36_1));
    s_3_St_15_Off_3_1_1 =
      ((s_3_St_15_Off_3 when true(s_3_St_15_Off_1))
        when true(s_3_St_15_Off_2_1));
    s_3_St_15_Off_3_1_0 =
      ((s_3_St_15_Off_3 when true(s_3_St_15_Off_1))
        when false(s_3_St_15_Off_2_1));
    s_3_St_15_Off_2_1 = (s_3_St_15_Off_2 when true(s_3_St_15_Off_1));
    s_3_St_15_Off_3_0_1 =
      ((s_3_St_15_Off_3 when false(s_3_St_15_Off_1))
        when true(s_3_St_15_Off_2_0));
    s_3_St_15_Off_3_0_0 =
      ((s_3_St_15_Off_3 when false(s_3_St_15_Off_1))
        when false(s_3_St_15_Off_2_0));
    s_3_St_15_Off_2_0 = (s_3_St_15_Off_2 when false(s_3_St_15_Off_1));
    s_3_St_15_Off_Up_3_1_1 =
      ((s_3_St_15_Off_Up_3 when true(s_3_St_15_Off_Up_1))
        when true(s_3_St_15_Off_Up_2_1));
    s_3_St_15_Off_Up_3_1_0 =
      ((s_3_St_15_Off_Up_3 when true(s_3_St_15_Off_Up_1))
        when false(s_3_St_15_Off_Up_2_1));
    s_3_St_15_Off_Up_2_1 = (s_3_St_15_Off_Up_2 when true(s_3_St_15_Off_Up_1));
    s_3_St_15_Off_Up_3_0_1 =
      ((s_3_St_15_Off_Up_3 when false(s_3_St_15_Off_Up_1))
        when true(s_3_St_15_Off_Up_2_0));
    s_3_St_15_Off_Up_3_0_0 =
      ((s_3_St_15_Off_Up_3 when false(s_3_St_15_Off_Up_1))
        when false(s_3_St_15_Off_Up_2_0));
    s_3_St_15_Off_Up_2_0 =
      (s_3_St_15_Off_Up_2 when false(s_3_St_15_Off_Up_1));
    s_3_St_15_Min_3_1_1 =
      ((s_3_St_15_Min_3 when true(s_3_St_15_Min_1))
        when true(s_3_St_15_Min_2_1));
    s_3_St_15_Min_3_1_0 =
      ((s_3_St_15_Min_3 when true(s_3_St_15_Min_1))
        when false(s_3_St_15_Min_2_1));
    s_3_St_15_Min_2_1 = (s_3_St_15_Min_2 when true(s_3_St_15_Min_1));
    s_3_St_15_Min_3_0_1 =
      ((s_3_St_15_Min_3 when false(s_3_St_15_Min_1))
        when true(s_3_St_15_Min_2_0));
    s_3_St_15_Min_3_0_0 =
      ((s_3_St_15_Min_3 when false(s_3_St_15_Min_1))
        when false(s_3_St_15_Min_2_0));
    s_3_St_15_Min_2_0 = (s_3_St_15_Min_2 when false(s_3_St_15_Min_1));
    s_3_St_15_Max_3_1_1 =
      ((s_3_St_15_Max_3 when true(s_3_St_15_Max_1))
        when true(s_3_St_15_Max_2_1));
    s_3_St_15_Max_3_1_0 =
      ((s_3_St_15_Max_3 when true(s_3_St_15_Max_1))
        when false(s_3_St_15_Max_2_1));
    s_3_St_15_Max_2_1 = (s_3_St_15_Max_2 when true(s_3_St_15_Max_1));
    s_3_St_15_Max_3_0_1 =
      ((s_3_St_15_Max_3 when false(s_3_St_15_Max_1))
        when true(s_3_St_15_Max_2_0));
    s_3_St_15_Max_3_0_0 =
      ((s_3_St_15_Max_3 when false(s_3_St_15_Max_1))
        when false(s_3_St_15_Max_2_0));
    s_3_St_15_Max_2_0 = (s_3_St_15_Max_2 when false(s_3_St_15_Max_1));
    s_3_St_15_Max_Up_3_1_1 =
      ((s_3_St_15_Max_Up_3 when true(s_3_St_15_Max_Up_1))
        when true(s_3_St_15_Max_Up_2_1));
    s_3_St_15_Max_Up_3_1_0 =
      ((s_3_St_15_Max_Up_3 when true(s_3_St_15_Max_Up_1))
        when false(s_3_St_15_Max_Up_2_1));
    s_3_St_15_Max_Up_2_1 = (s_3_St_15_Max_Up_2 when true(s_3_St_15_Max_Up_1));
    s_3_St_15_Max_Up_3_0_1 =
      ((s_3_St_15_Max_Up_3 when false(s_3_St_15_Max_Up_1))
        when true(s_3_St_15_Max_Up_2_0));
    s_3_St_15_Max_Up_3_0_0 =
      ((s_3_St_15_Max_Up_3 when false(s_3_St_15_Max_Up_1))
        when false(s_3_St_15_Max_Up_2_0));
    s_3_St_15_Max_Up_2_0 =
      (s_3_St_15_Max_Up_2 when false(s_3_St_15_Max_Up_1));
    policy = policy_1;
    pers_2 = pers_1;
    lamp_2 = lamp_1;
    failed_2 = failed_1;
    c1 = c_ar1;
    c2 = c_ar2;
    falhou = ar_failed;
    recuperou = ar_recovered;
    falhou_2 = falhou;
    recuperou_2 = recuperou;
    pnr_4 = false fby nr_4;
    ck_35_1 = s_4_1;
    failed_St_16_Funcionando = false;
    nr_4_St_16_Funcionando = false;
    ns_4_St_16_Funcionando_1 = false;
    failed_St_16_Falha = true;
    nr_4_St_16_Falha = false;
    ns_4_St_16_Falha_1 = true;
    failed =
      merge ck_35_1
        (true -> failed_St_16_Falha)(false -> failed_St_16_Funcionando);
    ns_4_1 =
      merge ck_35_1
        (true -> ns_4_St_16_Falha_1)(false -> ns_4_St_16_Funcionando_1);
    nr_4 =
      merge ck_35_1
        (true -> nr_4_St_16_Falha)(false -> nr_4_St_16_Funcionando);
    ck_34_1 = false fby ns_4_1;
    r_4_St_16_Funcionando =
      if (falhou_2 when false(ck_34_1))
      then true
      else (pnr_4 when false(ck_34_1));
    s_4_St_16_Funcionando_1 =
      if (falhou_2 when false(ck_34_1)) then true else false;
    r_4_St_16_Falha =
      if (recuperou_2 when true(ck_34_1))
      then true
      else (pnr_4 when true(ck_34_1));
    s_4_St_16_Falha_1 =
      if (recuperou_2 when true(ck_34_1)) then false else true;
    s_4_1 =
      merge ck_34_1
        (true -> s_4_St_16_Falha_1)(false -> s_4_St_16_Funcionando_1);
    r_4 =
      merge ck_34_1 (true -> r_4_St_16_Falha)(false -> r_4_St_16_Funcionando);
    c1_2 = c1;
    c2_2 = c2;
    pnr_5 = false fby nr_5;
    ck_33_1 = s_5_1;
    ck_33_2 = s_5_2;
    ar_state_1_St_17_Off = 0;
    nr_5_St_17_Off = false;
    ns_5_St_17_Off_1 = false;
    ns_5_St_17_Off_2 = false;
    ar_state_1_St_17_Min = 1;
    nr_5_St_17_Min = false;
    ns_5_St_17_Min_1 = true;
    ns_5_St_17_Min_2 = false;
    ar_state_1_St_17_Max = 2;
    nr_5_St_17_Max = false;
    ns_5_St_17_Max_1 = true;
    ns_5_St_17_Max_2 = true;
    v_422 =
      merge ck_33_2_1
        (true -> ar_state_1_St_17_Max)(false -> ar_state_1_St_17_Min);
    v_423 =
      merge ck_33_2_0
        (true -> ((0 when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> ar_state_1_St_17_Off);
    ar_state_1 = merge ck_33_1 (true -> v_422)(false -> v_423);
    v_424 =
      merge ck_33_2_1 (true -> ns_5_St_17_Max_1)(false -> ns_5_St_17_Min_1);
    v_425 =
      merge ck_33_2_1 (true -> ns_5_St_17_Max_2)(false -> ns_5_St_17_Min_2);
    v_426 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> ns_5_St_17_Off_1);
    v_427 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> ns_5_St_17_Off_2);
    ns_5_1 = merge ck_33_1 (true -> v_424)(false -> v_426);
    ns_5_2 = merge ck_33_1 (true -> v_425)(false -> v_427);
    v_428 = merge ck_33_2_1 (true -> nr_5_St_17_Max)(false -> nr_5_St_17_Min);
    v_429 =
      merge ck_33_2_0
        (true -> ((true when false(ck_33_1)) when true(ck_33_2_0)))
        (false -> nr_5_St_17_Off);
    nr_5 = merge ck_33_1 (true -> v_428)(false -> v_429);
    ck_33_2_1 = (ck_33_2 when true(ck_33_1));
    ck_33_2_0 = (ck_33_2 when false(ck_33_1));
    ns_5_St_17_Off_2_1 = (ns_5_St_17_Off_2 when true(ns_5_St_17_Off_1));
    ns_5_St_17_Off_2_0 = (ns_5_St_17_Off_2 when false(ns_5_St_17_Off_1));
    ns_5_St_17_Min_2_1 = (ns_5_St_17_Min_2 when true(ns_5_St_17_Min_1));
    ns_5_St_17_Min_2_0 = (ns_5_St_17_Min_2 when false(ns_5_St_17_Min_1));
    ns_5_St_17_Max_2_1 = (ns_5_St_17_Max_2 when true(ns_5_St_17_Max_1));
    ns_5_St_17_Max_2_0 = (ns_5_St_17_Max_2 when false(ns_5_St_17_Max_1));
    v_430 = false fby ns_5_1;
    v_431 = false fby ns_5_2;
    ck_32_1 = v_430;
    ck_32_2 = v_431;
    r_5_St_17_Off =
      if ((c1_2 when false(ck_32_1)) when false(ck_32_2_0))
      then true
      else v_181;
    s_5_St_17_Off_1 =
      if ((c1_2 when false(ck_32_1)) when false(ck_32_2_0))
      then true
      else v_180_1;
    s_5_St_17_Off_2 =
      if ((c1_2 when false(ck_32_1)) when false(ck_32_2_0))
      then false
      else v_180_2;
    v_181 =
      if ((c2_2 when false(ck_32_1)) when false(ck_32_2_0))
      then true
      else ((pnr_5 when false(ck_32_1)) when false(ck_32_2_0));
    v_180_1 =
      if ((c2_2 when false(ck_32_1)) when false(ck_32_2_0))
      then true
      else false;
    v_180_2 =
      if ((c2_2 when false(ck_32_1)) when false(ck_32_2_0))
      then true
      else false;
    v_180_2_1 = (v_180_2 when true(v_180_1));
    v_180_2_0 = (v_180_2 when false(v_180_1));
    r_5_St_17_Min = if v_177 then true else v_179;
    s_5_St_17_Min_1 = if v_177 then false else v_178_1;
    s_5_St_17_Min_2 = if v_177 then false else v_178_2;
    v_179 =
      if ((c2_2 when true(ck_32_1)) when false(ck_32_2_1))
      then true
      else ((pnr_5 when true(ck_32_1)) when false(ck_32_2_1));
    v_178_1 =
      if ((c2_2 when true(ck_32_1)) when false(ck_32_2_1))
      then true
      else true;
    v_178_2 =
      if ((c2_2 when true(ck_32_1)) when false(ck_32_2_1))
      then true
      else false;
    v_177 = not(((c1_2 when true(ck_32_1)) when false(ck_32_2_1)));
    v_178_2_1 = (v_178_2 when true(v_178_1));
    v_178_2_0 = (v_178_2 when false(v_178_1));
    r_5_St_17_Max = if v_173 then true else v_176;
    s_5_St_17_Max_1 = if v_173 then true else v_175_1;
    s_5_St_17_Max_2 = if v_173 then false else v_175_2;
    v_176 =
      if v_174
      then true
      else ((pnr_5 when true(ck_32_1)) when true(ck_32_2_1));
    v_175_1 = if v_174 then false else true;
    v_175_2 = if v_174 then false else true;
    v_174 = not(((c2_2 when true(ck_32_1)) when true(ck_32_2_1)));
    v_173 = not(((c1_2 when true(ck_32_1)) when true(ck_32_2_1)));
    v_175_2_1 = (v_175_2 when true(v_175_1));
    v_175_2_0 = (v_175_2 when false(v_175_1));
    v_432 =
      merge ck_32_2_1 (true -> s_5_St_17_Max_1)(false -> s_5_St_17_Min_1);
    v_433 =
      merge ck_32_2_1 (true -> s_5_St_17_Max_2)(false -> s_5_St_17_Min_2);
    v_434 =
      merge ck_32_2_0
        (true -> ((true when false(ck_32_1)) when true(ck_32_2_0)))
        (false -> s_5_St_17_Off_1);
    v_435 =
      merge ck_32_2_0
        (true -> ((true when false(ck_32_1)) when true(ck_32_2_0)))
        (false -> s_5_St_17_Off_2);
    s_5_1 = merge ck_32_1 (true -> v_432)(false -> v_434);
    s_5_2 = merge ck_32_1 (true -> v_433)(false -> v_435);
    v_436 = merge ck_32_2_1 (true -> r_5_St_17_Max)(false -> r_5_St_17_Min);
    v_437 =
      merge ck_32_2_0
        (true -> ((true when false(ck_32_1)) when true(ck_32_2_0)))
        (false -> r_5_St_17_Off);
    r_5 = merge ck_32_1 (true -> v_436)(false -> v_437);
    ck_32_2_1 = (ck_32_2 when true(ck_32_1));
    ck_32_2_0 = (ck_32_2 when false(ck_32_1));
    s_5_St_17_Off_2_1 = (s_5_St_17_Off_2 when true(s_5_St_17_Off_1));
    s_5_St_17_Off_2_0 = (s_5_St_17_Off_2 when false(s_5_St_17_Off_1));
    s_5_St_17_Min_2_1 = (s_5_St_17_Min_2 when true(s_5_St_17_Min_1));
    s_5_St_17_Min_2_0 = (s_5_St_17_Min_2 when false(s_5_St_17_Min_1));
    s_5_St_17_Max_2_1 = (s_5_St_17_Max_2 when true(s_5_St_17_Max_1));
    s_5_St_17_Max_2_0 = (s_5_St_17_Max_2 when false(s_5_St_17_Max_1));
    ar_state_2 = ar_state_1;
    working = failed;
    c_3 = c_jan;
    pnr_6 = false fby nr_6;
    ck_31_1 = s_6_1;
    w_open_1_St_18_Closed = false;
    nr_6_St_18_Closed = false;
    ns_6_St_18_Closed_1 = true;
    w_open_1_St_18_Open = true;
    nr_6_St_18_Open = false;
    ns_6_St_18_Open_1 = false;
    w_open_1 =
      merge ck_31_1
        (true -> w_open_1_St_18_Closed)(false -> w_open_1_St_18_Open);
    ns_6_1 =
      merge ck_31_1 (true -> ns_6_St_18_Closed_1)(false -> ns_6_St_18_Open_1);
    nr_6 =
      merge ck_31_1 (true -> nr_6_St_18_Closed)(false -> nr_6_St_18_Open);
    ck_30_1 = true fby ns_6_1;
    r_6_St_18_Closed = if v_172 then true else (pnr_6 when true(ck_30_1));
    s_6_St_18_Closed_1 = if v_172 then false else true;
    v_172 = not((c_3 when true(ck_30_1)));
    r_6_St_18_Open =
      if (c_3 when false(ck_30_1)) then true else (pnr_6 when false(ck_30_1));
    s_6_St_18_Open_1 = if (c_3 when false(ck_30_1)) then true else false;
    s_6_1 =
      merge ck_30_1 (true -> s_6_St_18_Closed_1)(false -> s_6_St_18_Open_1);
    r_6 = merge ck_30_1 (true -> r_6_St_18_Closed)(false -> r_6_St_18_Open);
    c_2 = c_pc;
    pnr_7 = false fby nr_7;
    ck_29_1 = s_7_1;
    pc_on_1_St_19_Off = false;
    nr_7_St_19_Off = false;
    ns_7_St_19_Off_1 = true;
    pc_on_1_St_19_On = true;
    nr_7_St_19_On = false;
    ns_7_St_19_On_1 = false;
    pc_on_1 =
      merge ck_29_1 (true -> pc_on_1_St_19_Off)(false -> pc_on_1_St_19_On);
    ns_7_1 =
      merge ck_29_1 (true -> ns_7_St_19_Off_1)(false -> ns_7_St_19_On_1);
    nr_7 = merge ck_29_1 (true -> nr_7_St_19_Off)(false -> nr_7_St_19_On);
    ck_28_1 = true fby ns_7_1;
    r_7_St_19_Off =
      if (c_2 when true(ck_28_1)) then true else (pnr_7 when true(ck_28_1));
    s_7_St_19_Off_1 = if (c_2 when true(ck_28_1)) then false else true;
    r_7_St_19_On = if v_171 then true else (pnr_7 when false(ck_28_1));
    s_7_St_19_On_1 = if v_171 then true else false;
    v_171 = not((c_2 when false(ck_28_1)));
    s_7_1 = merge ck_28_1 (true -> s_7_St_19_Off_1)(false -> s_7_St_19_On_1);
    r_7 = merge ck_28_1 (true -> r_7_St_19_Off)(false -> r_7_St_19_On);
    arrived_1 = p1_arrived;
    pnr_8 = false fby nr_8;
    ck_27_1 = s_8_1;
    presence_2_St_20_Not_Present = false;
    nr_8_St_20_Not_Present = false;
    ns_8_St_20_Not_Present_1 = true;
    presence_2_St_20_Preent = true;
    nr_8_St_20_Preent = false;
    ns_8_St_20_Preent_1 = false;
    presence_2 =
      merge ck_27_1
        (true -> presence_2_St_20_Not_Present)
        (false -> presence_2_St_20_Preent);
    ns_8_1 =
      merge ck_27_1
        (true -> ns_8_St_20_Not_Present_1)(false -> ns_8_St_20_Preent_1);
    nr_8 =
      merge ck_27_1
        (true -> nr_8_St_20_Not_Present)(false -> nr_8_St_20_Preent);
    ck_26_1 = true fby ns_8_1;
    r_8_St_20_Not_Present =
      if (arrived_1 when true(ck_26_1))
      then true
      else (pnr_8 when true(ck_26_1));
    s_8_St_20_Not_Present_1 =
      if (arrived_1 when true(ck_26_1)) then false else true;
    r_8_St_20_Preent =
      if (arrived_1 when false(ck_26_1))
      then true
      else (pnr_8 when false(ck_26_1));
    s_8_St_20_Preent_1 =
      if (arrived_1 when false(ck_26_1)) then true else false;
    s_8_1 =
      merge ck_26_1
        (true -> s_8_St_20_Not_Present_1)(false -> s_8_St_20_Preent_1);
    r_8 =
      merge ck_26_1
        (true -> r_8_St_20_Not_Present)(false -> r_8_St_20_Preent);
    arrived = p_arrived;
    pnr_9 = false fby nr_9;
    ck_25_1 = s_9_1;
    presence_1_St_21_Not_Present = false;
    nr_9_St_21_Not_Present = false;
    ns_9_St_21_Not_Present_1 = true;
    presence_1_St_21_Preent = true;
    nr_9_St_21_Preent = false;
    ns_9_St_21_Preent_1 = false;
    presence_1 =
      merge ck_25_1
        (true -> presence_1_St_21_Not_Present)
        (false -> presence_1_St_21_Preent);
    ns_9_1 =
      merge ck_25_1
        (true -> ns_9_St_21_Not_Present_1)(false -> ns_9_St_21_Preent_1);
    nr_9 =
      merge ck_25_1
        (true -> nr_9_St_21_Not_Present)(false -> nr_9_St_21_Preent);
    ck_24_1 = true fby ns_9_1;
    r_9_St_21_Not_Present =
      if (arrived when true(ck_24_1))
      then true
      else (pnr_9 when true(ck_24_1));
    s_9_St_21_Not_Present_1 =
      if (arrived when true(ck_24_1)) then false else true;
    r_9_St_21_Preent =
      if (arrived when false(ck_24_1))
      then true
      else (pnr_9 when false(ck_24_1));
    s_9_St_21_Preent_1 =
      if (arrived when false(ck_24_1)) then true else false;
    s_9_1 =
      merge ck_24_1
        (true -> s_9_St_21_Not_Present_1)(false -> s_9_St_21_Preent_1);
    r_9 =
      merge ck_24_1
        (true -> r_9_St_21_Not_Present)(false -> r_9_St_21_Preent);
    c_1 = c_arm;
    pnr_10 = false fby nr_10;
    ck_23_1 = s_10_1;
    arm_open_1_St_22_Locked = false;
    nr_10_St_22_Locked = false;
    ns_10_St_22_Locked_1 = true;
    arm_open_1_St_22_Open = true;
    nr_10_St_22_Open = false;
    ns_10_St_22_Open_1 = false;
    arm_open_1 =
      merge ck_23_1
        (true -> arm_open_1_St_22_Locked)(false -> arm_open_1_St_22_Open);
    ns_10_1 =
      merge ck_23_1
        (true -> ns_10_St_22_Locked_1)(false -> ns_10_St_22_Open_1);
    nr_10 =
      merge ck_23_1 (true -> nr_10_St_22_Locked)(false -> nr_10_St_22_Open);
    ck_22_1 = true fby ns_10_1;
    r_10_St_22_Locked = if v_170 then true else (pnr_10 when true(ck_22_1));
    s_10_St_22_Locked_1 = if v_170 then false else true;
    v_170 = not((c_1 when true(ck_22_1)));
    r_10_St_22_Open =
      if (c_1 when false(ck_22_1))
      then true
      else (pnr_10 when false(ck_22_1));
    s_10_St_22_Open_1 = if (c_1 when false(ck_22_1)) then true else false;
    s_10_1 =
      merge ck_22_1 (true -> s_10_St_22_Locked_1)(false -> s_10_St_22_Open_1);
    r_10 =
      merge ck_22_1 (true -> r_10_St_22_Locked)(false -> r_10_St_22_Open);
    c = c_rot;
    pnr_11 = false fby nr_11;
    ck_21_1 = s_11_1;
    r_on_St_23_Off = false;
    nr_11_St_23_Off = false;
    ns_11_St_23_Off_1 = true;
    r_on_St_23_On = true;
    nr_11_St_23_On = false;
    ns_11_St_23_On_1 = false;
    r_on = merge ck_21_1 (true -> r_on_St_23_Off)(false -> r_on_St_23_On);
    ns_11_1 =
      merge ck_21_1 (true -> ns_11_St_23_Off_1)(false -> ns_11_St_23_On_1);
    nr_11 = merge ck_21_1 (true -> nr_11_St_23_Off)(false -> nr_11_St_23_On);
    ck_20_1 = true fby ns_11_1;
    r_11_St_23_Off =
      if (c when true(ck_20_1)) then true else (pnr_11 when true(ck_20_1));
    s_11_St_23_Off_1 = if (c when true(ck_20_1)) then false else true;
    r_11_St_23_On = if v_169 then true else (pnr_11 when false(ck_20_1));
    s_11_St_23_On_1 = if v_169 then true else false;
    v_169 = not((c when false(ck_20_1)));
    s_11_1 =
      merge ck_20_1 (true -> s_11_St_23_Off_1)(false -> s_11_St_23_On_1);
    r_11 = merge ck_20_1 (true -> r_11_St_23_Off)(false -> r_11_St_23_On);
    push = abre_porta;
    c_porta_1 = c_porta;
    pnr_12 = false fby nr_12;
    ck_19_1 = s_12_1;
    porta_open_St_24_Closed = false;
    nr_12_St_24_Closed = false;
    ns_12_St_24_Closed_1 = true;
    porta_open_St_24_Open = true;
    nr_12_St_24_Open = false;
    ns_12_St_24_Open_1 = false;
    porta_open =
      merge ck_19_1
        (true -> porta_open_St_24_Closed)(false -> porta_open_St_24_Open);
    ns_12_1 =
      merge ck_19_1
        (true -> ns_12_St_24_Closed_1)(false -> ns_12_St_24_Open_1);
    nr_12 =
      merge ck_19_1 (true -> nr_12_St_24_Closed)(false -> nr_12_St_24_Open);
    ck_18_1 = true fby ns_12_1;
    r_12_St_24_Closed = if v_168 then true else (pnr_12 when true(ck_18_1));
    s_12_St_24_Closed_1 = if v_168 then false else true;
    v_168 = not((c_porta_1 when true(ck_18_1)));
    r_12_St_24_Open =
      if (c_porta_1 when false(ck_18_1))
      then true
      else (pnr_12 when false(ck_18_1));
    s_12_St_24_Open_1 =
      if (c_porta_1 when false(ck_18_1)) then true else false;
    s_12_1 =
      merge ck_18_1 (true -> s_12_St_24_Closed_1)(false -> s_12_St_24_Open_1);
    r_12 =
      merge ck_18_1 (true -> r_12_St_24_Closed)(false -> r_12_St_24_Open);
    shift = shift_turno;
    pnr_13 = false fby nr_13;
    ck_17_1 = s_13_1;
    turno_St_25_Dia = false;
    nr_13_St_25_Dia = false;
    ns_13_St_25_Dia_1 = true;
    turno_St_25_Noite = true;
    nr_13_St_25_Noite = false;
    ns_13_St_25_Noite_1 = false;
    turno =
      merge ck_17_1 (true -> turno_St_25_Dia)(false -> turno_St_25_Noite);
    ns_13_1 =
      merge ck_17_1 (true -> ns_13_St_25_Dia_1)(false -> ns_13_St_25_Noite_1);
    nr_13 =
      merge ck_17_1 (true -> nr_13_St_25_Dia)(false -> nr_13_St_25_Noite);
    ck_1 = true fby ns_13_1;
    r_13_St_25_Dia =
      if (shift when true(ck_1)) then true else (pnr_13 when true(ck_1));
    s_13_St_25_Dia_1 = if (shift when true(ck_1)) then false else true;
    r_13_St_25_Noite =
      if (shift when false(ck_1)) then true else (pnr_13 when false(ck_1));
    s_13_St_25_Noite_1 = if (shift when false(ck_1)) then true else false;
    s_13_1 =
      merge ck_1 (true -> s_13_St_25_Dia_1)(false -> s_13_St_25_Noite_1);
    r_13 = merge ck_1 (true -> r_13_St_25_Dia)(false -> r_13_St_25_Noite);
    night = turno;
    p_open = porta_open;
    r_on1 = r_on;
    arm_open = arm_open_1;
    presence = presence_1;
    presence_t = presence_2;
    pc_on = pc_on_1;
    w_open = w_open_1;
    ar_fail = working;
    ar_state = ar_state_2;
    mopa = policy;
    pers = pers_2;
    lamp = lamp_2;
    l_fail = failed_2;
    ns_3_3_1_1 = ((ns_3_3 when true(ns_3_1)) when true(ns_3_2_1));
    ns_3_3_1_0 = ((ns_3_3 when true(ns_3_1)) when false(ns_3_2_1));
    ns_3_2_1 = (ns_3_2 when true(ns_3_1));
    ns_3_3_0_1 = ((ns_3_3 when false(ns_3_1)) when true(ns_3_2_0));
    ns_3_3_0_0 = ((ns_3_3 when false(ns_3_1)) when false(ns_3_2_0));
    ns_3_2_0 = (ns_3_2 when false(ns_3_1));
    s_3_3_1_1 = ((s_3_3 when true(s_3_1)) when true(s_3_2_1));
    s_3_3_1_0 = ((s_3_3 when true(s_3_1)) when false(s_3_2_1));
    s_3_2_1 = (s_3_2 when true(s_3_1));
    s_3_3_0_1 = ((s_3_3 when false(s_3_1)) when true(s_3_2_0));
    s_3_3_0_0 = ((s_3_3 when false(s_3_1)) when false(s_3_2_0));
    s_3_2_0 = (s_3_2 when false(s_3_1));
    ns_5_2_1 = (ns_5_2 when true(ns_5_1));
    ns_5_2_0 = (ns_5_2 when false(ns_5_1));
    s_5_2_1 = (s_5_2 when true(s_5_1));
    s_5_2_0 = (s_5_2 when false(s_5_1))
  tel

