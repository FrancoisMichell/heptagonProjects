(*link pros slides: https://drive.google.com/open?id=1QGEjtj41JJPet6rVrFoiDohjFCYRYAhd7RuK-l4HRhs*)

node lamp ( c1, c2, sw : bool ) returns ( lamp_on : bool )
	let
		automaton
			state Off do
				lamp_on = false;
				unless (c1 & sw) or not c2 then On

			state On do
				lamp_on = true;
				unless (c1 & sw) or not c2 then Off
		end
	tel

node blind ( c1, c2, sw: bool ) returns ( blind_open : bool )
	let
		automaton
			state Down do
				blind_open = false;
				unless (c1 & sw) or not c2 then Up

			state Up do
				blind_open = true;
				unless (c1 & sw) or not c2 then Down
		end
	tel

node door ( c_door : bool ) returns ( door_open : bool )
	let
	    automaton
		    state Closed do
				door_open = false;
			    unless not c_door then Open
		    state Open do
				door_open = true;
			    unless not c_door then Closed
	    end
	tel

node closet ( c : bool ) returns ( closet_open : bool )
	let
		automaton
			state Locked do
				closet_open = false;
				unless not c then Open
			state Open do
				closet_open = true;
				unless c then Locked
		end
	tel

node person ( arrived : bool ) returns ( presence : bool )
	let
		automaton
			state Not_Present do
				presence = false;
				unless arrived then Present
			state Present do
				presence = true;
				unless arrived then Not_Present
		end
	tel

node computer ( c : bool ) returns ( computer_on : bool )
	let
		automaton
			state Off do
				computer_on = false;
				unless not c then On
			state On do
				computer_on = true;
				unless not c then Off
		end
	tel

node window ( c : bool ) returns ( window_open : bool )
	let
		automaton
			state Closed do
				window_open = false;
				unless not c then Open
				
			state Open do
				window_open = true;
				unless c then Closed
				
		end
	tel

node air_conditioner ( c1, c2 : bool ) returns ( air_state : int )
	let
		automaton
			state Off do
				air_state = 0;
				unless not c1 then Min
					| not c2 then Max
			state Min do
				air_state = 1;
				unless not c1 then Off
					| not c2 then Max
			state Max do
				air_state = 2;
				unless not c1 then Min
					| not c2 then Off
		end
	tel

node day_shift (change : bool) returns ( night : bool)
	let
		automaton
			state Dia do
				night = false
				unless change then Noite
			state Noite do
				night = true
				unless change then Dia
		end
	tel

node fail (failed_recovered: bool) returns (failed : bool)
	let
		automaton
			state Funcionando do
				failed = false
				unless failed_recovered then Falha
			state Falha do
				failed = true
				unless failed_recovered then Funcionando
		end
	tel

node air_fail (c1, c2, failed_recovered:bool) returns (air_state:int; failed:bool)
	let
		air_state = inlined air_conditioner (c1, c2);
		failed = inlined fail(failed_recovered);
	tel

node lamp_fail (sw, c1, c2, failed_recovered: bool) returns (lamp, failed: bool)
	let
		lamp = inlined lamp(sw, c1, c2);
		failed = inlined fail(failed_recovered);	
	tel

node blind_fail (sw, c1, c2, failed_recovered: bool) returns (blind, failed: bool)
	let
		blind = inlined blind(sw, c1, c2);
		failed = inlined fail(failed_recovered);	
	tel

node controller( 
	change_shift, worker, cleaner, air_failed_recovered, light_switch, light_failed_recovered, blind_switch, blind_failed_recovered: bool ) 
	
	returns (

	night, door_open, worker_presence, cleaner_presence, pc_on, window_open, 
	closet_open, air_failed, light_on, light_failed, blind_up, blind_failed: bool; air_state : int;)
  	
  	contract
		var rule1, rule1_5, rule2, rule2_5, rule4, rule5, rule6, rule7 : bool;

		let
			(* SE NÃO HOUVER NINGUÉM *)
		    rule4 = not (not worker_presence & not cleaner_presence & night & not air_failed & not light_failed & not blind_failed) or ( (not pc_on & not window_open) &  air_state = 0 & not light_on & not blind_up);
		    rule5 = not (not worker_presence & not cleaner_presence & not night & not air_failed & not light_failed & not blind_failed) or ( (not pc_on & not window_open) &  air_state = 0 & not light_on & not blind_up);
		    
		    (* SE HOUVER ALGUEM *)

		   	(* SE FOR DIA *)
		    rule6 = not (worker_presence & not night & pc_on & light_on & not window_open & not air_failed) or air_state = 2;


		    (* SE FOR NOITE *)

		    (* SE A LUZ FALHOU *)
		    rule2 = not ((worker_presence or cleaner_presence) & night & light_failed & not air_failed) or (not light_on & blind_up & air_state = 1);
		    
		    (* SE A LUZ E O AR FALHARAM *)
		    rule2_5 = not ((worker_presence or cleaner_presence) & night & light_failed & air_failed) or (not light_on & blind_up & window_open & door_open & air_state = 0);

		    (* SE A LUZ NÃO FALHOU *)
		    rule1 = not ((worker_presence or cleaner_presence) & night & not light_failed & not air_failed) or (light_on & not blind_up & air_state = 1);
		    
		    (* SE O AR FALHOU *)
		    rule1_5 = not ((worker_presence or cleaner_presence) & night & not light_failed & air_failed) or (light_on & blind_up & window_open & door_open & air_state = 0);




		    rule7 = not (cleaner_presence & not air_failed) or ((not pc_on) & closet_open & air_state = 1);

		tel
    enforce ( rule1 & rule1_5 & rule2 & rule2_5 (* & rule4 & rule5 *) & rule6 & rule7)
    with ( c_door, c_pc, c_window, c_air_1, c_air_2, c_closet,  c_light_1, c_light_2, c_blind_1, c_blind_2 : bool )

  	let
  		night = inlined day_shift (change_shift);
		door_open = inlined door (c_door);
		closet_open = inlined closet (c_closet);
		worker_presence = inlined person (worker);
		cleaner_presence = inlined person (cleaner);
		pc_on = inlined computer (c_pc);
		window_open = inlined window (c_window);
		(air_state, air_failed) = inlined air_fail (c_air_1, c_air_2, air_failed_recovered);
  		(light_on, light_failed) = inlined lamp_fail(light_switch, c_light_1, c_light_2, light_failed_recovered);
  		(blind_up, blind_failed) = inlined blind_fail(blind_switch, c_blind_1, c_blind_2, blind_failed_recovered);
	tel

