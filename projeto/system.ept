(*link pros slides: https://drive.google.com/open?id=1QGEjtj41JJPet6rVrFoiDohjFCYRYAhd7RuK-l4HRhs*)

type modes = Minimal | Eco | Confort
node management_policy( eco_input, comfort_input : bool ) returns ( mode: modes )
	let
    automaton
	    state Minimal_safety do
	      mode = Minimal
		    unless eco_input then Eco
		      | comfort_input then Comfort

	    state Eco do
	      mode = Eco
		    unless eco_input then Minimal_safety
		      | comfort_input then Comfort

	    state Comfort do
	      mode = Confort
		    unless eco_input then Eco
			      | comfort_input then Minimal_safety
    end
	tel

node ilumination_policy (up, down, night : bool) returns ( l_state, p_state, policy : int)
	let
		automaton
			state Natural do
				l_state = 0;
				p_state = 0;
				policy = 1;
				unless up & night then Half
					| not night then Artificial
			state Half do
				l_state = 1;
				p_state = 1;
				policy = 2
				unless up & night then Artificial
					| not night then Artificial
					| down & night then Natural
			state Artificial do
				l_state = 2;
				p_state = 2;
				policy = 3
				unless down & night then Half
					
		end
	tel


node porta( push, c_porta : bool ) returns ( porta_open : bool )
	let
	    automaton
		    state Closed do
			porta_open = false;
		    unless not c_porta then Open
		    state Open do
			porta_open = true;
		    unless c_porta then Closed
	    end
	tel

node roteador ( c : bool ) returns ( r_on : bool )
	let
		automaton
			state Off do
				r_on = false;
				unless c then On
			state On do
				r_on = true;
				unless not c then Off
		end
	tel

node armario_de_servico ( c : bool ) returns ( arm_open : bool )
	let
		automaton
			state Locked do
				arm_open = false;
				unless not c then Open
			state Open do
				arm_open = true;
				unless c then Locked
		end
	tel

node pessoas ( arrived : bool ) returns ( presence : bool )
	let
		automaton
			state Not_Present do
				presence = false;
				unless arrived then Preent
			state Preent do
				presence = true;
				unless arrived then Not_Present
		end
	tel

node computadores ( c : bool ) returns ( pc_on : bool )
	let
		automaton
			state Off do
				pc_on = false;
				unless c then On
			state On do
				pc_on = true;
				unless not c then Off
		end
	tel

node janelas ( c : bool ) returns ( w_open : bool )
	let
		automaton
			state Closed do
				w_open = false;
				
			state Open do
				w_open = true;
				
		end
	tel

node luzes ( c1, c2 : bool ) returns ( l_state : int )
	let
		automaton
			state None do
				l_state = 0;
				unless c1 then Some
					| c2 then All
			state Some do
				l_state = 1;
				unless not c1 then None
					| c2 then All
			state All do
				l_state = 2;
				unless not c1 then Some
					| not c2 then None
		end
	tel

node persianas ( policy : int ) returns ( p_state : int )
	let
		automaton
			state Up do
				p_state = 0;
				unless policy = 1 then Mid
					| policy = 2 then Down
			state Mid do
				p_state = 1;
				unless policy = 0 then Down
					| policy = 2 then Up
			state Down do
				p_state = 2;
				unless policy = 1 then Mid
					| policy = 0 then Up
		end
	tel

node ar_condicionado ( c1, c2 : bool ) returns ( ar_state : int )
	let
		automaton
			state Off do
				ar_state = 0;
				unless c1 then Min
					| c2 then Max
			state Min do
				ar_state = 1;
				unless not c1 then Off
					| c2 then Max
			state Max do
				ar_state = 2;
				unless not c1 then Min
					| not c2 then Off
		end
	tel

node turno (shift : bool) returns ( turno : bool)
	let
		automaton
			state Dia do
				turno = false
				unless shift then Noite
			state Noite do
				turno = true
				unless shift then Dia
		end
	tel

node controller( shift_turno, abre_porta, p_arrived, p1_arrived, ilumination_up, ilumination_down : bool ) 
	returns (night, p_open, r_on1, presence, presence_t, pc_on, w_open, arm_open : bool; lampada, persiana, ar_state, policy : int;)
  	
  	contract
		var rule1, rule2, rule3, rule4, rule5, rule6 : bool;

		let
		    rule1 = not ((presence or presence_t) & night) or (policy = 3 & p_open);
		    rule2 = not ((presence or presence_t) & not night) or (p_open);

		    rule3 = not (not presence & not presence_t & night) or (not p_open & (not r_on1 & not pc_on & not w_open & ar_state = 0));
		    rule4 = not (not presence & not presence_t & not night) or (p_open & (not r_on1 & not pc_on & not w_open & ar_state = 0));
		    
		    rule5 = not (presence & not night & pc_on & not w_open) or ar_state = 2;
		    rule6 = not (presence_t) or (p_open & (not r_on1 & not pc_on) & arm_open & ar_state = 1);

			
			
		tel
    enforce (rule1 & rule2 & rule3 & rule4 & rule5 & rule6)
    with ( c_porta, c_rot, c_pc, c_jan, c_luz1, c_luz2, c_ar1, c_ar2, c_arm, c_policy : bool )

  	let
  		night = inlined turno (shift_turno);
		p_open = inlined porta (abre_porta, c_porta);
		r_on1 = inlined roteador (c_rot);
		arm_open = inlined armario_de_servico (c_arm);
		presence = inlined pessoas (p_arrived);
		presence_t = inlined pessoas (p1_arrived);
		pc_on = inlined computadores (c_pc);
		w_open = inlined janelas (c_jan);
		(* lampada = inlined luzes (c_luz1, c_luz2); *)
		ar_state = inlined ar_condicionado (c_ar1, c_ar2);
		(lampada, persiana, policy) = inlined ilumination_policy(ilumination_up, ilumination_down, c_policy);
		(* p_state = inlined persianas (persiana); *)
	tel

