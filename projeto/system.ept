node light_source ( sw, c1, c2: bool ) returns ( light_source_on : int )
	let
		automaton
			state Off do
				light_source_on = 0;
				unless (c1 & sw) or not c2 then On

			state On do
				light_source_on = 1;
				unless (c1 & sw) or not c2 then Off
		end
	tel

node door ( c : bool ) returns ( door_open : int )
	let
	    automaton
		    state Closed do
				door_open = 0;
			    unless not c then Open
		    state Open do
				door_open = 1;
			    unless not c then Closed
	    end
	tel

node closet ( c : bool ) returns ( closet_open : int )
	let
		automaton
			state Locked do
				closet_open = 0;
				unless not c then Open
			state Open do
				closet_open = 1;
				unless c then Locked
		end
	tel

node person ( arrived : bool ) returns ( presence : bool )
	let
		automaton
			state Not_Present do
				presence = false;
				unless arrived then Present
			state Present do
				presence = true;
				unless arrived then Not_Present
		end
	tel

node computer ( c : bool ) returns ( computer_on : int )
	let
		automaton
			state Off do
				computer_on = 0;
				unless not c then On
			state On do
				computer_on = 1;
				unless not c then Off
		end
	tel

node window ( c : bool ) returns ( window_open : int )
	let
		automaton
			state Closed do
				window_open = 0;
				unless not c then Open
				
			state Open do
				window_open = 1;
				unless c then Closed
				
		end
	tel

node air_conditioner ( c1, c2 : bool ) returns ( air_state : int )
	let
		automaton
			state Off do
				air_state = 0;
				unless not c1 then Min
					| not c2 then Max
			state Min do
				air_state = 1;
				unless not c1 then Off
					| not c2 then Max
			state Max do
				air_state = 2;
				unless not c1 then Min
					| not c2 then Off
		end
	tel

node day_shift (change : bool) returns ( night : bool)
	let
		automaton
			state Day do
				night = false
				unless change then Night
			state Night do
				night = true
				unless change then Day
		end
	tel

node fail (failed_recovered: bool) returns (failed : bool)
	let
		automaton
			state Working do
				failed = false
				unless failed_recovered then Failed
			state Failed do
				failed = true
				unless failed_recovered then Working
		end
	tel

 node light_source_fail (sw, c1, c2, failed_recovered: bool) returns (out: int)
	var light_source : int; failed: bool;
	let
		light_source = inlined light_source (sw, c1, c2);
		failed = inlined fail (failed_recovered);
		switch failed
		 | true do out = light_source + 2
		 | false do out = light_source
		end
	tel

node door_fail (c1, failed_recovered: bool) returns (out: int)
	var door : int; failed: bool;
	let
		door = inlined door (c1);
		failed = inlined fail (failed_recovered);
		switch failed
		 | true do out = door + 2
		 | false do out = door
		end
	tel

node closet_fail (c1, failed_recovered: bool) returns (out: int)
	var closet : int; failed: bool;
	let
		closet = inlined closet (c1);
		failed = inlined fail (failed_recovered);
		switch failed
		 | true do out = closet + 2
		 | false do out = closet
		end
	tel

node computer_fail (c1, failed_recovered: bool) returns (out: int)
	var computer : int; failed: bool;
	let
		computer = inlined computer (c1);
		failed = inlined fail (failed_recovered);
		switch failed
		 | true do out = computer + 2
		 | false do out = computer
		end
	tel 

node window_fail (c1, failed_recovered: bool) returns (out: int)
	var window : int; failed: bool;
	let
		window = inlined window (c1);
		failed = inlined fail (failed_recovered);
		switch failed
		 | true do out = window + 2
		 | false do out = window
		end
	tel

node air_fail (c1, c2, failed_recovered:bool) returns (out: int;)
	var air_state : int; failed : bool;
	let
		air_state = inlined air_conditioner (c1, c2);
		failed = inlined fail(failed_recovered);
		switch failed
		 | true do out = air_state + 3
		 | false do out = air_state
		end
	tel

node controller( change_shift, worker, cleaner, air_failed_recovered, light_switch, light_failed_recovered, blind_switch, blind_failed_recovered, door_failed_recovered, closet_failed_recovered, pc_failed_recovered, window_failed_recovered: bool)
	
	returns (
		night, worker_presence, cleaner_presence : bool; 
		door_status, pc_status, window_status, closet_status, air_status, light_status, blind_status : int;)
  	
  	contract
		var rule0, rule1 , rule1_1, rule1_2, rule1_3, rule2, rule5, rule6, rule6_1, rule6_2, rule6_3, rule6_4, rule7, rule7_5, rule8, rule8_5 : bool;

		let
			rule0 = not (not worker_presence & not cleaner_presence) or (air_status <> 1 & air_status <> 2 & light_status <> 1 & blind_status <> 1 & door_status <> 1 & pc_status <> 1 & window_status <> 1 & closet_status <> 1);
			
			rule1 = not ((worker_presence or cleaner_presence) & night & light_status <= 1) or (light_status = 1);
			rule1_3 = not ((worker_presence or cleaner_presence) & night & light_status >= 2 & blind_status <= 1) or blind_status = 1;
			
			rule2 = not ((worker_presence or cleaner_presence) & not night & light_status <= 1 & blind_status <= 1) or (light_status = 1 or blind_status = 1);
			
			rule1_1 = not ((worker_presence or cleaner_presence) & light_status >= 2 & blind_status <= 1) or (blind_status = 1);
			rule1_2 = not ((worker_presence or cleaner_presence) & light_status <= 1 & blind_status >= 2) or (light_status = 1);

			rule5 = not (worker_presence & cleaner_presence & air_status <= 2) or air_status = 2;
			rule6 = not (not (worker_presence & cleaner_presence) & (worker_presence or cleaner_presence) & air_status <= 2) or (air_status = 1 & door_status <> 1 & window_status <> 1);
			
			rule6_1 = not ((worker_presence or cleaner_presence) & air_status >= 3 & blind_status <= 1 & window_status <= 1 & door_status <= 1) or (blind_status = 1 & window_status = 1 & door_status = 1);
			rule6_2 = not ((worker_presence or cleaner_presence) & air_status >= 3 & blind_status >= 2 &                      door_status <= 1) or (window_status <> 1 & door_status = 1);
			rule6_3 = not ((worker_presence or cleaner_presence) & air_status >= 3 & 					 window_status >= 2 & door_status <= 1) or (door_status = 1);
			rule6_4 = not ((worker_presence or cleaner_presence) & air_status >= 3 & blind_status <= 1 & window_status <= 1 & door_status >= 2) or (blind_status = 1 & window_status = 1 &  door_status <> 1);

			rule7 = not (worker_presence & pc_status <= 1) or pc_status = 1;
			rule7_5 = not (not worker_presence & pc_status <= 1) or pc_status = 0;

			rule8 = not (cleaner_presence & closet_status <= 1) or closet_status = 1;
			rule8_5 = not (not cleaner_presence & closet_status <= 1) or closet_status = 0;
		tel
    enforce (rule1 & rule1_1 & rule1_2 & rule1_3 & rule2 & rule0 & rule5 & rule6 & rule6_1 & rule6_2 & rule6_3 & rule6_4 & rule7 & rule7_5 & rule8 & rule8_5)
    with ( c_door, c_pc, c_window, c_air_1, c_air_2, c_closet,  c_light_1, c_blind_1, c_light_2, c_blind_2 : bool )

  	let
  		night = inlined day_shift (change_shift);
		worker_presence = inlined person (worker);
		cleaner_presence = inlined person (cleaner);
		(* door_status = inlined door (c_door); *)
		door_status = inlined door_fail (c_door, door_failed_recovered);
		(* pc_status = inlined computer (c_pc); *)
		pc_status = inlined computer_fail (c_pc, pc_failed_recovered);
		(* air_status = inlined air_conditioner (c_air_1, c_air_2); *)
		air_status = inlined air_fail (c_air_1, c_air_2, air_failed_recovered);
		(* window_status = inlined window (c_window); *)
		window_status = inlined window_fail (c_window, window_failed_recovered);
		(* closet_status = inlined closet (c_closet); *)
		closet_status = inlined closet_fail (c_closet, closet_failed_recovered);
		(* light_status = inlined light_source (light_switch, c_light_1, c_light_2); *)
  		light_status = inlined light_source_fail (light_switch, c_light_1, c_light_2, light_failed_recovered);
  		(* blind_status = inlined light_source (blind_switch, c_blind_1, c_blind_2); *)
  		blind_status = inlined light_source_fail (blind_switch, c_blind_1, c_blind_2, blind_failed_recovered);
	tel
(* for i in `seq 30`; do make clean && /usr/bin/time -v -o ./no_errors.txt -a make &; done *)
